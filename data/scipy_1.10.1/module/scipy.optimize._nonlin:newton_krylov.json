{
  "aliases": [
    "scipy.optimize.newton_krylov"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This method is suitable for solving large-scale problems."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function implements a Newton-Krylov solver. The basic idea is to compute the inverse of the Jacobian with an iterative Krylov method. These methods require only evaluating the Jacobian-vector products, which are conveniently approximated by a finite difference:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "J v \\approx (f(x + \\omega*v/|v|) - f(x)) / \\omega"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Due to the use of iterative matrix inverses, these methods can deal with large nonlinear problems."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "SciPy's "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "scipy",
                "path": "scipy.sparse.linalg",
                "type": "RefInfo",
                "version": "1.10.1"
              },
              "type": "Link",
              "value": "scipy.sparse.linalg"
            },
            {
              "type": "text",
              "value": " module offers a selection of Krylov solvers to choose from. The default here is "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "scipy",
                "path": "scipy.sparse.linalg._isolve.lgmres:lgmres",
                "type": "RefInfo",
                "version": "1.10.1"
              },
              "type": "Link",
              "value": "lgmres"
            },
            {
              "type": "text",
              "value": ", which is a variant of restarted GMRES iteration that reuses some of the information obtained in the previous Newton steps to invert Jacobians in subsequent steps."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For a review on Newton-Krylov methods, see for example , and for the LGMRES sparse inverse method, see ."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function whose root to find; should take and return an array-like object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "F",
              "type": "Param",
              "type_": "function(x) -> f"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial guess for the solution"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "xin",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative step size to use in numerical differentiation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rdiff",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Krylov method to use to approximate the Jacobian.  Can be a string, or a function implementing the same interface as the iterative solvers in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.sparse.linalg",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "scipy.sparse.linalg"
                    },
                    {
                      "type": "text",
                      "value": ". If a string, needs to be one of: "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'lgmres'"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'gmres'"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'bicgstab'"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'cgs'"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'minres'"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'tfqmr'"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The default is "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.sparse.linalg._isolve.lgmres",
                        "path": "scipy.sparse.linalg._isolve.lgmres:lgmres",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.sparse.linalg.lgmres"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "method",
              "type": "Param",
              "type_": "str or callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Parameter to pass to the \"inner\" Krylov solver: maximum number of iterations. Iteration will stop after maxiter steps even if the specified tolerance has not been achieved."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "inner_maxiter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Preconditioner for the inner Krylov iteration. Note that you can use also inverse Jacobians as (adaptive) preconditioners. For example,"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "type": "code",
                  "value": ">>> from scipy.optimize import BroydenFirst, KrylovJacobian\n>>> from scipy.optimize import InverseJacobian\n>>> jac = BroydenFirst()\n>>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the preconditioner has a method named 'update', it will be called as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "update(x, f)"
                    },
                    {
                      "type": "text",
                      "value": " after each nonlinear step, with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " giving the current point, and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f"
                    },
                    {
                      "type": "text",
                      "value": " the current function value."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "inner_M",
              "type": "Param",
              "type_": "LinearOperator or InverseJacobian"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Size of the subspace kept across LGMRES nonlinear iterations. See "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.sparse.linalg._isolve.lgmres",
                        "path": "scipy.sparse.linalg._isolve.lgmres:lgmres",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.sparse.linalg.lgmres"
                    },
                    {
                      "type": "text",
                      "value": " for details."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "outer_k",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Keyword parameters for the \"inner\" Krylov solver (defined with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "method",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "method"
                    },
                    {
                      "type": "text",
                      "value": "). Parameter names must start with the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.stats._morestats:_mood_inner_lc",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "inner_"
                    },
                    {
                      "type": "text",
                      "value": " prefix which will be stripped before passing on the inner method. See, e.g., "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.sparse.linalg._isolve.iterative",
                        "path": "scipy.sparse.linalg._isolve.iterative:gmres",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.sparse.linalg.gmres"
                    },
                    {
                      "type": "text",
                      "value": " for details."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "inner_kwargs",
              "type": "Param",
              "type_": "kwargs"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of iterations to make. If omitted (default), make as many as required to meet tolerances."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Print status to stdout on every iteration."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "verbose",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of iterations to make. If more are needed to meet convergence, "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "NoConvergence"
                    },
                    {
                      "type": "text",
                      "value": " is raised."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Absolute tolerance (in max-norm) for the residual. If omitted, default is 6e-6."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "f_tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative tolerance for the residual. If omitted, not used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "f_rtol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Absolute minimum step size, as determined from the Jacobian approximation. If the step size is smaller than this, optimization is terminated as successful. If omitted, not used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x_tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative minimum step size. If omitted, not used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x_rtol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Norm to use in convergence check. Default is the maximum norm."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "tol_norm",
              "type": "Param",
              "type_": "function(vector) -> scalar, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Which type of a line search to use to determine the step size in the direction given by the Jacobian approximation. Defaults to 'armijo'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "line_search",
              "type": "Param",
              "type_": "{None, 'armijo' (default), 'wolfe'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optional callback function. It is called on every iteration as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "callback(x, f)"
                    },
                    {
                      "type": "text",
                      "value": " where "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is the current solution and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.optimize._bglu_dense:_consider_refactor.<locals>.f",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "f"
                    },
                    {
                      "type": "text",
                      "value": " the corresponding residual."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "callback",
              "type": "Param",
              "type_": "function, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When a solution was not found."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NoConvergence"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An array (of similar array type as "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": ") containing the final solution."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sol",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find a root of a function, using Krylov approximation for inverse Jacobian."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "The following functions define a system of nonlinear equations"
      },
      {
        "type": "code",
        "value": "def fun(x):\n    return [x[0] + 0.5 * x[1] - 1.0,\n            0.5 * (x[1] - x[0]) ** 2]"
      },
      {
        "type": "text",
        "value": "A solution can be obtained as follows."
      },
      {
        "type": "code",
        "value": "from scipy import optimize\nsol = optimize.newton_krylov(fun, [0, 0])\nsol"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/private/var/folders/7x/x6hsdv257b3_ml15w4czp2rc0000gn/T/tmpp7_nl_5p/<string>",
  "item_line": null,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Interface to root finding algorithms for multivariate functions. See "
            },
            {
              "type": "inlineCode",
              "value": "method='krylov'"
            },
            {
              "type": "text",
              "value": " in particular."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "root",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "root"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.sparse.linalg._isolve.iterative:gmres",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "scipy.sparse.linalg.gmres"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.sparse.linalg._isolve.lgmres:lgmres",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "scipy.sparse.linalg.lgmres"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(F, xin, iter=None, rdiff=None, method='lgmres', inner_maxiter=20, inner_M=None, outer_k=10, verbose=False, maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None, tol_norm=None, line_search='armijo', callback=None, **kw)"
  },
  "type": "DocBlob"
}