{
  "aliases": [
    "scipy.optimize._nonlin.nonlin_solve"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This algorithm implements the inexact Newton method, with backtracking or full line searches. Several Jacobian approximations are available, including Krylov and Quasi-Newton methods."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function whose root to find; should take and return an array-like object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "F",
              "type": "Param",
              "type_": "function(x) -> f"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial guess for the solution"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "xin",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A Jacobian approximation: "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "Jacobian"
                    },
                    {
                      "type": "text",
                      "value": " object or something that "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.optimize._nonlin:asjacobian",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "asjacobian"
                    },
                    {
                      "type": "text",
                      "value": " can transform to one. Alternatively, a string specifying which of the builtin Jacobian approximations to use:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "krylov, broyden1, broyden2, anderson     diagbroyden, linearmixing, excitingmixing"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "param": "jacobian",
              "type": "Param",
              "type_": "Jacobian"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of iterations to make. If omitted (default), make as many as required to meet tolerances."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Print status to stdout on every iteration."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "verbose",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of iterations to make. If more are needed to meet convergence, "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "NoConvergence"
                    },
                    {
                      "type": "text",
                      "value": " is raised."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Absolute tolerance (in max-norm) for the residual. If omitted, default is 6e-6."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "f_tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative tolerance for the residual. If omitted, not used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "f_rtol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Absolute minimum step size, as determined from the Jacobian approximation. If the step size is smaller than this, optimization is terminated as successful. If omitted, not used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x_tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative minimum step size. If omitted, not used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x_rtol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Norm to use in convergence check. Default is the maximum norm."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "tol_norm",
              "type": "Param",
              "type_": "function(vector) -> scalar, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Which type of a line search to use to determine the step size in the direction given by the Jacobian approximation. Defaults to 'armijo'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "line_search",
              "type": "Param",
              "type_": "{None, 'armijo' (default), 'wolfe'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optional callback function. It is called on every iteration as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "callback(x, f)"
                    },
                    {
                      "type": "text",
                      "value": " where "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is the current solution and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.optimize._bglu_dense:_consider_refactor.<locals>.f",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "f"
                    },
                    {
                      "type": "text",
                      "value": " the corresponding residual."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "callback",
              "type": "Param",
              "type_": "function, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When a solution was not found."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "NoConvergence"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If true, returns a dictionary "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.io._mmio:MMFile.info",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "info"
                    },
                    {
                      "type": "text",
                      "value": " containing convergence information."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "full_output",
              "type": "Param",
              "type_": "bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "NoConvergence"
                    },
                    {
                      "type": "text",
                      "value": " exception is raise if no solution is found."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "raise_exception",
              "type": "Param",
              "type_": "bool"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An array (of similar array type as "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": ") containing the final solution."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sol",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find a root of a function, in a way suitable for large-scale problems."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_nonlin.py",
  "item_line": 116,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.optimize._nonlin:asjacobian",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "asjacobian"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "Jacobian",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "Jacobian"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(F, x0, jacobian='krylov', iter=None, verbose=False, maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None, tol_norm=None, line_search='armijo', callback=None, full_output=False, raise_exception=True)"
  },
  "type": "DocBlob"
}