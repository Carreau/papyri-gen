{
  "aliases": [
    "scipy.optimize._differentiable_functions.approx_derivative"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If a function maps from R^n to R^m, its derivatives form m-by-n matrix called the Jacobian, where an element (i, j) is a partial derivative of f[i] with respect to x[j]."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "rel_step",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "rel_step"
            },
            {
              "type": "text",
              "value": " is not provided, it assigned as "
            },
            {
              "type": "inlineCode",
              "value": "EPS**(1/s)"
            },
            {
              "type": "text",
              "value": ", where EPS is determined from the smallest floating point dtype of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x0",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x0"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "fun(x0)"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "np.finfo(x0.dtype).eps"
            },
            {
              "type": "text",
              "value": ", s=2 for '2-point' method and s=3 for '3-point' method. Such relative step approximately minimizes a sum of truncation and round-off errors, see . Relative steps are used by default. However, absolute steps are used when "
            },
            {
              "type": "inlineCode",
              "value": "abs_step is not None"
            },
            {
              "type": "text",
              "value": ". If any of the absolute or relative steps produces an indistinguishable difference from the original "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x0",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x0"
            },
            {
              "type": "text",
              "value": ", "
            },
            {
              "type": "inlineCode",
              "value": "(x0 + dx) - x0 == 0"
            },
            {
              "type": "text",
              "value": ", then a automatic step size is substituted for that particular entry."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "A finite difference scheme for '3-point' method is selected automatically. The well-known central difference scheme is used for points sufficiently far from the boundary, and 3-point forward or backward scheme is used for points near the boundary. Both schemes have the second-order accuracy in terms of Taylor expansion. Refer to  for the formulas of 3-point forward and backward difference schemes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For dense differencing when m=1 Jacobian is returned with a shape (n,), on the other hand when n=1 Jacobian is returned with a shape (m, 1). Our motivation is the following: a) It handles a case of gradient computation (m=1) in a conventional way. b) It clearly separates these two different cases. b) In all cases np.atleast_2d can be called to get 2-D Jacobian with correct dimensions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function of which to estimate the derivatives. The argument x passed to this function is ndarray of shape (n,) (never a scalar even if n=1). It must return 1-D array_like of shape (m,) or a scalar."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fun",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Point at which to estimate the derivatives. Float will be converted to a 1-D array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "array_like of shape (n,) or float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "dd": [
                                        {
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "difference."
                                            }
                                          ],
                                          "type": "paragraph"
                                        }
                                      ],
                                      "dt": {
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "'2-point' - use the first order accuracy forward or backward"
                                          }
                                        ],
                                        "type": "paragraph"
                                      },
                                      "type": "DefListItem"
                                    }
                                  ],
                                  "type": "DefList"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "dd": [
                                        {
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "second order accuracy forward or backward difference                   near the boundary."
                                            }
                                          ],
                                          "type": "paragraph"
                                        }
                                      ],
                                      "dt": {
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "'3-point' - use central difference in interior points and the"
                                          }
                                        ],
                                        "type": "paragraph"
                                      },
                                      "type": "DefListItem"
                                    }
                                  ],
                                  "type": "DefList"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "dd": [
                                        {
                                          "children": [
                                            {
                                              "type": "text",
                                              "value": "that the user function is real-valued and can be              analytically continued to the complex plane. Otherwise,              produces bogus results."
                                            }
                                          ],
                                          "type": "paragraph"
                                        }
                                      ],
                                      "dt": {
                                        "children": [
                                          {
                                            "type": "text",
                                            "value": "'cs' - use a complex-step finite difference scheme. This assumes"
                                          }
                                        ],
                                        "type": "paragraph"
                                      },
                                      "type": "DefListItem"
                                    }
                                  ],
                                  "type": "DefList"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            }
                          ],
                          "ordered": false,
                          "spread": false,
                          "start": 1,
                          "type": "list"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "Finite difference method to use:"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "method",
              "type": "Param",
              "type_": "{'3-point', '2-point', 'cs'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative step size to use. If None (default) the absolute step size is computed as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "h = rel_step * sign(x0) * max(1, abs(x0))"
                    },
                    {
                      "type": "text",
                      "value": ", with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "rel_step",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "rel_step"
                    },
                    {
                      "type": "text",
                      "value": " being selected automatically, see Notes. Otherwise "
                    },
                    {
                      "type": "inlineCode",
                      "value": "h = rel_step * sign(x0) * abs(x0)"
                    },
                    {
                      "type": "text",
                      "value": ". For "
                    },
                    {
                      "type": "inlineCode",
                      "value": "method='3-point'"
                    },
                    {
                      "type": "text",
                      "value": " the sign of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "h"
                    },
                    {
                      "type": "text",
                      "value": " is ignored. The calculated step size is possibly adjusted to fit into the bounds."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rel_step",
              "type": "Param",
              "type_": "None or array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Absolute step size to use, possibly adjusted to fit into the bounds. For "
                    },
                    {
                      "type": "inlineCode",
                      "value": "method='3-point'"
                    },
                    {
                      "type": "text",
                      "value": " the sign of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "abs_step",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "abs_step"
                    },
                    {
                      "type": "text",
                      "value": " is ignored. By default relative steps are used, only if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "abs_step is not None"
                    },
                    {
                      "type": "text",
                      "value": " are absolute steps used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "abs_step",
              "type": "Param",
              "type_": "array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If not None it is assumed to be equal to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun(x0)"
                    },
                    {
                      "type": "text",
                      "value": ", in this case the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun(x0)"
                    },
                    {
                      "type": "text",
                      "value": " is not called. Default is None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "f0",
              "type": "Param",
              "type_": "None or array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Lower and upper bounds on independent variables. Defaults to no bounds. Each bound must match the size of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": " or be a scalar, in the latter case the bound will be the same for all variables. Use it to limit the range of function evaluation. Bounds checking is not implemented when "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "as_linear_operator",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "as_linear_operator"
                    },
                    {
                      "type": "text",
                      "value": " is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "bounds",
              "type": "Param",
              "type_": "tuple of array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Defines a sparsity structure of the Jacobian matrix. If the Jacobian matrix is known to have only few non-zero elements in each row, then it's possible to estimate its several columns by a single function evaluation . To perform such economic computations two ingredients are required:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "param": "sparsity",
              "type": "Param",
              "type_": "{None, array_like, sparse matrix, 2-tuple}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When True the function returns an "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.sparse.linalg._interface",
                        "path": "scipy.sparse.linalg._interface:LinearOperator",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.sparse.linalg.LinearOperator"
                    },
                    {
                      "type": "text",
                      "value": ". Otherwise it returns a dense array or a sparse matrix depending on "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sparsity",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sparsity"
                    },
                    {
                      "type": "text",
                      "value": ". The linear operator provides an efficient way of computing "
                    },
                    {
                      "type": "inlineCode",
                      "value": "J.dot(p)"
                    },
                    {
                      "type": "text",
                      "value": " for any vector "
                    },
                    {
                      "type": "inlineCode",
                      "value": "p"
                    },
                    {
                      "type": "text",
                      "value": " of shape (n,), but does not allow direct access to individual elements of the matrix. By default "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "as_linear_operator",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "as_linear_operator"
                    },
                    {
                      "type": "text",
                      "value": " is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "as_linear_operator",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Additional arguments passed to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fun",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": ". Both empty by default. The calling signature is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun(x, *args, **kwargs)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args, kwargs",
              "type": "Param",
              "type_": "tuple and dict, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Finite difference approximation of the Jacobian matrix. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "as_linear_operator",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "as_linear_operator"
                    },
                    {
                      "type": "text",
                      "value": " is True returns a LinearOperator with shape (m, n). Otherwise it returns a dense array or sparse matrix depending on how "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sparsity",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sparsity"
                    },
                    {
                      "type": "text",
                      "value": " is defined. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sparsity",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sparsity"
                    },
                    {
                      "type": "text",
                      "value": " is None then a ndarray with shape (m, n) is returned. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sparsity",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sparsity"
                    },
                    {
                      "type": "text",
                      "value": " is not None returns a csr_matrix with shape (m, n). For sparse matrices and linear operators it is always returned as a 2-D structure, for ndarrays, if m=1 it is returned as a 1-D gradient array with shape (n,)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "J",
              "type": "Param",
              "type_": "{ndarray, sparse matrix, LinearOperator}"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute finite difference approximation of the derivatives of a vector-valued function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.optimize._numdiff import approx_derivative"
      },
      {
        "type": "code",
        "value": "def f(x, c1, c2):\n    return np.array([x[0] * np.sin(c1 * x[1]),\n                     x[0] * np.cos(c2 * x[1])])"
      },
      {
        "type": "code",
        "value": "x0 = np.array([1.0, 0.5 * np.pi])\napprox_derivative(f, x0, args=(1, 2))"
      },
      {
        "type": "text",
        "value": "Bounds can be used to limit the region of function evaluation.\nIn the example below we compute left and right derivative at point 1.0."
      },
      {
        "type": "code",
        "value": "def g(x):\n    return x**2 if x >= 1 else x"
      },
      {
        "type": "code",
        "value": "x0 = 1.0\napprox_derivative(g, x0, bounds=(-np.inf, 1.0))"
      },
      {
        "type": "code",
        "value": "approx_derivative(g, x0, bounds=(1.0, np.inf))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_numdiff.py",
  "item_line": 275,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Check correctness of a function computing derivatives."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.optimize._numdiff:check_derivative",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "check_derivative"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(fun, x0, method='3-point', rel_step=None, abs_step=None, f0=None, bounds=(-inf, inf), sparsity=None, as_linear_operator=False, args=(), kwargs={})"
  },
  "type": "DocBlob"
}