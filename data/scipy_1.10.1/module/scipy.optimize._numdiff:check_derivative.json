{
  "aliases": [
    "scipy.optimize._numdiff.check_derivative"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function of which to estimate the derivatives. The argument x passed to this function is ndarray of shape (n,) (never a scalar even if n=1). It must return 1-D array_like of shape (m,) or a scalar."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fun",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function which computes Jacobian matrix of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fun",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": ". It must work with argument x the same way as "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fun",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": ". The return value must be array_like or sparse matrix with an appropriate shape."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "jac",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Point at which to estimate the derivatives. Float will be converted to 1-D array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "array_like of shape (n,) or float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Lower and upper bounds on independent variables. Defaults to no bounds. Each bound must match the size of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": " or be a scalar, in the latter case the bound will be the same for all variables. Use it to limit the range of function evaluation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "bounds",
              "type": "Param",
              "type_": "2-tuple of array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Additional arguments passed to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fun",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "jac",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "jac"
                    },
                    {
                      "type": "text",
                      "value": ". Both empty by default. The calling signature is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fun(x, *args, **kwargs)"
                    },
                    {
                      "type": "text",
                      "value": " and the same for "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "jac",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "jac"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args, kwargs",
              "type": "Param",
              "type_": "tuple and dict, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The maximum among all relative errors for elements with absolute values higher than 1 and absolute errors for elements with absolute values less or equal than 1. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "accuracy",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "accuracy"
                    },
                    {
                      "type": "text",
                      "value": " is on the order of 1e-6 or lower, then it is likely that your "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "jac",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "jac"
                    },
                    {
                      "type": "text",
                      "value": " implementation is correct."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "accuracy",
              "type": "Param",
              "type_": "float"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Check correctness of a function computing derivatives (Jacobian or gradient) by comparison with a finite difference approximation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.optimize._numdiff import check_derivative"
      },
      {
        "type": "code",
        "value": "def f(x, c1, c2):\n    return np.array([x[0] * np.sin(c1 * x[1]),\n                     x[0] * np.cos(c2 * x[1])])"
      },
      {
        "type": "code",
        "value": "def jac(x, c1, c2):\n    return np.array([\n        [np.sin(c1 * x[1]),  c1 * x[0] * np.cos(c1 * x[1])],\n        [np.cos(c2 * x[1]), -c2 * x[0] * np.sin(c2 * x[1])]\n    ])"
      },
      {
        "type": "code",
        "value": "x0 = np.array([1.0, 0.5 * np.pi])\ncheck_derivative(f, jac, x0, args=(1, 2))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_numdiff.py",
  "item_line": 686,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute finite difference approximation of derivative."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.optimize._numdiff:approx_derivative",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "approx_derivative"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(fun, jac, x0, bounds=(-inf, inf), args=(), kwargs={})"
  },
  "type": "DocBlob"
}