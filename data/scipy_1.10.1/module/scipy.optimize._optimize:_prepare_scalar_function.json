{
  "aliases": [
    "scipy.optimize._lbfgsb_py._prepare_scalar_function"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The objective function to be minimized."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "fun(x, *args) -> float"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is an 1-D array with shape (n,) and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": " is a tuple of the fixed parameters needed to completely specify the function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fun",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial guess. Array of real elements of size (n,), where 'n' is the number of independent variables."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "ndarray, shape (n,)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Method for computing the gradient vector. If it is a callable, it should be a function that returns the gradient vector:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "jac(x, *args) -> array_like, shape (n,)"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If one of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "{'2-point', '3-point', 'cs'}"
                    },
                    {
                      "type": "text",
                      "value": " is selected then the gradient is calculated with a relative step for finite differences. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", then two-point finite differences with an absolute step is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "jac",
              "type": "Param",
              "type_": "{callable,  '2-point', '3-point', 'cs', None}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extra arguments passed to the objective function and its derivatives ("
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fun",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fun"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "jac",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "jac"
                    },
                    {
                      "type": "text",
                      "value": " functions)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Bounds on variables. 'new-style' bounds are required."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "bounds",
              "type": "Param",
              "type_": "sequence, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "jac is None"
                    },
                    {
                      "type": "text",
                      "value": " the absolute step size used for numerical approximation of the jacobian via forward differences."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "eps",
              "type": "Param",
              "type_": "float or ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "jac in ['2-point', '3-point', 'cs']"
                    },
                    {
                      "type": "text",
                      "value": " the relative step size to use for numerical approximation of the jacobian. The absolute step size is computed as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "h = rel_step * sign(x0) * max(1, abs(x0))"
                    },
                    {
                      "type": "text",
                      "value": ", possibly adjusted to fit into the bounds. For "
                    },
                    {
                      "type": "inlineCode",
                      "value": "method='3-point'"
                    },
                    {
                      "type": "text",
                      "value": " the sign of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "h"
                    },
                    {
                      "type": "text",
                      "value": " is ignored. If None (default) then step is selected automatically."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "finite_diff_rel_step",
              "type": "Param",
              "type_": "None or array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Computes the Hessian matrix. If it is callable, it should return the Hessian matrix:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "hess(x, *args) -> {LinearOperator, spmatrix, array}, (n, n)"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Alternatively, the keywords {'2-point', '3-point', 'cs'} select a finite difference scheme for numerical estimation. Whenever the gradient is estimated via finite-differences, the Hessian cannot be estimated with options {'2-point', '3-point', 'cs'} and needs to be estimated using one of the quasi-Newton strategies."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "hess",
              "type": "Param",
              "type_": "{callable,  '2-point', '3-point', 'cs', None}"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "sf",
              "type": "Param",
              "type_": "ScalarFunction"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Creates a ScalarFunction object for use with scalar minimizers (BFGS/LBFGSB/SLSQP/TNC/CG/etc)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_optimize.py",
  "item_line": 244,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(fun, x0, jac=None, args=(), bounds=None, epsilon=None, finite_diff_rel_step=None, hess=None)"
  },
  "type": "DocBlob"
}