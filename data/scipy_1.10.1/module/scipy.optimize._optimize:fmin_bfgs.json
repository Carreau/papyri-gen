{
  "aliases": [
    "scipy.optimize.fmin_bfgs"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Optimize the function, "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "f",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "f"
            },
            {
              "type": "text",
              "value": ", whose gradient is given by "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fprime",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fprime"
            },
            {
              "type": "text",
              "value": " using the quasi-Newton method of Broyden, Fletcher, Goldfarb, and Shanno (BFGS)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Objective function to be minimized."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "f",
              "type": "Param",
              "type_": "callable ``f(x,*args)``"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial guess."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Gradient of f."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fprime",
              "type": "Param",
              "type_": "callable ``f'(x,*args)``, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extra arguments passed to f and fprime."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Terminate successfully if gradient norm is less than "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "gtol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "gtol"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "gtol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Order of norm (Inf is max, -Inf is min)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "norm",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fprime",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fprime"
                    },
                    {
                      "type": "text",
                      "value": " is approximated, use this value for the step size."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "epsilon",
              "type": "Param",
              "type_": "int or ndarray, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An optional user-supplied function to call after each iteration. Called as "
                    },
                    {
                      "type": "inlineCode",
                      "value": "callback(xk)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xk"
                    },
                    {
                      "type": "text",
                      "value": " is the current parameter vector."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "callback",
              "type": "Param",
              "type_": "callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of iterations to perform."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, return "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fopt"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "func_calls"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "grad_calls"
                    },
                    {
                      "type": "text",
                      "value": ", and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "warnflag"
                    },
                    {
                      "type": "text",
                      "value": " in addition to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xopt"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "full_output",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Print convergence message if True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "disp",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Return a list of results at each iteration if True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "retall",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative tolerance for "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": ". Terminate successfully if step size is less than "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xk * xrtol"
                    },
                    {
                      "type": "text",
                      "value": " where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xk"
                    },
                    {
                      "type": "text",
                      "value": " is the current parameter vector."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "xrtol",
              "type": "Param",
              "type_": "float, default: 0"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Parameters which minimize f, i.e., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f(xopt) == fopt"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "xopt",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Minimum value."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fopt",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value of gradient at minimum, f'(xopt), which should be near 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "gopt",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value of 1/f''(xopt), i.e., the inverse Hessian matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Bopt",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of function_calls made."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "func_calls",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of gradient calls made."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "grad_calls",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [],
              "param": "warnflag",
              "type": "Param",
              "type_": "integer"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The value of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "xopt",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "xopt"
                    },
                    {
                      "type": "text",
                      "value": " at each iteration. Only returned if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "retall",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "retall"
                    },
                    {
                      "type": "text",
                      "value": " is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "allvecs",
              "type": "Param",
              "type_": "list"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Minimize a function using the BFGS algorithm."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.optimize import fmin_bfgs\ndef quadratic_cost(x, Q):\n    return x @ Q @ x"
      },
      {
        "type": "code",
        "value": "x0 = np.array([-3, -4])\ncost_weight =  np.diag([1., 10.])\n# Note that a trailing comma is necessary for a tuple with single element\nfmin_bfgs(quadratic_cost, x0, args=(cost_weight,))"
      },
      {
        "type": "code",
        "value": "def quadratic_cost_grad(x, Q):\n    return 2 * Q @ x"
      },
      {
        "type": "code",
        "value": "fmin_bfgs(quadratic_cost, x0, quadratic_cost_grad, args=(cost_weight,))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_optimize.py",
  "item_line": 1189,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes",
    "See Also",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Interface to minimization algorithms for multivariate functions. See "
            },
            {
              "type": "inlineCode",
              "value": "method='BFGS'"
            },
            {
              "type": "text",
              "value": " in particular."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.optimize._shgo:SHGO.minimize",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "minimize"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(f, x0, fprime=None, args=(), gtol=1e-05, norm=inf, epsilon=1.4901161193847656e-08, maxiter=None, full_output=0, disp=1, retall=0, callback=None, xrtol=0)"
  },
  "type": "DocBlob"
}