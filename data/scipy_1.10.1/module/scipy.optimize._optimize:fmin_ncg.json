{
  "aliases": [
    "scipy.optimize.fmin_ncg"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Only one of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fhess_p",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fhess_p"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fhess",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fhess"
            },
            {
              "type": "text",
              "value": " need to be given.  If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fhess",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fhess"
            },
            {
              "type": "text",
              "value": " is provided, then "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fhess_p",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fhess_p"
            },
            {
              "type": "text",
              "value": " will be ignored. If neither "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fhess",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fhess"
            },
            {
              "type": "text",
              "value": " nor "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fhess_p",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fhess_p"
            },
            {
              "type": "text",
              "value": " is provided, then the hessian product will be approximated using finite differences on "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fprime",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fprime"
            },
            {
              "type": "text",
              "value": ". "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fhess_p",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fhess_p"
            },
            {
              "type": "text",
              "value": " must compute the hessian times an arbitrary vector. If it is not given, finite-differences on "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fprime",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fprime"
            },
            {
              "type": "text",
              "value": " are used to compute it."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Newton-CG methods are also called truncated Newton methods. This function differs from scipy.optimize.fmin_tnc because"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "and scipy while scipy.optimize.fmin_tnc calls a C function."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "scipy.optimize.fmin_ncg is written purely in Python using NumPy"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "while scipy.optimize.fmin_tnc is for unconstrained minimization     or box constrained minimization. (Box constraints give     lower and upper bounds for each variable separately.)"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "scipy.optimize.fmin_ncg is only for unconstrained minimization"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": true,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Objective function to be minimized."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "f",
              "type": "Param",
              "type_": "callable ``f(x, *args)``"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial guess."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Gradient of f."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fprime",
              "type": "Param",
              "type_": "callable ``f'(x, *args)``"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function which computes the Hessian of f times an arbitrary vector, p."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fhess_p",
              "type": "Param",
              "type_": "callable ``fhess_p(x, p, *args)``, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function to compute the Hessian matrix of f."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fhess",
              "type": "Param",
              "type_": "callable ``fhess(x, *args)``, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extra arguments passed to f, fprime, fhess_p, and fhess (the same set of extra arguments is supplied to all of these functions)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If fhess is approximated, use this value for the step size."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "epsilon",
              "type": "Param",
              "type_": "float or ndarray, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An optional user-supplied function which is called after each iteration. Called as callback(xk), where xk is the current parameter vector."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "callback",
              "type": "Param",
              "type_": "callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Convergence is assumed when the average relative error in the minimizer falls below this amount."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "avextol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of iterations to perform."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, return the optional outputs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "full_output",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, print convergence message."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "disp",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, return a list of results at each iteration."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "retall",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Parameters which minimize f, i.e., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f(xopt) == fopt"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "xopt",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value of the function at xopt, i.e., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fopt = f(xopt)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fopt",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of function calls made."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fcalls",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of gradient calls made."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "gcalls",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of Hessian calls made."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "hcalls",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Warnings generated by the algorithm. 1 : Maximum number of iterations exceeded. 2 : Line search failure (precision loss). 3 : NaN result encountered."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "warnflag",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The result at each iteration, if retall is True (see below)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "allvecs",
              "type": "Param",
              "type_": "list"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Unconstrained minimization of a function using the Newton-CG method."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_optimize.py",
  "item_line": 1790,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Interface to minimization algorithms for multivariate functions. See the 'Newton-CG' "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "method"
            },
            {
              "type": "text",
              "value": " in particular."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.optimize._shgo:SHGO.minimize",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "minimize"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(f, x0, fprime, fhess_p=None, fhess=None, args=(), avextol=1e-05, epsilon=1.4901161193847656e-08, maxiter=None, full_output=0, disp=1, retall=0, callback=None)"
  },
  "type": "DocBlob"
}