{
  "aliases": [
    "scipy.optimize.golden"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Given a function of one variable and a possible bracketing interval, return the minimum of the function isolated to a fractional precision of tol."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Uses analog of bisection method to decrease the bracketed interval."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Objective function to minimize."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "func",
              "type": "Param",
              "type_": "callable func(x,*args)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Additional arguments (if present), passed to func."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Triple (a,b,c), where (a<b<c) and func(b) < func(a),func(c). If bracket consists of two numbers (a, c), then they are assumed to be a starting interval for a downhill bracket search (see "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "bracket"
                    },
                    {
                      "type": "text",
                      "value": "); it doesn't always mean that obtained solution will satisfy a<=x<=c."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "brack",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "x tolerance stop criterion"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, return optional outputs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "full_output",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of iterations to perform."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter",
              "type": "Param",
              "type_": "int"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return the minimum of a function of one variable using golden section method."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "We illustrate the behaviour of the function when `brack` is of\nsize 2 and 3, respectively. In the case where `brack` is of the\nform (xa,xb), we can see for the given values, the output need\nnot necessarily lie in the range ``(xa, xb)``."
      },
      {
        "type": "code",
        "value": "def f(x):\n    return x**2"
      },
      {
        "type": "code",
        "value": "from scipy import optimize"
      },
      {
        "type": "code",
        "value": "minimum = optimize.golden(f, brack=(1, 2))\nminimum"
      },
      {
        "type": "code",
        "value": "minimum = optimize.golden(f, brack=(-1, 0.5, 2))\nminimum"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_optimize.py",
  "item_line": 2628,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Interface to minimization algorithms for scalar univariate functions. See the 'Golden' "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "method"
            },
            {
              "type": "text",
              "value": " in particular."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "minimize_scalar",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "minimize_scalar"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(func, args=(), brack=None, tol=1.4901161193847656e-08, full_output=0, maxiter=5000)"
  },
  "type": "DocBlob"
}