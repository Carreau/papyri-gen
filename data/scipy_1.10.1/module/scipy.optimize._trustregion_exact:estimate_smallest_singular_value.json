{
  "aliases": [
    "scipy.optimize._trustregion_exact.estimate_smallest_singular_value"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The procedure is based on  and is done in two steps. First, it finds a vector "
            },
            {
              "type": "inlineCode",
              "value": "e"
            },
            {
              "type": "text",
              "value": " with components selected from {+1, -1} such that the solution "
            },
            {
              "type": "inlineCode",
              "value": "w"
            },
            {
              "type": "text",
              "value": " from the system "
            },
            {
              "type": "inlineCode",
              "value": "U.T w = e"
            },
            {
              "type": "text",
              "value": " is as large as possible. Next it estimate "
            },
            {
              "type": "inlineCode",
              "value": "U v = w"
            },
            {
              "type": "text",
              "value": ". The smallest singular value is close to "
            },
            {
              "type": "inlineCode",
              "value": "norm(w)/norm(v)"
            },
            {
              "type": "text",
              "value": " and the right singular vector is close to "
            },
            {
              "type": "inlineCode",
              "value": "v/norm(v)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The estimation will be better more ill-conditioned is the matrix."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Square upper triangular matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "U",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Estimated smallest singular value of the provided matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "s_min",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Estimatied right singular vector."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "z_min",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Given upper triangular matrix "
            },
            {
              "type": "inlineCode",
              "value": "U"
            },
            {
              "type": "text",
              "value": " estimate the smallest singular value and the correspondent right singular vector in O(n**2) operations."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_trustregion_exact.py",
  "item_line": 44,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(U)"
  },
  "type": "DocBlob"
}