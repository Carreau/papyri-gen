{
  "aliases": [
    "scipy.optimize.newton"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find a zero of the scalar-valued function "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "func",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "func"
            },
            {
              "type": "text",
              "value": " given a nearby scalar starting point "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x0",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x0"
            },
            {
              "type": "text",
              "value": ". The Newton-Raphson method is used if the derivative "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fprime",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fprime"
            },
            {
              "type": "text",
              "value": " of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "func",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "func"
            },
            {
              "type": "text",
              "value": " is provided, otherwise the secant method is used. If the second order derivative "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fprime2",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fprime2"
            },
            {
              "type": "text",
              "value": " of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "func",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "func"
            },
            {
              "type": "text",
              "value": " is also provided, then Halley's method is used."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x0",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x0"
            },
            {
              "type": "text",
              "value": " is a sequence with more than one item, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "newton"
            },
            {
              "type": "text",
              "value": " returns an array: the zeros of the function from each (scalar) starting point in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x0",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x0"
            },
            {
              "type": "text",
              "value": ". In this case, "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "func",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "func"
            },
            {
              "type": "text",
              "value": " must be vectorized to return a sequence or array of the same shape as its first argument. If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fprime",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fprime"
            },
            {
              "type": "text",
              "value": " ("
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "fprime2",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "fprime2"
            },
            {
              "type": "text",
              "value": ") is given, then its return must also have the same shape: each element is the first (second) derivative of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "func",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "func"
            },
            {
              "type": "text",
              "value": " with respect to its only variable evaluated at each element of its first argument."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "newton"
            },
            {
              "type": "text",
              "value": " is for finding roots of a scalar-valued functions of a single variable. For problems involving several variables, see "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "root",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "root"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The convergence rate of the Newton-Raphson method is quadratic, the Halley method is cubic, and the secant method is sub-quadratic. This means that if the function is well-behaved the actual error in the estimated zero after the nth iteration is approximately the square (cube for Halley) of the error after the (n-1)th step. However, the stopping criterion used here is the step size and there is no guarantee that a zero has been found. Consequently, the result should be verified. Safer algorithms are brentq, brenth, ridder, and bisect, but they all require that the root first be bracketed in an interval where the function changes sign. The brentq algorithm is recommended for general use in one dimensional problems when such an interval has been found."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "newton"
            },
            {
              "type": "text",
              "value": " is used with arrays, it is best suited for the following types of problems:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The initial guesses, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": ", are all relatively the same distance from   the roots."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Some or all of the extra arguments, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "args",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": ", are also arrays so that a   class of similar problems can be solved together."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The size of the initial guesses, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": ", is larger than O(100) elements.   Otherwise, a naive loop may perform as well or better than a vector."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The function whose zero is wanted. It must be a function of a single variable of the form "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f(x,a,b,c...)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a,b,c..."
                    },
                    {
                      "type": "text",
                      "value": " are extra arguments that can be passed in the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "args",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": " parameter."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "func",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An initial estimate of the zero that should be somewhere near the actual zero. If not scalar, then "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "func",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": " must be vectorized and return a sequence or array of the same shape as its first argument."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "float, sequence, or ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The derivative of the function when available and convenient. If it is None (default), then the secant method is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fprime",
              "type": "Param",
              "type_": "callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Extra arguments to be used in the function call."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The allowable error of the zero value. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "func",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": " is complex-valued, a larger "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "tol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "tol"
                    },
                    {
                      "type": "text",
                      "value": " is recommended as both the real and imaginary parts of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " contribute to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "|x - x0|"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of iterations."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The second order derivative of the function when available and convenient. If it is None (default), then the normal Newton-Raphson or the secant method is used. If it is not None, then Halley's method is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fprime2",
              "type": "Param",
              "type_": "callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Another estimate of the zero that should be somewhere near the actual zero. Used if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fprime",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fprime"
                    },
                    {
                      "type": "text",
                      "value": " is not provided."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x1",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Tolerance (relative) for termination."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rtol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "full_output",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "full_output"
                    },
                    {
                      "type": "text",
                      "value": " is False (default), the root is returned. If True and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": " is scalar, the return value is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(x, r)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is the root and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "r"
                    },
                    {
                      "type": "text",
                      "value": " is a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "RootResults"
                    },
                    {
                      "type": "text",
                      "value": " object. If True and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": " is non-scalar, the return value is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(x, converged,\nzero_der)"
                    },
                    {
                      "type": "text",
                      "value": " (see Returns section for details)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "full_output",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, raise a RuntimeError if the algorithm didn't converge, with the error message containing the number of iterations and current function value. Otherwise, the convergence status is recorded in a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "RootResults"
                    },
                    {
                      "type": "text",
                      "value": " return object. Ignored if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": " is not scalar. "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Note: this has little to do with displaying, however,\nthe `disp` keyword cannot be renamed for backwards compatibility."
                        }
                      ],
                      "type": "emphasis"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "disp",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Estimated location where function is zero."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "root",
              "type": "Param",
              "type_": "float, sequence, or ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Present if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "full_output=True"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": " is scalar. Object containing information about the convergence. In particular, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "r.converged"
                    },
                    {
                      "type": "text",
                      "value": " is True if the routine converged."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "r",
              "type": "Param",
              "type_": "`RootResults`, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Present if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "full_output=True"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": " is non-scalar. For vector functions, indicates which elements converged successfully."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "converged",
              "type": "Param",
              "type_": "ndarray of bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Present if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "full_output=True"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x0",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": " is non-scalar. For vector functions, indicates which elements had a zero derivative."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "zero_der",
              "type": "Param",
              "type_": "ndarray of bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find a zero of a real or complex function using the Newton-Raphson (or secant or Halley's) method."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import optimize"
      },
      {
        "type": "code",
        "value": "def f(x):\n    return (x**3 - 1)  # only one real root at x = 1"
      },
      {
        "type": "text",
        "value": "``fprime`` is not provided, use the secant method:"
      },
      {
        "type": "code",
        "value": "root = optimize.newton(f, 1.5)\nroot"
      },
      {
        "type": "code",
        "value": "root = optimize.newton(f, 1.5, fprime2=lambda x: 6 * x)\nroot"
      },
      {
        "type": "text",
        "value": "Only ``fprime`` is provided, use the Newton-Raphson method:"
      },
      {
        "type": "code",
        "value": "root = optimize.newton(f, 1.5, fprime=lambda x: 3 * x**2)\nroot"
      },
      {
        "type": "text",
        "value": "Both ``fprime2`` and ``fprime`` are provided, use Halley's method:"
      },
      {
        "type": "code",
        "value": "root = optimize.newton(f, 1.5, fprime=lambda x: 3 * x**2,\n                       fprime2=lambda x: 6 * x)\nroot"
      },
      {
        "type": "text",
        "value": "When we want to find zeros for a set of related starting values and/or\nfunction parameters, we can provide both of those as an array of inputs:"
      },
      {
        "type": "code",
        "value": "f = lambda x, a: x**3 - a\nfder = lambda x, a: 3 * x**2\nrng = np.random.default_rng()\nx = rng.standard_normal(100)\na = np.arange(-50, 50)\nvec_res = optimize.newton(f, x, fprime=fder, args=(a, ), maxiter=200)"
      },
      {
        "type": "text",
        "value": "The above is the equivalent of solving for each value in ``(x, a)``\nseparately in a for-loop, just faster:"
      },
      {
        "type": "code",
        "value": "loop_res = [optimize.newton(f, x0, fprime=fder, args=(a0,),\n                            maxiter=200)\n            for x0, a0 in zip(x, a)]\nnp.allclose(vec_res, loop_res)"
      },
      {
        "type": "text",
        "value": "Plot the results found for all values of ``a``:"
      },
      {
        "type": "code",
        "value": "analytical_result = np.sign(a) * np.abs(a)**(1/3)\nfig, ax = plt.subplots()\nax.plot(a, analytical_result, 'o')\nax.plot(a, vec_res, '.')\nax.set_xlabel('$a$')\nax.set_ylabel('$x$ where $f(x, a)=0$')\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.optimize._zeros_py:newton-0-7467a712.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_zeros_py.py",
  "item_line": 94,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "interface to root solvers for scalar functions"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "root_scalar",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "root_scalar"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "interface to root solvers for multi-input, multi-output functions"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "root",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "root"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(func, x0, fprime=None, args=(), tol=1.48e-08, maxiter=50, fprime2=None, x1=None, rtol=0.0, full_output=False, disp=True)"
  },
  "type": "DocBlob"
}