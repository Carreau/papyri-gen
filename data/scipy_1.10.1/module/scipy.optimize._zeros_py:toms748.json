{
  "aliases": [
    "scipy.optimize.toms748"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Implements the Algorithm 748 method of Alefeld, Potro and Shi to find a zero of the function "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "f",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "f"
            },
            {
              "type": "text",
              "value": " on the interval "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "[a , b]"
            },
            {
              "type": "text",
              "value": ", where "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "f(a)"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "f(b)"
            },
            {
              "type": "text",
              "value": " must have opposite signs."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It uses a mixture of inverse cubic interpolation and \"Newton-quadratic\" steps. [APS1995]."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "f",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "f"
            },
            {
              "type": "text",
              "value": " must be continuous. Algorithm 748 with "
            },
            {
              "type": "inlineCode",
              "value": "k=2"
            },
            {
              "type": "text",
              "value": " is asymptotically the most efficient algorithm known for finding roots of a four times continuously differentiable function. In contrast with Brent's algorithm, which may only decrease the length of the enclosing bracket on the last step, Algorithm 748 decreases it each iteration with the same asymptotic efficiency as it finds the root."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For easy statement of efficiency indices, assume that "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "f",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "f"
            },
            {
              "type": "text",
              "value": " has 4 continuouous deriviatives. For "
            },
            {
              "type": "inlineCode",
              "value": "k=1"
            },
            {
              "type": "text",
              "value": ", the convergence order is at least 2.7, and with about asymptotically 2 function evaluations per iteration, the efficiency index is approximately 1.65. For "
            },
            {
              "type": "inlineCode",
              "value": "k=2"
            },
            {
              "type": "text",
              "value": ", the order is about 4.6 with asymptotically 3 function evaluations per iteration, and the efficiency index 1.66. For higher values of "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "k",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "k"
            },
            {
              "type": "text",
              "value": ", the efficiency index approaches the kth root of "
            },
            {
              "type": "inlineCode",
              "value": "(3k-2)"
            },
            {
              "type": "text",
              "value": ", hence "
            },
            {
              "type": "inlineCode",
              "value": "k=1"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "k=2"
            },
            {
              "type": "text",
              "value": " are usually appropriate."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Python function returning a scalar. The function "
                    },
                    {
                      "type": "inlineMath",
                      "value": "f"
                    },
                    {
                      "type": "text",
                      "value": " must be continuous, and "
                    },
                    {
                      "type": "inlineMath",
                      "value": "f(a)"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineMath",
                      "value": "f(b)"
                    },
                    {
                      "type": "text",
                      "value": " have opposite signs."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "f",
              "type": "Param",
              "type_": "function"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "lower boundary of the search interval"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "scalar,"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "upper boundary of the search interval"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "b",
              "type": "Param",
              "type_": "scalar,"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "containing extra arguments for the function "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "f",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "f"
                    },
                    {
                      "type": "text",
                      "value": ". "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "f",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "f"
                    },
                    {
                      "type": "text",
                      "value": " is called by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "f(x, *args)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "args",
              "type": "Param",
              "type_": "tuple, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of Newton quadratic steps to perform each iteration. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "k>=1"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "k",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The computed root "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": " will satisfy "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.allclose(x, x0,\natol=xtol, rtol=rtol)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is the exact root. The parameter must be nonnegative."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "xtol",
              "type": "Param",
              "type_": "scalar, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The computed root "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x0"
                    },
                    {
                      "type": "text",
                      "value": " will satisfy "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.allclose(x, x0,\natol=xtol, rtol=rtol)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is the exact root."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rtol",
              "type": "Param",
              "type_": "scalar, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If convergence is not achieved in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "maxiter",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "maxiter"
                    },
                    {
                      "type": "text",
                      "value": " iterations, an error is raised. Must be >= 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "full_output",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "full_output"
                    },
                    {
                      "type": "text",
                      "value": " is False, the root is returned. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "full_output",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "full_output"
                    },
                    {
                      "type": "text",
                      "value": " is True, the return value is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(x, r)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " is the root, and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "r",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "r"
                    },
                    {
                      "type": "text",
                      "value": " is a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "RootResults"
                    },
                    {
                      "type": "text",
                      "value": " object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "full_output",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, raise RuntimeError if the algorithm didn't converge. Otherwise, the convergence status is recorded in the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "RootResults"
                    },
                    {
                      "type": "text",
                      "value": " return object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "disp",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Approximate Zero of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "f",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "f"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Object containing information about the convergence. In particular, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "r.converged"
                    },
                    {
                      "type": "text",
                      "value": " is True if the routine converged."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "r",
              "type": "Param",
              "type_": "`RootResults` (present if ``full_output = True``)"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find a zero using TOMS Algorithm 748 method."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "def f(x):\n    return (x**3 - 1)  # only one real root at x = 1"
      },
      {
        "type": "code",
        "value": "from scipy import optimize\nroot, results = optimize.toms748(f, 0, 2, full_output=True)\nroot"
      },
      {
        "type": "code",
        "value": "results"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/optimize/_zeros_py.py",
  "item_line": 1249,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "brentq",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "brentq"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "brenth",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "brenth"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "ridder",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "ridder"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "bisect",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "bisect"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "newton",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "newton"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "find zeroes in N dimensions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.optimize._minpack_py:fsolve",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "fsolve"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(f, a, b, args=(), k=1, xtol=2e-12, rtol=8.881784197001252e-16, maxiter=100, full_output=False, disp=True)"
  },
  "type": "DocBlob"
}