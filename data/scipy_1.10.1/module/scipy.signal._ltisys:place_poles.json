{
  "aliases": [
    "scipy.signal.place_poles"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "K is the gain matrix such as the plant described by the linear system "
            },
            {
              "type": "inlineCode",
              "value": "AX+BU"
            },
            {
              "type": "text",
              "value": " will have its closed-loop poles, i.e the eigenvalues "
            },
            {
              "type": "inlineCode",
              "value": "A - B*K"
            },
            {
              "type": "text",
              "value": ", as close as possible to those asked for in poles."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "SISO, MISO and MIMO systems are supported."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The Tits and Yang (YT),  paper is an update of the original Kautsky et al. (KNV) paper .  KNV relies on rank-1 updates to find the transfer matrix X such that "
            },
            {
              "type": "inlineCode",
              "value": "X * diag(poles) = (A - B*K)*X"
            },
            {
              "type": "text",
              "value": ", whereas YT uses rank-2 updates. This yields on average more robust solutions (see  pp 21-22), furthermore the YT algorithm supports complex poles whereas KNV does not in its original version.  Only update method 0 proposed by KNV has been implemented here, hence the name "
            },
            {
              "type": "inlineCode",
              "value": "'KNV0'"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "KNV extended to complex poles is used in Matlab's "
            },
            {
              "type": "inlineCode",
              "value": "place"
            },
            {
              "type": "text",
              "value": " function, YT is distributed under a non-free licence by Slicot under the name "
            },
            {
              "type": "inlineCode",
              "value": "robpole"
            },
            {
              "type": "text",
              "value": ". It is unclear and undocumented how KNV0 has been extended to complex poles (Tits and Yang claim on page 14 of their paper that their method can not be used to extend KNV to complex poles), therefore only YT supports them in this implementation."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "As the solution to the problem of pole placement is not unique for MIMO systems, both methods start with a tentative transfer matrix which is altered in various way to increase its determinant.  Both methods have been proven to converge to a stable solution, however depending on the way the initial transfer matrix is chosen they will converge to different solutions and therefore there is absolutely no guarantee that using "
            },
            {
              "type": "inlineCode",
              "value": "'KNV0'"
            },
            {
              "type": "text",
              "value": " will yield results similar to Matlab's or any other implementation of these algorithms."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Using the default method "
            },
            {
              "type": "inlineCode",
              "value": "'YT'"
            },
            {
              "type": "text",
              "value": " should be fine in most cases; "
            },
            {
              "type": "inlineCode",
              "value": "'KNV0'"
            },
            {
              "type": "text",
              "value": " is only provided because it is needed by "
            },
            {
              "type": "inlineCode",
              "value": "'YT'"
            },
            {
              "type": "text",
              "value": " in some specific cases. Furthermore "
            },
            {
              "type": "inlineCode",
              "value": "'YT'"
            },
            {
              "type": "text",
              "value": " gives on average more robust results than "
            },
            {
              "type": "inlineCode",
              "value": "'KNV0'"
            },
            {
              "type": "text",
              "value": " when "
            },
            {
              "type": "inlineCode",
              "value": "abs(det(X))"
            },
            {
              "type": "text",
              "value": " is used as a robustness indicator."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": " is available as a technical report on the following URL: https://hdl.handle.net/1903/5598"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "State-space representation of linear system "
                    },
                    {
                      "type": "inlineCode",
                      "value": "AX + BU"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "A, B",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Desired real poles and/or complex conjugates poles. Complex poles are only supported with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "method=\"YT\""
                    },
                    {
                      "type": "text",
                      "value": " (default)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "poles",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Which method to choose to find the gain matrix K. One of:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'YT': Yang Tits"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'KNV0': Kautsky, Nichols, Van Dooren update method 0"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "See References and Notes for details on the algorithms."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "method: {'YT', 'KNV0'}, optional",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "After each iteration the determinant of the eigenvectors of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "A - B*K"
                    },
                    {
                      "type": "text",
                      "value": " is compared to its previous value, when the relative error between these two values becomes lower than "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "rtol"
                    },
                    {
                      "type": "text",
                      "value": " the algorithm stops.  Default is 1e-3."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rtol: float, optional",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of iterations to compute the gain matrix. Default is 30."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter: int, optional",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "gain_matrix"
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "gain_matrix"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            },
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "computed_poles"
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "computed_poles"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            },
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "requested_poles"
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "requested_poles"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            },
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "X"
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "X"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            },
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "rtol"
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "rtol"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            },
                            {
                              "dd": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "nb_iter"
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "dt": {
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "nb_iter"
                                  }
                                ],
                                "type": "paragraph"
                              },
                              "type": "DefListItem"
                            }
                          ],
                          "type": "DefList"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "full_state_feedback is composed of:"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "full_state_feedback",
              "type": "Param",
              "type_": "Bunch object"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute K such that eigenvalues (A - dot(B, K))=poles."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "A simple example demonstrating real pole placement using both KNV and YT\nalgorithms.  This is example number 1 from section 4 of the reference KNV\npublication ([1]_):"
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy import signal\nimport matplotlib.pyplot as plt"
      },
      {
        "type": "code",
        "value": "A = np.array([[ 1.380,  -0.2077,  6.715, -5.676  ],\n              [-0.5814, -4.290,   0,      0.6750 ],\n              [ 1.067,   4.273,  -6.654,  5.893  ],\n              [ 0.0480,  4.273,   1.343, -2.104  ]])\nB = np.array([[ 0,      5.679 ],\n              [ 1.136,  1.136 ],\n              [ 0,      0,    ],\n              [-3.146,  0     ]])\nP = np.array([-0.2, -0.5, -5.0566, -8.6659])"
      },
      {
        "type": "text",
        "value": "Now compute K with KNV method 0, with the default YT method and with the YT\nmethod while forcing 100 iterations of the algorithm and print some results\nafter each call."
      },
      {
        "type": "code",
        "value": "fsf1 = signal.place_poles(A, B, P, method='KNV0')\nfsf1.gain_matrix"
      },
      {
        "type": "code",
        "value": "fsf2 = signal.place_poles(A, B, P)  # uses YT method\nfsf2.computed_poles"
      },
      {
        "type": "code",
        "value": "fsf3 = signal.place_poles(A, B, P, rtol=-1, maxiter=100)\nfsf3.X"
      },
      {
        "type": "text",
        "value": "The absolute value of the determinant of X is a good indicator to check the\nrobustness of the results, both ``'KNV0'`` and ``'YT'`` aim at maximizing\nit.  Below a comparison of the robustness of the results above:"
      },
      {
        "type": "code",
        "value": "abs(np.linalg.det(fsf1.X)) < abs(np.linalg.det(fsf2.X))"
      },
      {
        "type": "code",
        "value": "abs(np.linalg.det(fsf2.X)) < abs(np.linalg.det(fsf3.X))"
      },
      {
        "type": "text",
        "value": "Now a simple example for complex poles:"
      },
      {
        "type": "code",
        "value": "A = np.array([[ 0,  7/3.,  0,   0   ],\n              [ 0,   0,    0,  7/9. ],\n              [ 0,   0,    0,   0   ],\n              [ 0,   0,    0,   0   ]])\nB = np.array([[ 0,  0 ],\n              [ 0,  0 ],\n              [ 1,  0 ],\n              [ 0,  1 ]])\nP = np.array([-3, -1, -2-1j, -2+1j]) / 3.\nfsf = signal.place_poles(A, B, P, method='YT')"
      },
      {
        "type": "text",
        "value": "We can plot the desired and computed poles in the complex plane:"
      },
      {
        "type": "code",
        "value": "t = np.linspace(0, 2*np.pi, 401)\nplt.plot(np.cos(t), np.sin(t), 'k--')  # unit circle\nplt.plot(fsf.requested_poles.real, fsf.requested_poles.imag,\n         'wo', label='Desired')\nplt.plot(fsf.computed_poles.real, fsf.computed_poles.imag, 'bx',\n         label='Placed')\nplt.grid()\nplt.axis('image')\nplt.axis([-1.1, 1.1, -1.1, 1.1])\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, numpoints=1)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/signal/_ltisys.py",
  "item_line": 3058,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(A, B, poles, method='YT', rtol=0.001, maxiter=30)"
  },
  "type": "DocBlob"
}