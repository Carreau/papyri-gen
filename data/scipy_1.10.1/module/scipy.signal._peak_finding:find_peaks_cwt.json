{
  "aliases": [
    "scipy.signal.find_peaks_cwt"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The general approach is to smooth "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "vector",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "vector"
            },
            {
              "type": "text",
              "value": " by convolving it with "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "wavelet(width)"
            },
            {
              "type": "text",
              "value": " for each width in "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "widths",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "widths"
            },
            {
              "type": "text",
              "value": ". Relative maxima which appear at enough length scales, and with sufficiently high SNR, are accepted."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This approach was designed for finding sharp peaks among noisy data, however with proper parameter selection it should function well for different peak shapes."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "dd": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Perform a continuous wavelet transform on "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "vector",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "vector"
                            },
                            {
                              "type": "text",
                              "value": ", for the supplied     "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "widths",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "widths"
                            },
                            {
                              "type": "text",
                              "value": ". This is a convolution of "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "vector",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "vector"
                            },
                            {
                              "type": "text",
                              "value": " with "
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "wavelet(width)"
                            },
                            {
                              "type": "text",
                              "value": " for     each width in "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "widths",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "widths"
                            },
                            {
                              "type": "text",
                              "value": ". See "
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "cwt"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Identify \"ridge lines\" in the cwt matrix. These are relative maxima     at each row, connected across adjacent rows. See identify_ridge_lines"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Filter the ridge_lines using filter_ridge_lines."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": true,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "dt": {
                "children": [
                  {
                    "type": "text",
                    "value": "The algorithm is as follows:"
                  }
                ],
                "type": "paragraph"
              },
              "type": "DefListItem"
            }
          ],
          "type": "DefList"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.11.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "1-D array in which to find the peaks."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "vector",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Single width or 1-D array-like of widths to use for calculating the CWT matrix. In general, this range should cover the expected width of peaks of interest."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "widths",
              "type": "Param",
              "type_": "float or sequence"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Should take two parameters and return a 1-D array to convolve with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "vector",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "vector"
                    },
                    {
                      "type": "text",
                      "value": ". The first parameter determines the number of points of the returned wavelet array, the second parameter is the scale ("
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "width"
                    },
                    {
                      "type": "text",
                      "value": ") of the wavelet. Should be normalized and symmetric. Default is the ricker wavelet."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "wavelet",
              "type": "Param",
              "type_": "callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "At each row, a ridge line is only connected if the relative max at row[n] is within "
                    },
                    {
                      "type": "inlineCode",
                      "value": "max_distances[n]"
                    },
                    {
                      "type": "text",
                      "value": " from the relative max at "
                    },
                    {
                      "type": "inlineCode",
                      "value": "row[n+1]"
                    },
                    {
                      "type": "text",
                      "value": ".  Default value is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "widths/4"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "max_distances",
              "type": "Param",
              "type_": "ndarray, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If a relative maximum is not found within "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "max_distances",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "max_distances"
                    },
                    {
                      "type": "text",
                      "value": ", there will be a gap. A ridge line is discontinued if there are more than "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "gap_thresh",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "gap_thresh"
                    },
                    {
                      "type": "text",
                      "value": " points without connecting a new relative maximum. Default is the first value of the widths array i.e. widths[0]."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "gap_thresh",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Minimum length a ridge line needs to be acceptable. Default is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "cwt.shape[0] / 4"
                    },
                    {
                      "type": "text",
                      "value": ", ie 1/4-th the number of widths."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "min_length",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Minimum SNR ratio. Default 1. The signal is the maximum CWT coefficient on the largest ridge line. The noise is "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "noise_perc",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "noise_perc"
                    },
                    {
                      "type": "text",
                      "value": " th percentile of datapoints contained within the same ridge line."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "min_snr",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When calculating the noise floor, percentile of data points examined below which to consider noise. Calculated using "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "stats.scoreatpercentile"
                    },
                    {
                      "type": "text",
                      "value": ".  Default is 10."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "noise_perc",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Size of window to use to calculate noise floor. Default is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "cwt.shape[1] / 20"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "window_size",
              "type": "Param",
              "type_": "int, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Indices of the locations in the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "vector",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "vector"
                    },
                    {
                      "type": "text",
                      "value": " where peaks were found. The list is sorted."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "peaks_indices",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find peaks in a 1-D array with wavelet transformation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy import signal\nxs = np.arange(0, np.pi, 0.05)\ndata = np.sin(xs)\npeakind = signal.find_peaks_cwt(data, np.arange(1,10))\npeakind, xs[peakind], data[peakind]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/signal/_peak_finding.py",
  "item_line": 1200,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Continuous wavelet transform."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "cwt",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "cwt"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find peaks inside a signal based on peak properties."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "find_peaks",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "find_peaks"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(vector, widths, wavelet=None, max_distances=None, gap_thresh=None, min_length=None, min_snr=1, noise_perc=10, window_size=None)"
  },
  "type": "DocBlob"
}