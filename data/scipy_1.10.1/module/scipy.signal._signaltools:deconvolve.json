{
  "aliases": [
    "scipy.signal.deconvolve"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Returns the quotient and remainder such that "
            },
            {
              "type": "inlineCode",
              "value": "signal = convolve(divisor, quotient) + remainder"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Signal data, typically a recorded signal"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "signal",
              "type": "Param",
              "type_": "(N,) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Divisor data, typically an impulse response or filter that was applied to the original signal"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "divisor",
              "type": "Param",
              "type_": "(N,) array_like"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Quotient, typically the recovered original signal"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "quotient",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Remainder"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "remainder",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Deconvolves "
            },
            {
              "type": "inlineCode",
              "value": "divisor"
            },
            {
              "type": "text",
              "value": " out of "
            },
            {
              "type": "inlineCode",
              "value": "signal"
            },
            {
              "type": "text",
              "value": " using inverse filtering."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Deconvolve a signal that's been filtered:"
      },
      {
        "type": "code",
        "value": "from scipy import signal\noriginal = [0, 1, 0, 0, 1, 1, 0, 0]\nimpulse_response = [2, 1]\nrecorded = signal.convolve(impulse_response, original)\nrecorded"
      },
      {
        "type": "code",
        "value": "recovered, remainder = signal.deconvolve(recorded, impulse_response)\nrecovered"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/signal/_signaltools.py",
  "item_line": 2209,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "performs polynomial division (same operation, but also accepts poly1d objects)"
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "numpy.polydiv",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "numpy.polydiv"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(signal, divisor)"
  },
  "type": "DocBlob"
}