{
  "aliases": [
    "scipy.signal.filtfilt"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function applies a linear digital filter twice, once forward and once backwards.  The combined filter has zero phase and a filter order twice that of the original."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The function provides options for handling the edges of the signal."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The function "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "scipy",
                "path": "scipy.signal._signaltools:sosfiltfilt",
                "type": "RefInfo",
                "version": "1.10.1"
              },
              "type": "Link",
              "value": "sosfiltfilt"
            },
            {
              "type": "text",
              "value": " (and filter design using "
            },
            {
              "type": "inlineCode",
              "value": "output='sos'"
            },
            {
              "type": "text",
              "value": ") should be preferred over "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "filtfilt"
            },
            {
              "type": "text",
              "value": " for most filtering tasks, as second-order sections have fewer numerical problems."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "method",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "method"
            },
            {
              "type": "text",
              "value": " is \"pad\", the function pads the data along the given axis in one of three ways: odd, even or constant.  The odd and even extensions have the corresponding symmetry about the end point of the data.  The constant extension extends the data with the values at the end points. On both the forward and backward passes, the initial condition of the filter is found by using "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "module",
                "module": "scipy",
                "path": "scipy.signal._signaltools:lfilter_zi",
                "type": "RefInfo",
                "version": "1.10.1"
              },
              "type": "Link",
              "value": "lfilter_zi"
            },
            {
              "type": "text",
              "value": " and scaling it by the end point of the extended data."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "method",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "method"
            },
            {
              "type": "text",
              "value": " is \"gust\", Gustafsson's method  is used.  Initial conditions are chosen for the forward and backward passes so that the forward-backward filter gives the same result as the backward-forward filter."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The option to use Gustaffson's method was added in scipy version 0.16.0."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The numerator coefficient vector of the filter."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "b",
              "type": "Param",
              "type_": "(N,) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The denominator coefficient vector of the filter.  If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a[0]"
                    },
                    {
                      "type": "text",
                      "value": " is not 1, then both "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "a",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "a"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "b",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "b"
                    },
                    {
                      "type": "text",
                      "value": " are normalized by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "a[0]"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "(N,) array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The array of data to be filtered."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The axis of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " to which the filter is applied. Default is -1."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "axis",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Must be 'odd', 'even', 'constant', or None.  This determines the type of extension to use for the padded signal to which the filter is applied.  If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "padtype",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "padtype"
                    },
                    {
                      "type": "text",
                      "value": " is None, no padding is used.  The default is 'odd'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "padtype",
              "type": "Param",
              "type_": "str or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The number of elements by which to extend "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " at both ends of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "axis",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "axis"
                    },
                    {
                      "type": "text",
                      "value": " before applying the filter.  This value must be less than "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x.shape[axis] - 1"
                    },
                    {
                      "type": "text",
                      "value": ".  "
                    },
                    {
                      "type": "inlineCode",
                      "value": "padlen=0"
                    },
                    {
                      "type": "text",
                      "value": " implies no padding. The default value is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "3 * max(len(a), len(b))"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "padlen",
              "type": "Param",
              "type_": "int or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Determines the method for handling the edges of the signal, either \"pad\" or \"gust\".  When "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "method",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "method"
                    },
                    {
                      "type": "text",
                      "value": " is \"pad\", the signal is padded; the type of padding is determined by "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "padtype",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "padtype"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "padlen",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "padlen"
                    },
                    {
                      "type": "text",
                      "value": ", and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "irlen",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "irlen"
                    },
                    {
                      "type": "text",
                      "value": " is ignored.  When "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "method",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "method"
                    },
                    {
                      "type": "text",
                      "value": " is \"gust\", Gustafsson's method is used, and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "padtype",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "padtype"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "padlen",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "padlen"
                    },
                    {
                      "type": "text",
                      "value": " are ignored."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "method",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "method",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "method"
                    },
                    {
                      "type": "text",
                      "value": " is \"gust\", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "irlen",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "irlen"
                    },
                    {
                      "type": "text",
                      "value": " specifies the length of the impulse response of the filter.  If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "irlen",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "irlen"
                    },
                    {
                      "type": "text",
                      "value": " is None, no part of the impulse response is ignored.  For a long signal, specifying "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "irlen",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "irlen"
                    },
                    {
                      "type": "text",
                      "value": " can significantly improve the performance of the filter."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "irlen",
              "type": "Param",
              "type_": "int or None, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The filtered output with the same shape as "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Apply a digital filter forward and backward to a signal."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "The examples will use several functions from `scipy.signal`."
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy import signal\nimport matplotlib.pyplot as plt"
      },
      {
        "type": "text",
        "value": "First we create a one second signal that is the sum of two pure sine\nwaves, with frequencies 5 Hz and 250 Hz, sampled at 2000 Hz."
      },
      {
        "type": "code",
        "value": "t = np.linspace(0, 1.0, 2001)\nxlow = np.sin(2 * np.pi * 5 * t)\nxhigh = np.sin(2 * np.pi * 250 * t)\nx = xlow + xhigh"
      },
      {
        "type": "text",
        "value": "Now create a lowpass Butterworth filter with a cutoff of 0.125 times\nthe Nyquist frequency, or 125 Hz, and apply it to ``x`` with `filtfilt`.\nThe result should be approximately ``xlow``, with no phase shift."
      },
      {
        "type": "code",
        "value": "b, a = signal.butter(8, 0.125)\ny = signal.filtfilt(b, a, x, padlen=150)\nnp.abs(y - xlow).max()"
      },
      {
        "type": "text",
        "value": "We get a fairly clean result for this artificial example because\nthe odd extension is exact, and with the moderately long padding,\nthe filter's transients have dissipated by the time the actual data\nis reached.  In general, transient effects at the edges are\nunavoidable."
      },
      {
        "type": "text",
        "value": "The following example demonstrates the option ``method=\"gust\"``."
      },
      {
        "type": "text",
        "value": "First, create a filter."
      },
      {
        "type": "code",
        "value": "b, a = signal.ellip(4, 0.01, 120, 0.125)  # Filter to be applied."
      },
      {
        "type": "text",
        "value": "`sig` is a random input signal to be filtered."
      },
      {
        "type": "code",
        "value": "rng = np.random.default_rng()\nn = 60\nsig = rng.standard_normal(n)**3 + 3*rng.standard_normal(n).cumsum()"
      },
      {
        "type": "text",
        "value": "Apply `filtfilt` to `sig`, once using the Gustafsson method, and\nonce using padding, and plot the results for comparison."
      },
      {
        "type": "code",
        "value": "fgust = signal.filtfilt(b, a, sig, method=\"gust\")\nfpad = signal.filtfilt(b, a, sig, padlen=50)\nplt.plot(sig, 'k-', label='input')\nplt.plot(fgust, 'b-', linewidth=4, label='gust')\nplt.plot(fpad, 'c-', linewidth=1.5, label='pad')\nplt.legend(loc='best')\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.signal._signaltools:filtfilt-0-4be2a3e1.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      },
      {
        "type": "text",
        "value": "The `irlen` argument can be used to improve the performance\nof Gustafsson's method."
      },
      {
        "type": "text",
        "value": "Estimate the impulse response length of the filter."
      },
      {
        "type": "code",
        "value": "z, p, k = signal.tf2zpk(b, a)\neps = 1e-9\nr = np.max(np.abs(p))\napprox_impulse_len = int(np.ceil(np.log(eps) / np.log(r)))\napprox_impulse_len"
      },
      {
        "type": "text",
        "value": "Apply the filter to a longer signal, with and without the `irlen`\nargument.  The difference between `y1` and `y2` is small.  For long\nsignals, using `irlen` gives a significant performance improvement."
      },
      {
        "type": "code",
        "value": ">>> x = rng.standard_normal(5000)\n>>> y1 = signal.filtfilt(b, a, x, method='gust')\n>>> y2 = signal.filtfilt(b, a, x, method='gust', irlen=approx_impulse_len)\n>>> print(np.max(np.abs(y1 - y2)))"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/signal/_signaltools.py",
  "item_line": 3960,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.signal._signaltools:sosfiltfilt",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "sosfiltfilt"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.signal._signaltools:lfilter_zi",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "lfilter_zi"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "lfilter",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "lfilter"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.signal._signaltools:lfiltic",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "lfiltic"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.signal._savitzky_golay:savgol_filter",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "savgol_filter"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "sosfilt",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "sosfilt"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(b, a, x, axis=-1, padtype='odd', padlen=None, method='pad', irlen=None)"
  },
  "type": "DocBlob"
}