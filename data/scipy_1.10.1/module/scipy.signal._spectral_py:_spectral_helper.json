{
  "aliases": [
    "scipy.signal._spectral_py._spectral_helper"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is a helper function that implements the commonality between the stft, psd, csd, and spectrogram functions. It is not designed to be called externally. The windows are not averaged over; the result from each window is returned."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Adapted from matplotlib.mlab"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.16.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array or sequence containing the data to be analyzed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array or sequence containing the data to be analyzed. If this is the same object in memory as "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " (i.e. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_spectral_helper(x,\nx, ...)"
                    },
                    {
                      "type": "text",
                      "value": "), the extra computations are spared."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "y",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Sampling frequency of the time series. Defaults to 1.0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fs",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Desired window to use. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "window",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "window"
                    },
                    {
                      "type": "text",
                      "value": " is a string or tuple, it is passed to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.signal.windows._windows:get_window",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "get_window"
                    },
                    {
                      "type": "text",
                      "value": " to generate the window values, which are DFT-even by default. See "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.signal.windows._windows:get_window",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "get_window"
                    },
                    {
                      "type": "text",
                      "value": " for a list of windows and required parameters. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "window",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "window"
                    },
                    {
                      "type": "text",
                      "value": " is array_like it will be used directly as the window and its length must be nperseg. Defaults to a Hann window."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "window",
              "type": "Param",
              "type_": "str or tuple or array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Length of each segment. Defaults to None, but if window is str or tuple, is set to 256, and if window is array_like, is set to the length of the window."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nperseg",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of points to overlap between segments. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "noverlap = nperseg // 2"
                    },
                    {
                      "type": "text",
                      "value": ". Defaults to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "noverlap",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Length of the FFT used, if a zero padded FFT is desired. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", the FFT length is "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "nperseg",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "nperseg"
                    },
                    {
                      "type": "text",
                      "value": ". Defaults to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nfft",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specifies how to detrend each segment. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "detrend",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "detrend"
                    },
                    {
                      "type": "text",
                      "value": " is a string, it is passed as the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "type"
                    },
                    {
                      "type": "text",
                      "value": " argument to the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "detrend",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "detrend"
                    },
                    {
                      "type": "text",
                      "value": " function. If it is a function, it takes a segment and returns a detrended segment. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "detrend",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "detrend"
                    },
                    {
                      "type": "text",
                      "value": " is "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": ", no detrending is done. Defaults to 'constant'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "detrend",
              "type": "Param",
              "type_": "str or function or `False`, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": ", return a one-sided spectrum for real data. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": " return a two-sided spectrum. Defaults to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": ", but for complex data, a two-sided spectrum is always returned."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "return_onesided",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Selects between computing the cross spectral density ('density') where "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "Pxy"
                    },
                    {
                      "type": "text",
                      "value": " has units of V**2/Hz and computing the cross spectrum ('spectrum') where "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "Pxy"
                    },
                    {
                      "type": "text",
                      "value": " has units of V**2, if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "y",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "y"
                    },
                    {
                      "type": "text",
                      "value": " are measured in V and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fs",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fs"
                    },
                    {
                      "type": "text",
                      "value": " is measured in Hz. Defaults to 'density'"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "scaling",
              "type": "Param",
              "type_": "{ 'density', 'spectrum' }, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Axis along which the FFTs are computed; the default is over the last axis (i.e. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "axis=-1"
                    },
                    {
                      "type": "text",
                      "value": ")."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "axis",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Defines what kind of return values are expected. Defaults to 'psd'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mode: str {'psd', 'stft'}, optional",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specifies whether the input signal is extended at both ends, and how to generate the new values, in order to center the first windowed segment on the first input point. This has the benefit of enabling reconstruction of the first input point when the employed window function starts at zero. Valid options are "
                    },
                    {
                      "type": "inlineCode",
                      "value": "['even', 'odd', 'constant', 'zeros', None]"
                    },
                    {
                      "type": "text",
                      "value": ". Defaults to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "boundary",
              "type": "Param",
              "type_": "str or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Specifies whether the input signal is zero-padded at the end to make the signal fit exactly into an integer number of window segments, so that all of the signal is included in the output. Defaults to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": ". Padding occurs after boundary extension, if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "boundary",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "boundary"
                    },
                    {
                      "type": "text",
                      "value": " is not "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": ", and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "padded",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "padded"
                    },
                    {
                      "type": "text",
                      "value": " is "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "padded",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array of sample frequencies."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "freqs",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array of times corresponding to each data segment"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "t",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array of output data, contents dependent on "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "mode"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " kwarg."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "result",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Calculate various forms of windowed FFTs for PSD, CSD, etc."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/signal/_spectral_py.py",
  "item_line": 1631,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(x, y, fs=1.0, window='hann', nperseg=None, noverlap=None, nfft=None, detrend='constant', return_onesided=True, scaling='density', axis=-1, mode='psd', boundary=None, padded=False)"
  },
  "type": "DocBlob"
}