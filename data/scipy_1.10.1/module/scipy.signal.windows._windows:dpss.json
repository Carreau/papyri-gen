{
  "aliases": [
    "scipy.signal.windows.dpss"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "DPSS (or Slepian sequences) are often used in multitaper power spectral density estimation (see ). The first window in the sequence can be used to maximize the energy concentration in the main lobe, and is also called the Slepian window."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This computation uses the tridiagonal eigenvector formulation given in ."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The default normalization for "
            },
            {
              "type": "inlineCode",
              "value": "Kmax=None"
            },
            {
              "type": "text",
              "value": ", i.e. window-generation mode, simply using the l-infinity norm would create a window with two unity values, which creates slight normalization differences between even and odd orders. The approximate correction of "
            },
            {
              "type": "inlineCode",
              "value": "M**2/float(M**2+NW)"
            },
            {
              "type": "text",
              "value": " for even sample numbers is used to counteract this effect (see Examples below)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For very long signals (e.g., 1e6 elements), it can be useful to compute windows orders of magnitude shorter and use interpolation (e.g., "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "scipy.interpolate._interpolate",
                "path": "scipy.interpolate._interpolate:interp1d",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "scipy.interpolate.interp1d"
            },
            {
              "type": "text",
              "value": ") to obtain tapers of length "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "M",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "M"
            },
            {
              "type": "text",
              "value": ", but this in general will not preserve orthogonality between the tapers."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 1.1"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Window length."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "M",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Standardized half bandwidth corresponding to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "2*NW = BW/f0 = BW*M*dt"
                    },
                    {
                      "type": "text",
                      "value": " where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dt"
                    },
                    {
                      "type": "text",
                      "value": " is taken as 1."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "NW",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of DPSS windows to return (orders "
                    },
                    {
                      "type": "inlineCode",
                      "value": "0"
                    },
                    {
                      "type": "text",
                      "value": " through "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Kmax-1"
                    },
                    {
                      "type": "text",
                      "value": "). If None (default), return only a single window of shape "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(M,)"
                    },
                    {
                      "type": "text",
                      "value": " instead of an array of windows of shape "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(Kmax, M)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Kmax",
              "type": "Param",
              "type_": "int | None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When True (default), generates a symmetric window, for use in filter design. When False, generates a periodic window, for use in spectral analysis."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sym",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If 'approximate' or 'subsample', then the windows are normalized by the maximum, and a correction scale-factor for even-length windows is applied either using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "M**2/(M**2+NW)"
                    },
                    {
                      "type": "text",
                      "value": " (\"approximate\") or a FFT-based subsample shift (\"subsample\"), see Notes for details. If None, then \"approximate\" is used when "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Kmax=None"
                    },
                    {
                      "type": "text",
                      "value": " and 2 otherwise (which uses the l2 norm)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "norm",
              "type": "Param",
              "type_": "{2, 'approximate', 'subsample'} | None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, also return the concentration ratios in addition to the windows."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "return_ratios",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The DPSS windows. Will be 1D if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "Kmax",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "Kmax"
                    },
                    {
                      "type": "text",
                      "value": " is None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "v",
              "type": "Param",
              "type_": "ndarray, shape (Kmax, M) or (M,)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The concentration ratios for the windows. Only returned if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "return_ratios",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "return_ratios"
                    },
                    {
                      "type": "text",
                      "value": " evaluates to True. Will be 0D if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "Kmax",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "Kmax"
                    },
                    {
                      "type": "text",
                      "value": " is None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "r",
              "type": "Param",
              "type_": "ndarray, shape (Kmax,) or float, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute the Discrete Prolate Spheroidal Sequences (DPSS)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "We can compare the window to `kaiser`, which was invented as an alternative\nthat was easier to calculate [3]_ (example adapted from\n`here <https://ccrma.stanford.edu/~jos/sasp/Kaiser_DPSS_Windows_Compared.html>`_):"
      },
      {
        "type": "code",
        "value": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.signal import windows, freqz\nM = 51\nfig, axes = plt.subplots(3, 2, figsize=(5, 7))\nfor ai, alpha in enumerate((1, 3, 5)):\n    win_dpss = windows.dpss(M, alpha)\n    beta = alpha*np.pi\n    win_kaiser = windows.kaiser(M, beta)\n    for win, c in ((win_dpss, 'k'), (win_kaiser, 'r')):\n        win /= win.sum()\n        axes[ai, 0].plot(win, color=c, lw=1.)\n        axes[ai, 0].set(xlim=[0, M-1], title=r'$\\alpha$ = %s' % alpha,\n                        ylabel='Amplitude')\n        w, h = freqz(win)\n        axes[ai, 1].plot(w, 20 * np.log10(np.abs(h)), color=c, lw=1.)\n        axes[ai, 1].set(xlim=[0, np.pi],\n                        title=r'$\\beta$ = %0.2f' % beta,\n                        ylabel='Magnitude (dB)')\nfor ax in axes.ravel():\n    ax.grid(True)\naxes[2, 1].legend(['DPSS', 'Kaiser'])\nfig.tight_layout()\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.signal.windows._windows:dpss-0-78636421.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      },
      {
        "type": "text",
        "value": "And here are examples of the first four windows, along with their\nconcentration ratios:"
      },
      {
        "type": "code",
        "value": "M = 512\nNW = 2.5\nwin, eigvals = windows.dpss(M, NW, 4, return_ratios=True)\nfig, ax = plt.subplots(1)\nax.plot(win.T, linewidth=1.)\nax.set(xlim=[0, M-1], ylim=[-0.1, 0.1], xlabel='Samples',\n       title='DPSS, M=%d, NW=%0.1f' % (M, NW))\nax.legend(['win[%d] (%0.4f)' % (ii, ratio)\n           for ii, ratio in enumerate(eigvals)])\nfig.tight_layout()\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.signal.windows._windows:dpss-1-8fad3b87.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      },
      {
        "type": "text",
        "value": "Using a standard :math:`l_{\\infty}` norm would produce two unity values\nfor even `M`, but only one unity value for odd `M`. This produces uneven\nwindow power that can be counteracted by the approximate correction\n``M**2/float(M**2+NW)``, which can be selected by using\n``norm='approximate'`` (which is the same as ``norm=None`` when\n``Kmax=None``, as is the case here). Alternatively, the slower\n``norm='subsample'`` can be used, which uses subsample shifting in the\nfrequency domain (FFT) to compute the correction:"
      },
      {
        "type": "code",
        "value": "Ms = np.arange(1, 41)\nfactors = (50, 20, 10, 5, 2.0001)\nenergy = np.empty((3, len(Ms), len(factors)))\nfor mi, M in enumerate(Ms):\n    for fi, factor in enumerate(factors):\n        NW = M / float(factor)\n        # Corrected using empirical approximation (default)\n        win = windows.dpss(M, NW)\n        energy[0, mi, fi] = np.sum(win ** 2) / np.sqrt(M)\n        # Corrected using subsample shifting\n        win = windows.dpss(M, NW, norm='subsample')\n        energy[1, mi, fi] = np.sum(win ** 2) / np.sqrt(M)\n        # Uncorrected (using l-infinity norm)\n        win /= win.max()\n        energy[2, mi, fi] = np.sum(win ** 2) / np.sqrt(M)\nfig, ax = plt.subplots(1)\nhs = ax.plot(Ms, energy[2], '-o', markersize=4,\n             markeredgecolor='none')\nleg = [hs[-1]]\nfor hi, hh in enumerate(hs):\n    h1 = ax.plot(Ms, energy[0, :, hi], '-o', markersize=4,\n                 color=hh.get_color(), markeredgecolor='none',\n                 alpha=0.66)\n    h2 = ax.plot(Ms, energy[1, :, hi], '-o', markersize=4,\n                 color=hh.get_color(), markeredgecolor='none',\n                 alpha=0.33)\n    if hi == len(hs) - 1:\n        leg.insert(0, h1[0])\n        leg.insert(0, h2[0])\nax.set(xlabel='M (samples)', ylabel=r'Power / $\\sqrt{M}$')\nax.legend(leg, ['Uncorrected', r'Corrected: $\\frac{M^2}{M^2+NW}$',\n                'Corrected (subsample)'])\nfig.tight_layout()"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/signal/windows/_windows.py",
  "item_line": 1848,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(M, NW, Kmax=None, sym=True, norm=None, return_ratios=False)"
  },
  "type": "DocBlob"
}