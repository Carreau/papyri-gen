{
  "aliases": [
    "scipy.signal.windows.general_cosine"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of points in the output window"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "M",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Sequence of weighting coefficients. This uses the convention of being centered on the origin, so these will typically all be positive numbers, not alternating sign."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When True (default), generates a symmetric window, for use in filter design. When False, generates a periodic window, for use in spectral analysis."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sym",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The array of window values."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "w",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Generic weighted sum of cosine terms window"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Heinzel describes a flat-top window named \"HFT90D\" with formula: [2]_"
      },
      {
        "type": "text",
        "value": ".. math::  w_j = 1 - 1.942604 \\cos(z) + 1.340318 \\cos(2z)\n           - 0.440811 \\cos(3z) + 0.043097 \\cos(4z)"
      },
      {
        "type": "text",
        "value": "where"
      },
      {
        "type": "text",
        "value": ".. math::  z = \\frac{2 \\pi j}{N}, j = 0...N - 1"
      },
      {
        "type": "text",
        "value": "Since this uses the convention of starting at the origin, to reproduce the\nwindow, we need to convert every other coefficient to a positive number:"
      },
      {
        "type": "code",
        "value": "HFT90D = [1, 1.942604, 1.340318, 0.440811, 0.043097]"
      },
      {
        "type": "text",
        "value": "The paper states that the highest sidelobe is at -90.2 dB.  Reproduce\nFigure 42 by plotting the window and its frequency response, and confirm\nthe sidelobe level in red:"
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.signal.windows import general_cosine\nfrom scipy.fft import fft, fftshift\nimport matplotlib.pyplot as plt"
      },
      {
        "type": "code",
        "value": "window = general_cosine(1000, HFT90D, sym=False)\nplt.plot(window)\nplt.title(\"HFT90D window\")\nplt.ylabel(\"Amplitude\")\nplt.xlabel(\"Sample\")"
      },
      {
        "type": "code",
        "value": "plt.figure()\nA = fft(window, 10000) / (len(window)/2.0)\nfreq = np.linspace(-0.5, 0.5, len(A))\nresponse = np.abs(fftshift(A / abs(A).max()))\nresponse = 20 * np.log10(np.maximum(response, 1e-10))\nplt.plot(freq, response)\nplt.axis([-50/1000, 50/1000, -140, 0])\nplt.title(\"Frequency response of the HFT90D window\")\nplt.ylabel(\"Normalized magnitude [dB]\")\nplt.xlabel(\"Normalized frequency [cycles per sample]\")\nplt.axhline(-90.2, color='red')\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.signal.windows._windows:general_cosine-0-7e1ed0e5.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.signal.windows._windows:general_cosine-1-1d413200.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/signal/windows/_windows.py",
  "item_line": 40,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(M, a, sym=True)"
  },
  "type": "DocBlob"
}