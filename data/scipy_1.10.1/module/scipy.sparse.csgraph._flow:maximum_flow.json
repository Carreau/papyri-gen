{
  "aliases": [
    "scipy.sparse.csgraph.maximum_flow"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 1.4.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This solves the maximum flow problem on a given directed weighted graph: A flow associates to every edge a value, also called a flow, less than the capacity of the edge, so that for every vertex (apart from the source and the sink vertices), the total incoming flow is equal to the total outgoing flow. The value of a flow is the sum of the flow of all edges leaving the source vertex, and the maximum flow problem consists of finding a flow whose value is maximal."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "By the max-flow min-cut theorem, the maximal value of the flow is also the total weight of the edges in a minimum cut."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To solve the problem, we provide Edmonds--Karp  and Dinic's algorithm . The implementation of both algorithms strive to exploit sparsity. The time complexity of the former "
            },
            {
              "type": "inlineMath",
              "value": "O(|V|\\,|E|^2)"
            },
            {
              "type": "text",
              "value": " and its space complexity is "
            },
            {
              "type": "inlineMath",
              "value": "O(|E|)"
            },
            {
              "type": "text",
              "value": ". The latter achieves its performance by building level graphs and finding blocking flows in them. Its time complexity is "
            },
            {
              "type": "inlineMath",
              "value": "O(|V|^2\\,|E|)"
            },
            {
              "type": "text",
              "value": " and its space complexity is "
            },
            {
              "type": "inlineMath",
              "value": "O(|E|)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The maximum flow problem is usually defined with real valued capacities, but we require that all capacities are integral to ensure convergence. When dealing with rational capacities, or capacities belonging to "
            },
            {
              "type": "inlineMath",
              "value": "x\\mathbb{Q}"
            },
            {
              "type": "text",
              "value": " for some fixed "
            },
            {
              "type": "inlineMath",
              "value": "x \\in \\mathbb{R}"
            },
            {
              "type": "text",
              "value": ", it is possible to reduce the problem to the integral case by scaling all capacities accordingly."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Solving a maximum-flow problem can be used for example for graph cuts optimization in computer vision ."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The square matrix representing a directed graph whose (i, j)'th entry is an integer representing the capacity of the edge between vertices i and j."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "csgraph",
              "type": "Param",
              "type_": "csr_matrix"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The source vertex from which the flow flows."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "source",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The sink vertex to which the flow flows."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sink",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The method/algorithm to be used for computing the maximum flow. Following methods are supported,"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'edmonds_karp': Edmonds Karp algorithm in ."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "'dinic': Dinic's algorithm in ."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Default is 'dinic'."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.8.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "method: {'edmonds_karp', 'dinic'}, optional",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "if the input graph is not in CSR format."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "TypeError:"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "if the capacity values are not integers, or the source or sink are out of bounds."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError:"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A maximum flow represented by a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "MaximumFlowResult"
                    },
                    {
                      "type": "text",
                      "value": " which includes the value of the flow in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "flow_value"
                    },
                    {
                      "type": "text",
                      "value": ", and the flow graph in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "flow"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "res",
              "type": "Param",
              "type_": "MaximumFlowResult"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Maximize the flow between two vertices in a graph."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Perhaps the simplest flow problem is that of a graph of only two vertices\nwith an edge from source (0) to sink (1)::"
      },
      {
        "type": "text",
        "value": "    (0) --5--> (1)"
      },
      {
        "type": "text",
        "value": "Here, the maximum flow is simply the capacity of the edge:"
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.sparse import csr_matrix\nfrom scipy.sparse.csgraph import maximum_flow\ngraph = csr_matrix([[0, 5], [0, 0]])\nmaximum_flow(graph, 0, 1).flow_value"
      },
      {
        "type": "code",
        "value": "maximum_flow(graph, 0, 1, method='edmonds_karp').flow_value"
      },
      {
        "type": "text",
        "value": "If, on the other hand, there is a bottleneck between source and sink, that\ncan reduce the maximum flow::"
      },
      {
        "type": "text",
        "value": "    (0) --5--> (1) --3--> (2)"
      },
      {
        "type": "code",
        "value": "graph = csr_matrix([[0, 5, 0], [0, 0, 3], [0, 0, 0]])\nmaximum_flow(graph, 0, 2).flow_value"
      },
      {
        "type": "text",
        "value": "A less trivial example is given in [2]_, Chapter 26.1:"
      },
      {
        "type": "code",
        "value": "graph = csr_matrix([[0, 16, 13,  0,  0,  0],\n                    [0,  0, 10, 12,  0,  0],\n                    [0,  4,  0,  0, 14,  0],\n                    [0,  0,  9,  0,  0, 20],\n                    [0,  0,  0,  7,  0,  4],\n                    [0,  0,  0,  0,  0,  0]])\nmaximum_flow(graph, 0, 5).flow_value"
      },
      {
        "type": "text",
        "value": "It is possible to reduce the problem of finding a maximum matching in a\nbipartite graph to a maximum flow problem: Let :math:`G = ((U, V), E)` be a\nbipartite graph. Then, add to the graph a source vertex with edges to every\nvertex in :math:`U` and a sink vertex with edges from every vertex in\n:math:`V`. Finally, give every edge in the resulting graph a capacity of 1.\nThen, a maximum flow in the new graph gives a maximum matching in the\noriginal graph consisting of the edges in :math:`E` whose flow is positive."
      },
      {
        "type": "text",
        "value": "Assume that the edges are represented by a\n:math:`\\lvert U \\rvert \\times \\lvert V \\rvert` matrix in CSR format whose\n:math:`(i, j)`'th entry is 1 if there is an edge from :math:`i \\in U` to\n:math:`j \\in V` and 0 otherwise; that is, the input is of the form required\nby :func:`maximum_bipartite_matching`. Then the CSR representation of the\ngraph constructed above contains this matrix as a block. Here's an example:"
      },
      {
        "type": "code",
        "value": "graph = csr_matrix([[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 1, 0]])\nprint(graph.toarray())"
      },
      {
        "type": "code",
        "value": "i, j = graph.shape\nn = graph.nnz\nindptr = np.concatenate([[0],\n                         graph.indptr + i,\n                         np.arange(n + i + 1, n + i + j + 1),\n                         [n + i + j]])\nindices = np.concatenate([np.arange(1, i + 1),\n                          graph.indices + i + 1,\n                          np.repeat(i + j + 1, j)])\ndata = np.ones(n + i + j, dtype=int)"
      },
      {
        "type": "code",
        "value": "graph_flow = csr_matrix((data, indices, indptr))\nprint(graph_flow.toarray())"
      },
      {
        "type": "text",
        "value": "At this point, we can find the maximum flow between the added sink and the\nadded source and the desired matching can be obtained by restricting the\nflow function to the block corresponding to the original graph:"
      },
      {
        "type": "code",
        "value": "result = maximum_flow(graph_flow, 0, i+j+1, method='dinic')\nmatching = result.flow[1:i+1, i+1:i+j+1]\nprint(matching.toarray())"
      },
      {
        "type": "text",
        "value": "This tells us that the first, second, and third vertex in :math:`U` are\nmatched with the second, first, and third vertex in :math:`V` respectively."
      },
      {
        "type": "text",
        "value": "While this solves the maximum bipartite matching problem in general, note\nthat algorithms specialized to that problem, such as\n:func:`maximum_bipartite_matching`, will generally perform better."
      },
      {
        "type": "text",
        "value": "This approach can also be used to solve various common generalizations of\nthe maximum bipartite matching problem. If, for instance, some vertices can\nbe matched with more than one other vertex, this may be handled by\nmodifying the capacities of the new graph appropriately."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'builtin_function_or_method'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "maximum_flow(csgraph, source, sink)"
  },
  "type": "DocBlob"
}