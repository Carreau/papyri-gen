{
  "aliases": [
    "scipy.sparse.csgraph.minimum_spanning_tree"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A minimum spanning tree is a graph consisting of the subset of edges which together connect all connected nodes, while minimizing the total sum of weights on the edges.  This is computed using the Kruskal algorithm."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.11.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This routine uses undirected graphs as input and output.  That is, if graph[i, j] and graph[j, i] are both zero, then nodes i and j do not have an edge connecting them.  If either is nonzero, then the two are connected by the minimum nonzero value of the two."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This routine loses precision when users input a dense matrix. Small elements < 1E-8 of the dense matrix are rounded to zero. All users should input sparse matrices if possible to avoid it."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The N x N matrix representing an undirected graph over N nodes (see notes below)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "csgraph",
              "type": "Param",
              "type_": "array_like or sparse matrix, 2 dimensions"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If true, then parts of the input graph will be overwritten for efficiency. Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "overwrite",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The N x N compressed-sparse representation of the undirected minimum spanning tree over the input (see notes below)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "span_tree",
              "type": "Param",
              "type_": "csr matrix"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return a minimum spanning tree of an undirected graph"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "The following example shows the computation of a minimum spanning tree\nover a simple four-component graph::"
      },
      {
        "type": "text",
        "value": "     input graph             minimum spanning tree"
      },
      {
        "type": "text",
        "value": "         (0)                         (0)\n        /   \\                       /\n       3     8                     3\n      /       \\                   /\n    (3)---5---(1)               (3)---5---(1)\n      \\       /                           /\n       6     2                           2\n        \\   /                           /\n         (2)                         (2)"
      },
      {
        "type": "text",
        "value": "It is easy to see from inspection that the minimum spanning tree involves\nremoving the edges with weights 8 and 6.  In compressed sparse\nrepresentation, the solution looks like this:"
      },
      {
        "type": "code",
        "value": "from scipy.sparse import csr_matrix\nfrom scipy.sparse.csgraph import minimum_spanning_tree\nX = csr_matrix([[0, 8, 0, 3],\n                [0, 0, 2, 5],\n                [0, 0, 0, 6],\n                [0, 0, 0, 0]])\nTcsr = minimum_spanning_tree(X)\nTcsr.toarray().astype(int)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'builtin_function_or_method'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "minimum_spanning_tree(csgraph, overwrite=False)"
  },
  "type": "DocBlob"
}