{
  "aliases": [
    "scipy.sparse.csgraph.depth_first_tree"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Note that a tree generated by a depth-first search is not unique: it depends on the order that the children of each node are searched."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 0.11.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The N x N matrix representing the compressed sparse graph.  The input csgraph will be converted to csr format for the calculation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "csgraph",
              "type": "Param",
              "type_": "array_like or sparse matrix"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The index of starting node."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "i_start",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True (default), then operate on a directed graph: only move from point i to point j along paths csgraph[i, j]. If False, then find the shortest path on an undirected graph: the algorithm can progress from point i to j along csgraph[i, j] or csgraph[j, i]."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "directed",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The N x N directed compressed-sparse representation of the depth- first tree drawn from csgraph, starting at the specified node."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cstree",
              "type": "Param",
              "type_": "csr matrix"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return a tree generated by a depth-first search."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "The following example shows the computation of a depth-first tree\nover a simple four-component graph, starting at node 0::"
      },
      {
        "type": "text",
        "value": "     input graph           depth first tree from (0)"
      },
      {
        "type": "text",
        "value": "         (0)                         (0)\n        /   \\                           \\\n       3     8                           8\n      /       \\                           \\\n    (3)---5---(1)               (3)       (1)\n      \\       /                   \\       /\n       6     2                     6     2\n        \\   /                       \\   /\n         (2)                         (2)"
      },
      {
        "type": "text",
        "value": "In compressed sparse representation, the solution looks like this:"
      },
      {
        "type": "code",
        "value": "from scipy.sparse import csr_matrix\nfrom scipy.sparse.csgraph import depth_first_tree\nX = csr_matrix([[0, 8, 0, 3],\n                [0, 0, 2, 5],\n                [0, 0, 0, 6],\n                [0, 0, 0, 0]])\nTcsr = depth_first_tree(X, 0, directed=False)\nTcsr.toarray().astype(int)"
      },
      {
        "type": "text",
        "value": "Note that the resulting graph is a Directed Acyclic Graph which spans\nthe graph.  Unlike a breadth-first tree, a depth-first tree of a given\ngraph is not unique if the graph contains cycles.  If the above solution\nhad begun with the edge connecting nodes 0 and 3, the result would have\nbeen different."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'builtin_function_or_method'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "depth_first_tree(csgraph, i_start, directed=True)"
  },
  "type": "DocBlob"
}