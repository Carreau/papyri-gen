{
  "aliases": [
    "scipy.sparse"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "args": "scipy.sparse",
          "children": [],
          "name": "currentmodule",
          "options": {},
          "type": "mystDirective",
          "value": ""
        },
        {
          "children": [
            {
              "type": "text",
              "value": "SciPy 2-D sparse array package for numeric data."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "This package is switching to an array interface, compatible with NumPy arrays, from the older matrix interface.  We recommend that you use the array objects ("
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "bsr_array"
                },
                {
                  "type": "text",
                  "value": ", "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "coo_array"
                },
                {
                  "type": "text",
                  "value": ", etc.) for all new work."
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "When using the array interface, please note that:"
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "inlineCode",
                          "value": "x * y"
                        },
                        {
                          "type": "text",
                          "value": " no longer performs matrix multiplication, but   element-wise multiplication (just like with NumPy arrays).  To   make code work with both arrays and matrices, use "
                        },
                        {
                          "type": "inlineCode",
                          "value": "x @ y"
                        },
                        {
                          "type": "text",
                          "value": " for   matrix multiplication."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Operations such as "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "sum"
                        },
                        {
                          "type": "text",
                          "value": ", that used to produce dense matrices, now   produce arrays, whose multiplication behavior differs similarly."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Sparse arrays currently must be two-dimensional.  This also means   that all "
                        },
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "slicing"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "type": "text",
                          "value": " operations on these objects must produce   two-dimensional results, or they will result in an error. This   will be addressed in a future version."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": false,
              "spread": false,
              "start": 1,
              "type": "list"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "The construction utilities ("
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "eye"
                },
                {
                  "type": "text",
                  "value": ", "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "kron"
                },
                {
                  "type": "text",
                  "value": ", "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "random"
                },
                {
                  "type": "text",
                  "value": ", "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "diags"
                },
                {
                  "type": "text",
                  "value": ", etc.) have not yet been ported, but their results can be wrapped into arrays    "
                }
              ],
              "type": "paragraph"
            },
            {
              "type": "code",
              "value": "A = csr_array(eye(3))"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": "Sparse matrices (:mod:`scipy.sparse`)",
      "type": "Section"
    },
    {
      "children": [],
      "level": 1,
      "target": null,
      "title": "Contents",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    bsr_array - Block Sparse Row array\n    coo_array - A sparse array in COOrdinate format\n    csc_array - Compressed Sparse Column array\n    csr_array - Compressed Sparse Row array\n    dia_array - Sparse array with DIAgonal storage\n    dok_array - Dictionary Of Keys based sparse array\n    lil_array - Row-based list of lists sparse array"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Sparse array classes",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    bsr_matrix - Block Sparse Row matrix\n    coo_matrix - A sparse matrix in COOrdinate format\n    csc_matrix - Compressed Sparse Column matrix\n    csr_matrix - Compressed Sparse Row matrix\n    dia_matrix - Sparse matrix with DIAgonal storage\n    dok_matrix - Dictionary Of Keys based sparse matrix\n    lil_matrix - Row-based list of lists sparse matrix\n    spmatrix - Sparse matrix base class"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Sparse matrix classes",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Building sparse matrices:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    eye - Sparse MxN matrix whose k-th diagonal is all ones\n    identity - Identity matrix in sparse format\n    kron - kronecker product of two sparse matrices\n    kronsum - kronecker sum of sparse matrices\n    diags - Return a sparse matrix from diagonals\n    spdiags - Return a sparse matrix from diagonals\n    block_diag - Build a block diagonal sparse matrix\n    tril - Lower triangular portion of a matrix in sparse format\n    triu - Upper triangular portion of a matrix in sparse format\n    bmat - Build a sparse matrix from sparse sub-blocks\n    hstack - Stack sparse matrices horizontally (column wise)\n    vstack - Stack sparse matrices vertically (row wise)\n    rand - Random values in a given shape\n    random - Random values in a given shape"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Save and load sparse matrices:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    save_npz - Save a sparse matrix to a file using ``.npz`` format.\n    load_npz - Load a sparse matrix from a file using ``.npz`` format."
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Sparse matrix tools:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    find"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Identifying sparse matrices:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    issparse\n    isspmatrix\n    isspmatrix_csc\n    isspmatrix_csr\n    isspmatrix_bsr\n    isspmatrix_lil\n    isspmatrix_dok\n    isspmatrix_coo\n    isspmatrix_dia"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Functions",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    csgraph - Compressed sparse graph routines\n    linalg - sparse linear algebra routines"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Submodules",
      "type": "Section"
    },
    {
      "children": [
        {
          "type": "code",
          "value": ".. autosummary:: \n    :toctree:generated/\n    SparseEfficiencyWarning\n    SparseWarning"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Exceptions",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "There are seven available sparse matrix types:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "csc_matrix: Compressed Sparse Column format"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "csr_matrix: Compressed Sparse Row format"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "bsr_matrix: Block Sparse Row format"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "lil_matrix: List of Lists format"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "dok_matrix: Dictionary of Keys format"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "coo_matrix: COOrdinate format (aka IJV, triplet format)"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "dia_matrix: DIAgonal format"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": true,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To construct a matrix efficiently, use either dok_matrix or lil_matrix. The lil_matrix class supports basic slicing and fancy indexing with a similar syntax to NumPy arrays. As illustrated below, the COO format may also be used to efficiently construct matrices. Despite their similarity to NumPy arrays, it is "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "strongly discouraged"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " to use NumPy functions directly on these matrices because NumPy may not properly convert them for computations, leading to unexpected (and incorrect) results. If you do want to apply a NumPy function to these matrices, first check if SciPy has its own implementation for the given sparse matrix class, or "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "convert the\nsparse matrix to a NumPy array"
                }
              ],
              "type": "strong"
            },
            {
              "type": "text",
              "value": " (e.g., using the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "toarray()"
            },
            {
              "type": "text",
              "value": " method of the class) first before applying the method."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To perform manipulations such as multiplication or inversion, first convert the matrix to either CSC or CSR format. The lil_matrix format is row-based, so conversion to CSR is efficient, whereas conversion to CSC is less so."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "All conversions among the CSR, CSC, and COO formats are efficient, linear-time operations."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 1,
      "target": null,
      "title": "Usage information",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To do a vector product between a sparse matrix and a vector simply use the matrix "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "dot"
            },
            {
              "type": "text",
              "value": " method, as described in its docstring:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> import numpy as np\n>>> from scipy.sparse import csr_matrix\n>>> A = csr_matrix([[1, 2, 0], [0, 0, 3], [4, 0, 5]])\n>>> v = np.array([1, 0, -1])\n>>> A.dot(v)\narray([ 1, -3, -1], dtype=int64)"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "warning As of NumPy 1.7, `np.dot` is not aware of sparse matrices,"
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "therefore using it will result on unexpected results or errors. The corresponding dense array should be obtained first instead:"
                }
              ],
              "type": "paragraph"
            },
            {
              "type": "code",
              "value": ">>> np.dot(A.toarray(), v)\narray([ 1, -3, -1], dtype=int64)"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "but then all the performance advantages would be lost."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The CSR format is specially suitable for fast matrix vector products."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Matrix vector product",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Construct a 1000x1000 lil_matrix and add some values to it:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> from scipy.sparse import lil_matrix\n>>> from scipy.sparse.linalg import spsolve\n>>> from numpy.linalg import solve, norm\n>>> from numpy.random import rand"
        },
        {
          "type": "code",
          "value": ">>> A = lil_matrix((1000, 1000))\n>>> A[0, :100] = rand(100)\n>>> A[1, 100:200] = A[0, :100]\n>>> A.setdiag(rand(1000))"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Now convert it to CSR format and solve A x = b for x:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> A = A.tocsr()\n>>> b = rand(1000)\n>>> x = spsolve(A, b)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Convert it to a dense matrix and solve, and check that the result is the same:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> x_ = solve(A.toarray(), b)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Now we can compute norm of the error with:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> err = norm(x-x_)\n>>> err < 1e-10\nTrue"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "It should be small :)"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Example 1",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Construct a matrix in COO format:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> from scipy import sparse\n>>> from numpy import array\n>>> I = array([0,3,1,0])\n>>> J = array([0,3,1,2])\n>>> V = array([4,5,7,9])\n>>> A = sparse.coo_matrix((V,(I,J)),shape=(4,4))"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Notice that the indices do not need to be sorted."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Duplicate (i,j) entries are summed when converting to CSR or CSC."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> I = array([0,0,1,3,1,0,0])\n>>> J = array([0,2,1,3,1,0,0])\n>>> V = array([1,1,1,1,1,1,1])\n>>> B = sparse.coo_matrix((V,(I,J)),shape=(4,4)).tocsr()"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This is useful for constructing finite-element stiffness and mass matrices."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Example 2",
      "type": "Section"
    },
    {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "CSR column indices are not necessarily sorted. Likewise for CSC row indices. Use the .sorted_indices() and .sort_indices() methods when sorted indices are required (e.g., when passing data to other libraries)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 2,
      "target": null,
      "title": "Further details",
      "type": "Section"
    }
  ],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "To remove in the future \u2013\u2013 scipy.sparse"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/sparse/__init__.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}