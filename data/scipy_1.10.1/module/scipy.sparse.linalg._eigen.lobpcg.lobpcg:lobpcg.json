{
  "aliases": [
    "scipy.sparse.linalg.lobpcg"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "LOBPCG is a preconditioned eigensolver for large symmetric positive definite (SPD) generalized eigenproblems."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The iterative loop in lobpcg runs maxit=maxiter (or 20 if maxit=None) iterations at most and finishes earler if the tolerance is met. Breaking backward compatibility with the previous version, lobpcg now returns the block of iterative vectors with the best accuracy rather than the last one iterated, as a cure for possible divergence."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The size of the iteration history output equals to the number of the best (limited by maxit) iterations plus 3 (initial, final, and postprocessing)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If both "
            },
            {
              "type": "inlineCode",
              "value": "retLambdaHistory"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "retResidualNormsHistory"
            },
            {
              "type": "text",
              "value": " are True, the return tuple has the following format "
            },
            {
              "type": "inlineCode",
              "value": "(lambda, V, lambda history, residual norms history)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In the following "
            },
            {
              "type": "inlineCode",
              "value": "n"
            },
            {
              "type": "text",
              "value": " denotes the matrix size and "
            },
            {
              "type": "inlineCode",
              "value": "k"
            },
            {
              "type": "text",
              "value": " the number of required eigenvalues (smallest or largest)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The LOBPCG code internally solves eigenproblems of the size "
            },
            {
              "type": "inlineCode",
              "value": "3k"
            },
            {
              "type": "text",
              "value": " on every iteration by calling the dense eigensolver "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "eigh"
            },
            {
              "type": "text",
              "value": ", so if "
            },
            {
              "type": "inlineCode",
              "value": "k"
            },
            {
              "type": "text",
              "value": " is not small enough compared to "
            },
            {
              "type": "inlineCode",
              "value": "n"
            },
            {
              "type": "text",
              "value": ", it makes no sense to call the LOBPCG code. Moreover, if one calls the LOBPCG algorithm for "
            },
            {
              "type": "inlineCode",
              "value": "5k > n"
            },
            {
              "type": "text",
              "value": ", it would likely break internally, so the code calls the standard function "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "eigh"
            },
            {
              "type": "text",
              "value": " instead. It is not that "
            },
            {
              "type": "inlineCode",
              "value": "n"
            },
            {
              "type": "text",
              "value": " should be large for the LOBPCG to work, but rather the ratio "
            },
            {
              "type": "inlineCode",
              "value": "n / k"
            },
            {
              "type": "text",
              "value": " should be large. It you call LOBPCG with "
            },
            {
              "type": "inlineCode",
              "value": "k=1"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "n=10"
            },
            {
              "type": "text",
              "value": ", it works though "
            },
            {
              "type": "inlineCode",
              "value": "n"
            },
            {
              "type": "text",
              "value": " is small. The method is intended for extremely large "
            },
            {
              "type": "inlineCode",
              "value": "n / k"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The convergence speed depends basically on two factors:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Relative separation of the seeking eigenvalues from the rest    of the eigenvalues. One can vary "
                    },
                    {
                      "type": "inlineCode",
                      "value": "k"
                    },
                    {
                      "type": "text",
                      "value": " to improve the absolute    separation and use proper preconditioning to shrink the spectral spread.    For example, a rod vibration test problem (under tests    directory) is ill-conditioned for large "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n"
                    },
                    {
                      "type": "text",
                      "value": ", so convergence will be    slow, unless efficient preconditioning is used. For this specific    problem, a good simple preconditioner function would be a linear solve    for "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "A",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": ", which is easy to code since "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "A",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " is tridiagonal."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Quality of the initial approximations "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "X",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "X"
                    },
                    {
                      "type": "text",
                      "value": " to the seeking eigenvectors.    Randomly distributed around the origin vectors work well if no better    choice is known."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": true,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The symmetric linear operator of the problem, usually a sparse matrix.  Often called the \"stiffness matrix\"."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "A",
              "type": "Param",
              "type_": "{sparse matrix, dense matrix, LinearOperator, callable object}"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial approximation to the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "k"
                    },
                    {
                      "type": "text",
                      "value": " eigenvectors (non-sparse). If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "A",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " has "
                    },
                    {
                      "type": "inlineCode",
                      "value": "shape=(n,n)"
                    },
                    {
                      "type": "text",
                      "value": " then "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "X",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "X"
                    },
                    {
                      "type": "text",
                      "value": " should have shape "
                    },
                    {
                      "type": "inlineCode",
                      "value": "shape=(n,k)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "X",
              "type": "Param",
              "type_": "ndarray, float32 or float64"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optional. The right hand side operator in a generalized eigenproblem. By default, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "B = Identity"
                    },
                    {
                      "type": "text",
                      "value": ".  Often called the \"mass matrix\"."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "B",
              "type": "Param",
              "type_": "{dense matrix, sparse matrix, LinearOperator, callable object}"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Optional. Preconditioner to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "A",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": "; by default "
                    },
                    {
                      "type": "inlineCode",
                      "value": "M = Identity"
                    },
                    {
                      "type": "text",
                      "value": ". "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "M",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "M"
                    },
                    {
                      "type": "text",
                      "value": " should approximate the inverse of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "A",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "M",
              "type": "Param",
              "type_": "{dense matrix, sparse matrix, LinearOperator, callable object}"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An n-by-sizeY matrix of constraints (non-sparse), sizeY < n. The iterations will be performed in the B-orthogonal complement of the column-space of Y. Y must be full rank."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Y",
              "type": "Param",
              "type_": "ndarray, float32 or float64, optional."
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Solver tolerance (stopping criterion). The default is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "tol=n*sqrt(eps)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "tol",
              "type": "Param",
              "type_": "scalar, optional."
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of iterations.  The default is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "maxiter=20"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter",
              "type": "Param",
              "type_": "int, optional."
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When True, solve for the largest eigenvalues, otherwise the smallest."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "largest",
              "type": "Param",
              "type_": "bool, optional."
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Controls solver output.  The default is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "verbosityLevel=0"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "verbosityLevel",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to return eigenvalue history.  Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "retLambdaHistory",
              "type": "Param",
              "type_": "bool, optional."
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to return history of residual norms.  Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "retResidualNormsHistory",
              "type": "Param",
              "type_": "bool, optional."
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Iterations restart if the residuals jump up 2**restartControl times compared to the smallest ones recorded in retResidualNormsHistory. The default is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "restartControl=20"
                    },
                    {
                      "type": "text",
                      "value": ", making the restarts rare for backward compatibility."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "restartControl",
              "type": "Param",
              "type_": "int, optional."
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "k"
                    },
                    {
                      "type": "text",
                      "value": " eigenvalues."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "w",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An array of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "k"
                    },
                    {
                      "type": "text",
                      "value": " eigenvectors.  "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "v",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": " has the same shape as "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "X",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "X"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "v",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The eigenvalue history, if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "retLambdaHistory",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "retLambdaHistory"
                    },
                    {
                      "type": "text",
                      "value": " is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "lambdas",
              "type": "Param",
              "type_": "ndarray, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The history of residual norms, if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "retResidualNormsHistory",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "retResidualNormsHistory"
                    },
                    {
                      "type": "text",
                      "value": " is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "rnorms",
              "type": "Param",
              "type_": "ndarray, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Solve ``A x = lambda x`` with constraints and preconditioning."
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.sparse import spdiags, issparse\nfrom scipy.sparse.linalg import lobpcg, LinearOperator"
      },
      {
        "type": "text",
        "value": "The square matrix size:"
      },
      {
        "type": "code",
        "value": "n = 100\nvals = np.arange(1, n + 1)"
      },
      {
        "type": "text",
        "value": "The first mandatory input parameter, in this test\na sparse 2D array representing the square matrix\nof the eigenvalue problem to solve:"
      },
      {
        "type": "code",
        "value": "A = spdiags(vals, 0, n, n)\nA.toarray()"
      },
      {
        "type": "text",
        "value": "Initial guess for eigenvectors, should have linearly independent\ncolumns. The second mandatory input parameter, a 2D array with the\nrow dimension determining the number of requested eigenvalues.\nIf no initial approximations available, randomly oriented vectors\ncommonly work best, e.g., with components normally disrtibuted\naround zero or uniformly distributed on the interval [-1 1]."
      },
      {
        "type": "code",
        "value": "rng = np.random.default_rng()\nX = rng.normal(size=(n, 3))"
      },
      {
        "type": "text",
        "value": "Constraints - an optional input parameter is a 2D array comprising\nof column vectors that the eigenvectors must be orthogonal to:"
      },
      {
        "type": "code",
        "value": "Y = np.eye(n, 3)"
      },
      {
        "type": "text",
        "value": "Preconditioner in the inverse of A in this example:"
      },
      {
        "type": "code",
        "value": "invA = spdiags([1./vals], 0, n, n)"
      },
      {
        "type": "text",
        "value": "The preconditiner must be defined by a function:"
      },
      {
        "type": "code",
        "value": "def precond( x ):\n    return invA @ x"
      },
      {
        "type": "text",
        "value": "The argument x of the preconditioner function is a matrix inside `lobpcg`,\nthus the use of matrix-matrix product ``@``."
      },
      {
        "type": "text",
        "value": "The preconditioner function is passed to lobpcg as a `LinearOperator`:"
      },
      {
        "type": "code",
        "value": "M = LinearOperator(matvec=precond, matmat=precond,\n                   shape=(n, n), dtype=np.float64)"
      },
      {
        "type": "text",
        "value": "Let us now solve the eigenvalue problem for the matrix A:"
      },
      {
        "type": "code",
        "value": "eigenvalues, _ = lobpcg(A, X, Y=Y, M=M, largest=False)\neigenvalues"
      },
      {
        "type": "text",
        "value": "Note that the vectors passed in Y are the eigenvectors of the 3 smallest\neigenvalues. The results returned are orthogonal to those."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py",
  "item_line": 142,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(A, X, B=None, M=None, Y=None, tol=None, maxiter=None, largest=True, verbosityLevel=0, retLambdaHistory=False, retResidualNormsHistory=False, restartControl=20)"
  },
  "type": "DocBlob"
}