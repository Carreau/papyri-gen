{
  "aliases": [
    "scipy.sparse.linalg.cg"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Starting guess for the solution."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Tolerances for convergence, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "norm(residual) <= max(tol*norm(b), atol)"
                    },
                    {
                      "type": "text",
                      "value": ". The default for "
                    },
                    {
                      "type": "inlineCode",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": " is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'legacy'"
                    },
                    {
                      "type": "text",
                      "value": ", which emulates a different legacy behavior."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "warning "
                        }
                      ],
                      "type": "admonitionTitle"
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "The default value for "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "atol"
                        },
                        {
                          "type": "text",
                          "value": " will be changed in a future release. For future compatibility, specify "
                        },
                        {
                          "domain": null,
                          "role": null,
                          "type": "Directive",
                          "value": "atol"
                        },
                        {
                          "type": "text",
                          "value": " explicitly."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "tol, atol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Maximum number of iterations.  Iteration will stop after maxiter steps even if the specified tolerance has not been achieved."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxiter",
              "type": "Param",
              "type_": "integer"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Preconditioner for A.  The preconditioner should approximate the inverse of A.  Effective preconditioning dramatically improves the rate of convergence, which implies that fewer iterations are needed to reach a given error tolerance."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "M",
              "type": "Param",
              "type_": "{sparse matrix, ndarray, LinearOperator}"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "User-supplied function to call after each iteration.  It is called as callback(xk), where xk is the current solution vector."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "callback",
              "type": "Param",
              "type_": "function"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The real or complex N-by-N matrix of the linear system. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " must represent a hermitian, positive definite matrix. Alternatively, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " can be a linear operator which can produce "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Ax"
                    },
                    {
                      "type": "text",
                      "value": " using, e.g., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "scipy.sparse.linalg.LinearOperator"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "A",
              "type": "Param",
              "type_": "{sparse matrix, ndarray, LinearOperator}"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Right hand side of the linear system. Has shape (N,) or (N,1)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "b",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The converged solution."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [],
              "param": "info",
              "type": "Param",
              "type_": "integer"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Use Conjugate Gradient iteration to solve "
            },
            {
              "type": "inlineCode",
              "value": "Ax = b"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.sparse import csc_matrix\nfrom scipy.sparse.linalg import cg\nP = np.array([[4, 0, 1, 0],\n              [0, 5, 0, 0],\n              [1, 0, 3, 2],\n              [0, 0, 2, 4]])\nA = csc_matrix(P)\nb = np.array([-1, -0.5, -1, 2])\nx, exit_code = cg(A, b)\nprint(exit_code)    # 0 indicates successful convergence"
      },
      {
        "type": "code",
        "value": "np.allclose(A.dot(x), b)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/sparse/linalg/_isolve/iterative.py",
  "item_line": 300,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(A, b, x0=None, tol=1e-05, maxiter=None, M=None, callback=None, atol=None)"
  },
  "type": "DocBlob"
}