{
  "aliases": [
    "scipy.sparse.linalg.lsqr"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The function solves "
            },
            {
              "type": "inlineCode",
              "value": "Ax = b"
            },
            {
              "type": "text",
              "value": "  or  "
            },
            {
              "type": "inlineCode",
              "value": "min ||Ax - b||^2"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "min ||Ax - b||^2 + d^2 ||x - x0||^2"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The matrix A may be square or rectangular (over-determined or under-determined), and may have any rank."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "1. Unsymmetric equations --    solve  Ax = b\n\n2. Linear least squares  --    solve  Ax = b\n                               in the least-squares sense\n\n3. Damped least squares  --    solve  (   A    )*x = (    b    )\n                                      ( damp*I )     ( damp*x0 )\n                               in the least-squares sense"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "LSQR uses an iterative method to approximate the solution.  The number of iterations required to reach a certain accuracy depends strongly on the scaling of the problem.  Poor scaling of the rows or columns of A should therefore be avoided where possible."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For example, in problem 1 the solution is unaltered by row-scaling.  If a row of A is very small or large compared to the other rows of A, the corresponding row of ( A  b ) should be scaled up or down."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In problems 1 and 2, the solution x is easily recovered following column-scaling.  Unless better information is known, the nonzero columns of A should be scaled so that they all have the same Euclidean norm (e.g., 1.0)."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In problem 3, there is no freedom to re-scale if damp is nonzero.  However, the value of damp should be assigned only after attention has been paid to the scaling of A."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The parameter damp is intended to help regularize ill-conditioned systems, by preventing the true solution from being very large.  Another aid to regularization is provided by the parameter acond, which may be used to terminate iterations before the computed solution becomes very large."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If some initial estimate "
            },
            {
              "type": "inlineCode",
              "value": "x0"
            },
            {
              "type": "text",
              "value": " is known and if "
            },
            {
              "type": "inlineCode",
              "value": "damp == 0"
            },
            {
              "type": "text",
              "value": ", one could proceed as follows:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Compute a residual vector "
                        },
                        {
                          "type": "inlineCode",
                          "value": "r0 = b - A@x0"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Use LSQR to solve the system  "
                        },
                        {
                          "type": "inlineCode",
                          "value": "A@dx = r0"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "Add the correction dx to obtain a final solution "
                        },
                        {
                          "type": "inlineCode",
                          "value": "x = x0 + dx"
                        },
                        {
                          "type": "text",
                          "value": "."
                        }
                      ],
                      "type": "paragraph"
                    }
                  ],
                  "spread": false,
                  "type": "listItem"
                }
              ],
              "ordered": true,
              "spread": false,
              "start": 1,
              "type": "list"
            }
          ],
          "type": "blockquote"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This requires that "
            },
            {
              "type": "inlineCode",
              "value": "x0"
            },
            {
              "type": "text",
              "value": " be available before and after the call to LSQR.  To judge the benefits, suppose LSQR takes k1 iterations to solve A@x = b and k2 iterations to solve A@dx = r0. If x0 is \"good\", norm(r0) will be smaller than norm(b). If the same stopping tolerances atol and btol are used for each system, k1 and k2 will be similar, but the final solution x0 + dx should be more accurate.  The only way to reduce the total work is to use a larger stopping tolerance for the second system. If some value btol is suitable for A@x = b, the larger value btol*norm(b)/norm(r0)  should be suitable for A@dx = r0."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Preconditioning is another way to reduce the number of iterations. If it is possible to solve a related system "
            },
            {
              "type": "inlineCode",
              "value": "M@x = b"
            },
            {
              "type": "text",
              "value": " efficiently, where M approximates A in some helpful way (e.g. M - A has low rank or its elements are small relative to those of A), LSQR may converge more rapidly on the system "
            },
            {
              "type": "inlineCode",
              "value": "A@M(inverse)@z =\nb"
            },
            {
              "type": "text",
              "value": ", after which x can be recovered by solving M@x = z."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If A is symmetric, LSQR should not be used!"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Alternatives are the symmetric conjugate-gradient method (cg) and/or SYMMLQ.  SYMMLQ is an implementation of symmetric cg that applies to any symmetric A and will converge more rapidly than LSQR.  If A is positive definite, there are other implementations of symmetric cg that require slightly less work per iteration than SYMMLQ (but will take the same number of iterations)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Representation of an m-by-n matrix. Alternatively, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " can be a linear operator which can produce "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Ax"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "A^T x"
                    },
                    {
                      "type": "text",
                      "value": " using, e.g., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "scipy.sparse.linalg.LinearOperator"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "A",
              "type": "Param",
              "type_": "{sparse matrix, ndarray, LinearOperator}"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Right-hand side vector "
                    },
                    {
                      "type": "inlineCode",
                      "value": "b"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "b",
              "type": "Param",
              "type_": "array_like, shape (m,)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Damping coefficient. Default is 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "damp",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Stopping tolerances. "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.sparse.linalg._isolve.lsqr:lsqr",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "lsqr"
                    },
                    {
                      "type": "text",
                      "value": " continues iterations until a certain backward error estimate is smaller than some quantity depending on atol and btol.  Let "
                    },
                    {
                      "type": "inlineCode",
                      "value": "r = b - Ax"
                    },
                    {
                      "type": "text",
                      "value": " be the residual vector for the current approximate solution "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Ax = b"
                    },
                    {
                      "type": "text",
                      "value": " seems to be consistent, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.sparse.linalg._isolve.lsqr:lsqr",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "lsqr"
                    },
                    {
                      "type": "text",
                      "value": " terminates when "
                    },
                    {
                      "type": "inlineCode",
                      "value": "norm(r) <= atol * norm(A) * norm(x) + btol * norm(b)"
                    },
                    {
                      "type": "text",
                      "value": ". Otherwise, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.sparse.linalg._isolve.lsqr:lsqr",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "lsqr"
                    },
                    {
                      "type": "text",
                      "value": " terminates when "
                    },
                    {
                      "type": "inlineCode",
                      "value": "norm(A^H r) <=\natol * norm(A) * norm(r)"
                    },
                    {
                      "type": "text",
                      "value": ".  If both tolerances are 1.0e-6 (default), the final "
                    },
                    {
                      "type": "inlineCode",
                      "value": "norm(r)"
                    },
                    {
                      "type": "text",
                      "value": " should be accurate to about 6 digits. (The final "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": " will usually have fewer correct digits, depending on "
                    },
                    {
                      "type": "inlineCode",
                      "value": "cond(A)"
                    },
                    {
                      "type": "text",
                      "value": " and the size of LAMBDA.)  If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "atol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "atol"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "btol",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "btol"
                    },
                    {
                      "type": "text",
                      "value": " is None, a default value of 1.0e-6 will be used. Ideally, they should be estimates of the relative error in the entries of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "b"
                    },
                    {
                      "type": "text",
                      "value": " respectively.  For example, if the entries of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "A"
                    },
                    {
                      "type": "text",
                      "value": " have 7 correct digits, set "
                    },
                    {
                      "type": "inlineCode",
                      "value": "atol = 1e-7"
                    },
                    {
                      "type": "text",
                      "value": ". This prevents the algorithm from doing unnecessary work beyond the uncertainty of the input data."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "atol, btol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Another stopping tolerance.  lsqr terminates if an estimate of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "cond(A)"
                    },
                    {
                      "type": "text",
                      "value": " exceeds "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "conlim",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "conlim"
                    },
                    {
                      "type": "text",
                      "value": ".  For compatible systems "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Ax =\nb"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "conlim",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "conlim"
                    },
                    {
                      "type": "text",
                      "value": " could be as large as 1.0e+12 (say).  For least-squares problems, conlim should be less than 1.0e+8. Maximum precision can be obtained by setting "
                    },
                    {
                      "type": "inlineCode",
                      "value": "atol = btol =\nconlim = zero"
                    },
                    {
                      "type": "text",
                      "value": ", but the number of iterations may then be excessive. Default is 1e8."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "conlim",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Explicit limitation on number of iterations (for safety)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "iter_lim",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Display an iteration log. Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "show",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to estimate diagonals of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(A'A + damp^2*I)^{-1}"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "calc_var",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Initial guess of x, if None zeros are used. Default is None."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.0.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "x0",
              "type": "Param",
              "type_": "array_like, shape (n,), optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The final solution."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "ndarray of float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Gives the reason for termination. 1 means x is an approximate solution to Ax = b. 2 means x approximately solves the least-squares problem."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "istop",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Iteration number upon termination."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "itn",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "norm(r)"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "r = b - Ax"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "r1norm",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "sqrt( norm(r)^2  +  damp^2 * norm(x - x0)^2 )"
                    },
                    {
                      "type": "text",
                      "value": ".  Equal to "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "r1norm",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "r1norm"
                    },
                    {
                      "type": "text",
                      "value": " if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "damp == 0"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "r2norm",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Estimate of Frobenius norm of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Abar = [[A]; [damp*I]]"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "anorm",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Estimate of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "cond(Abar)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "acond",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Estimate of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "norm(A'@r - damp^2*(x - x0))"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arnorm",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "norm(x)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "xnorm",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "calc_var"
                    },
                    {
                      "type": "text",
                      "value": " is True, estimates all diagonals of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(A'A)^{-1}"
                    },
                    {
                      "type": "text",
                      "value": " (if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "damp == 0"
                    },
                    {
                      "type": "text",
                      "value": ") or more generally "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(A'A +\ndamp^2*I)^{-1}"
                    },
                    {
                      "type": "text",
                      "value": ".  This is well defined if A has full column rank or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "damp > 0"
                    },
                    {
                      "type": "text",
                      "value": ".  (Not sure what var means if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "rank(A)\n< n"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "damp = 0."
                    },
                    {
                      "type": "text",
                      "value": ")"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "var",
              "type": "Param",
              "type_": "ndarray of float"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find the least-squares solution to a large, sparse, linear system of equations."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.sparse import csc_matrix\nfrom scipy.sparse.linalg import lsqr\nA = csc_matrix([[1., 0.], [1., 1.], [0., 1.]], dtype=float)"
      },
      {
        "type": "text",
        "value": "The first example has the trivial solution ``[0, 0]``"
      },
      {
        "type": "code",
        "value": "b = np.array([0., 0., 0.], dtype=float)\nx, istop, itn, normr = lsqr(A, b)[:4]\nistop"
      },
      {
        "type": "code",
        "value": "x"
      },
      {
        "type": "text",
        "value": "The stopping code `istop=0` returned indicates that a vector of zeros was\nfound as a solution. The returned solution `x` indeed contains\n``[0., 0.]``. The next example has a non-trivial solution:"
      },
      {
        "type": "code",
        "value": "b = np.array([1., 0., -1.], dtype=float)\nx, istop, itn, r1norm = lsqr(A, b)[:4]\nistop"
      },
      {
        "type": "code",
        "value": "x"
      },
      {
        "type": "code",
        "value": "itn"
      },
      {
        "type": "code",
        "value": "r1norm"
      },
      {
        "type": "text",
        "value": "As indicated by `istop=1`, `lsqr` found a solution obeying the tolerance\nlimits. The given solution ``[1., -1.]`` obviously solves the equation. The\nremaining return values include information about the number of iterations\n(`itn=1`) and the remaining difference of left and right side of the solved\nequation.\nThe final example demonstrates the behavior in the case where there is no\nsolution for the equation:"
      },
      {
        "type": "code",
        "value": "b = np.array([1., 0.01, -1.], dtype=float)\nx, istop, itn, r1norm = lsqr(A, b)[:4]\nistop"
      },
      {
        "type": "code",
        "value": "x"
      },
      {
        "type": "code",
        "value": "A.dot(x)-b"
      },
      {
        "type": "code",
        "value": "r1norm"
      },
      {
        "type": "text",
        "value": "`istop` indicates that the system is inconsistent and thus `x` is rather an\napproximate solution to the corresponding least-squares problem. `r1norm`\ncontains the norm of the minimal residual that was found."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/sparse/linalg/_isolve/lsqr.py",
  "item_line": 96,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(A, b, damp=0.0, atol=1e-06, btol=1e-06, conlim=100000000.0, iter_lim=None, show=False, calc_var=False, x0=None)"
  },
  "type": "DocBlob"
}