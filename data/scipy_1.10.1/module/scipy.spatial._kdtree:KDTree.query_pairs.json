{
  "aliases": [
    "scipy.spatial.KDTree.query_pairs"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The maximum distance."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "r",
              "type": "Param",
              "type_": "positive float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Which Minkowski norm to use.  "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "p",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "p"
                    },
                    {
                      "type": "text",
                      "value": " has to meet the condition "
                    },
                    {
                      "type": "inlineCode",
                      "value": "1 <= p <= infinity"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "p",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Approximate search.  Branches of the tree are not explored if their nearest points are further than "
                    },
                    {
                      "type": "inlineCode",
                      "value": "r/(1+eps)"
                    },
                    {
                      "type": "text",
                      "value": ", and branches are added in bulk if their furthest points are nearer than "
                    },
                    {
                      "type": "inlineCode",
                      "value": "r * (1+eps)"
                    },
                    {
                      "type": "text",
                      "value": ".  "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "eps",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "eps"
                    },
                    {
                      "type": "text",
                      "value": " has to be non-negative."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "eps",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Choose the output container, 'set' or 'ndarray'. Default: 'set'"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.6.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "output_type",
              "type": "Param",
              "type_": "string, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Set of pairs "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(i,j)"
                    },
                    {
                      "type": "text",
                      "value": ", with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "i < j"
                    },
                    {
                      "type": "text",
                      "value": ", for which the corresponding positions are close. If output_type is 'ndarray', an ndarry is returned instead of a set."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "results",
              "type": "Param",
              "type_": "set or ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Find all pairs of points in "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "self"
            },
            {
              "type": "text",
              "value": " whose distance is at most r."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "You can search all pairs of points in a kd-tree within a distance:"
      },
      {
        "type": "code",
        "value": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.spatial import KDTree\nrng = np.random.default_rng()\npoints = rng.random((20, 2))\nplt.figure(figsize=(6, 6))\nplt.plot(points[:, 0], points[:, 1], \"xk\", markersize=14)\nkd_tree = KDTree(points)\npairs = kd_tree.query_pairs(r=0.2)\nfor (i, j) in pairs:\n    plt.plot([points[i, 0], points[j, 0]],\n            [points[i, 1], points[j, 1]], \"-r\")\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.spatial._kdtree:KDTree.query_pairs-0-c3a83c9d.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/spatial/_kdtree.py",
  "item_line": 608,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, r, p=2.0, eps=0, output_type='set')"
  },
  "type": "DocBlob"
}