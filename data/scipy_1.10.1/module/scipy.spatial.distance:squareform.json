{
  "aliases": [
    "scipy.cluster._optimal_leaf_ordering.squareform"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "v = squareform(X)"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Given a square n-by-n symmetric distance matrix "
                    },
                    {
                      "type": "inlineCode",
                      "value": "X"
                    },
                    {
                      "type": "text",
                      "value": ",    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "v = squareform(X)"
                    },
                    {
                      "type": "text",
                      "value": " returns a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n * (n-1) / 2"
                    },
                    {
                      "type": "text",
                      "value": "    (i.e. binomial coefficient n choose 2) sized vector "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": "    where "
                    },
                    {
                      "type": "inlineMath",
                      "value": "v[{n \\choose 2} - {n-i \\choose 2} + (j-i-1)]"
                    },
                    {
                      "type": "text",
                      "value": "    is the distance between distinct points "
                    },
                    {
                      "type": "inlineCode",
                      "value": "i"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "j"
                    },
                    {
                      "type": "text",
                      "value": ".    If "
                    },
                    {
                      "type": "inlineCode",
                      "value": "X"
                    },
                    {
                      "type": "text",
                      "value": " is non-square or asymmetric, an error is raised."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "X = squareform(v)"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Given a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n * (n-1) / 2"
                    },
                    {
                      "type": "text",
                      "value": " sized vector "
                    },
                    {
                      "type": "inlineCode",
                      "value": "v"
                    },
                    {
                      "type": "text",
                      "value": "    for some integer "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n >= 1"
                    },
                    {
                      "type": "text",
                      "value": " encoding distances as described,    "
                    },
                    {
                      "type": "inlineCode",
                      "value": "X = squareform(v)"
                    },
                    {
                      "type": "text",
                      "value": " returns a n-by-n distance matrix "
                    },
                    {
                      "type": "inlineCode",
                      "value": "X"
                    },
                    {
                      "type": "text",
                      "value": ".    The "
                    },
                    {
                      "type": "inlineCode",
                      "value": "X[i, j]"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "X[j, i]"
                    },
                    {
                      "type": "text",
                      "value": " values are set to    "
                    },
                    {
                      "type": "inlineMath",
                      "value": "v[{n \\choose 2} - {n-i \\choose 2} + (j-i-1)]"
                    },
                    {
                      "type": "text",
                      "value": "    and all diagonal elements are zero."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": true,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In SciPy 0.19.0, "
            },
            {
              "type": "inlineCode",
              "value": "squareform"
            },
            {
              "type": "text",
              "value": " stopped casting all input types to float64, and started returning arrays of the same dtype as the input."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Either a condensed or redundant distance matrix."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "X",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "As with MATLAB(TM), if force is equal to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'tovector'"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "'tomatrix'"
                    },
                    {
                      "type": "text",
                      "value": ", the input will be treated as a distance matrix or distance vector respectively."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "force",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If set to False, no checks will be made for matrix symmetry nor zero diagonals. This is useful if it is known that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "X - X.T1"
                    },
                    {
                      "type": "text",
                      "value": " is small and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "diag(X)"
                    },
                    {
                      "type": "text",
                      "value": " is close to zero. These values are ignored any way so they do not disrupt the squareform transformation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "checks",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If a condensed distance matrix is passed, a redundant one is returned, or if a redundant one is passed, a condensed distance matrix is returned."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "Y",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Convert a vector-form distance vector to a square-form distance matrix, and vice-versa."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/spatial/distance.py",
  "item_line": 2258,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(X, force='no', checks=True)"
  },
  "type": "DocBlob"
}