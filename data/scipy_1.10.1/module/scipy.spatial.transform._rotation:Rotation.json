{
  "aliases": [
    "scipy.spatial.transform.Rotation"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "single",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This class provides an interface to initialize from and represent rotations with:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Quaternions"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Rotation Matrices"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Rotation Vectors"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Modified Rodrigues Parameters"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Euler Angles"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The following operations on rotations are supported:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Application on vectors"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Rotation Composition"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Rotation Inversion"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Rotation Indexing"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Indexing within a rotation is supported since multiple rotation transforms can be stored within a single "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Rotation"
            },
            {
              "type": "text",
              "value": " instance."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To create "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Rotation"
            },
            {
              "type": "text",
              "value": " objects use "
            },
            {
              "type": "inlineCode",
              "value": "from_..."
            },
            {
              "type": "text",
              "value": " methods (see examples below). "
            },
            {
              "type": "inlineCode",
              "value": "Rotation(...)"
            },
            {
              "type": "text",
              "value": " is not supposed to be instantiated directly."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "__len__",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "from_quat",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "from_matrix",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "from_rotvec",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "from_mrp",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "from_euler",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "as_quat",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "as_matrix",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "as_rotvec",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "as_mrp",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "as_euler",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "concatenate",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "apply",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "__mul__",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "inv",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "magnitude",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "mean",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "reduce",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "create_group",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "__getitem__",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "identity",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "random",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "align_vectors",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "type": "mystComment",
          "value": ".. versionadded: 1.2.0"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Rotation in 3 dimensions."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from scipy.spatial.transform import Rotation as R\nimport numpy as np"
      },
      {
        "type": "text",
        "value": "A `Rotation` instance can be initialized in any of the above formats and\nconverted to any of the others. The underlying object is independent of the\nrepresentation used for initialization."
      },
      {
        "type": "text",
        "value": "Consider a counter-clockwise rotation of 90 degrees about the z-axis. This\ncorresponds to the following quaternion (in scalar-last format):"
      },
      {
        "type": "code",
        "value": "r = R.from_quat([0, 0, np.sin(np.pi/4), np.cos(np.pi/4)])"
      },
      {
        "type": "text",
        "value": "The rotation can be expressed in any of the other formats:"
      },
      {
        "type": "code",
        "value": "r.as_matrix()"
      },
      {
        "type": "code",
        "value": "r.as_rotvec()"
      },
      {
        "type": "code",
        "value": "r.as_euler('zyx', degrees=True)"
      },
      {
        "type": "text",
        "value": "The same rotation can be initialized using a rotation matrix:"
      },
      {
        "type": "code",
        "value": "r = R.from_matrix([[0, -1, 0],\n                   [1, 0, 0],\n                   [0, 0, 1]])"
      },
      {
        "type": "text",
        "value": "Representation in other formats:"
      },
      {
        "type": "code",
        "value": "r.as_quat()"
      },
      {
        "type": "code",
        "value": "r.as_rotvec()"
      },
      {
        "type": "code",
        "value": "r.as_euler('zyx', degrees=True)"
      },
      {
        "type": "text",
        "value": "The rotation vector corresponding to this rotation is given by:"
      },
      {
        "type": "code",
        "value": "r = R.from_rotvec(np.pi/2 * np.array([0, 0, 1]))"
      },
      {
        "type": "text",
        "value": "Representation in other formats:"
      },
      {
        "type": "code",
        "value": "r.as_quat()"
      },
      {
        "type": "code",
        "value": "r.as_matrix()"
      },
      {
        "type": "code",
        "value": "r.as_euler('zyx', degrees=True)"
      },
      {
        "type": "text",
        "value": "The ``from_euler`` method is quite flexible in the range of input formats\nit supports. Here we initialize a single rotation about a single axis:"
      },
      {
        "type": "code",
        "value": "r = R.from_euler('z', 90, degrees=True)"
      },
      {
        "type": "text",
        "value": "Again, the object is representation independent and can be converted to any\nother format:"
      },
      {
        "type": "code",
        "value": "r.as_quat()"
      },
      {
        "type": "code",
        "value": "r.as_matrix()"
      },
      {
        "type": "code",
        "value": "r.as_rotvec()"
      },
      {
        "type": "text",
        "value": "It is also possible to initialize multiple rotations in a single instance\nusing any of the ``from_...`` functions. Here we initialize a stack of 3\nrotations using the ``from_euler`` method:"
      },
      {
        "type": "code",
        "value": "r = R.from_euler('zyx', [\n[90, 0, 0],\n[0, 45, 0],\n[45, 60, 30]], degrees=True)"
      },
      {
        "type": "text",
        "value": "The other representations also now return a stack of 3 rotations. For\nexample:"
      },
      {
        "type": "code",
        "value": "r.as_quat()"
      },
      {
        "type": "text",
        "value": "Applying the above rotations onto a vector:"
      },
      {
        "type": "code",
        "value": "v = [1, 2, 3]\nr.apply(v)"
      },
      {
        "type": "text",
        "value": "A `Rotation` instance can be indexed and sliced as if it were a single\n1D array or list:"
      },
      {
        "type": "code",
        "value": "r.as_quat()"
      },
      {
        "type": "code",
        "value": "p = r[0]\np.as_matrix()"
      },
      {
        "type": "code",
        "value": "q = r[1:3]\nq.as_quat()"
      },
      {
        "type": "text",
        "value": "In fact it can be converted to numpy.array:"
      },
      {
        "type": "code",
        "value": "r_array = np.asarray(r)\nr_array.shape"
      },
      {
        "type": "code",
        "value": "r_array[0].as_matrix()"
      },
      {
        "type": "text",
        "value": "Multiple rotations can be composed using the ``*`` operator:"
      },
      {
        "type": "code",
        "value": "r1 = R.from_euler('z', 90, degrees=True)\nr2 = R.from_rotvec([np.pi/4, 0, 0])\nv = [1, 2, 3]\nr2.apply(r1.apply(v))"
      },
      {
        "type": "code",
        "value": "r3 = r2 * r1 # Note the order\nr3.apply(v)"
      },
      {
        "type": "text",
        "value": "Finally, it is also possible to invert rotations:"
      },
      {
        "type": "code",
        "value": "r1 = R.from_euler('z', [90, 45], degrees=True)\nr2 = r1.inv()\nr2.as_euler('zyx', degrees=True)"
      },
      {
        "type": "text",
        "value": "These examples serve as an overview into the `Rotation` class and highlight\nmajor functionalities. For more thorough examples of the range of input and\noutput formats supported, consult the individual method's examples."
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/spatial/transform/_rotation.cpython-311-darwin.so",
  "item_line": null,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Attributes",
    "Methods",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "Slerp",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "Slerp"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}