{
  "aliases": [
    "scipy.stats.Covariance.from_eigendecomposition"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Let the covariance matrix be "
            },
            {
              "type": "inlineMath",
              "value": "A"
            },
            {
              "type": "text",
              "value": ", let "
            },
            {
              "type": "inlineMath",
              "value": "V"
            },
            {
              "type": "text",
              "value": " be matrix of eigenvectors, and let "
            },
            {
              "type": "inlineMath",
              "value": "W"
            },
            {
              "type": "text",
              "value": " be the diagonal matrix of eigenvalues such that "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "V W V^T = A"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When all of the eigenvalues are strictly positive, whitening of a data point "
            },
            {
              "type": "inlineMath",
              "value": "x"
            },
            {
              "type": "text",
              "value": " is performed by computing "
            },
            {
              "type": "inlineMath",
              "value": "x^T (V W^{-1/2})"
            },
            {
              "type": "text",
              "value": ", where the inverse square root can be taken element-wise. "
            },
            {
              "type": "inlineMath",
              "value": "\\log\\det{A}"
            },
            {
              "type": "text",
              "value": " is calculated as  "
            },
            {
              "type": "inlineMath",
              "value": "tr(\\log{W})"
            },
            {
              "type": "text",
              "value": ", where the "
            },
            {
              "type": "inlineMath",
              "value": "\\log"
            },
            {
              "type": "text",
              "value": " operation is performed element-wise."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "Covariance"
            },
            {
              "type": "text",
              "value": " class supports singular covariance matrices. When computing "
            },
            {
              "type": "inlineCode",
              "value": "_log_pdet"
            },
            {
              "type": "text",
              "value": ", non-positive eigenvalues are ignored. Whitening is not well defined when the point to be whitened does not lie in the span of the columns of the covariance matrix. The convention taken here is to treat the inverse square root of non-positive eigenvalues as zeros."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A sequence (nominally a tuple) containing the eigenvalue and eigenvector arrays as computed by "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.linalg._decomp",
                        "path": "scipy.linalg._decomp:eigh",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.linalg.eigh"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy.linalg",
                        "path": "numpy.linalg:eigh",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.linalg.eigh"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "eigendecomposition",
              "type": "Param",
              "type_": "sequence"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Representation of a covariance provided via eigendecomposition"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Prepare a symmetric positive definite covariance matrix ``A`` and a\ndata point ``x``."
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy import stats\nrng = np.random.default_rng()\nn = 5\nA = rng.random(size=(n, n))\nA = A @ A.T  # make the covariance symmetric positive definite\nx = rng.random(size=n)"
      },
      {
        "type": "text",
        "value": "Perform the eigendecomposition of ``A`` and create the `Covariance`\nobject."
      },
      {
        "type": "code",
        "value": "w, v = np.linalg.eigh(A)\ncov = stats.Covariance.from_eigendecomposition((w, v))"
      },
      {
        "type": "text",
        "value": "Compare the functionality of the `Covariance` object against\nreference implementations."
      },
      {
        "type": "code",
        "value": "res = cov.whiten(x)\nref = x @ (v @ np.diag(w**-0.5))\nnp.allclose(res, ref)"
      },
      {
        "type": "code",
        "value": "res = cov.log_pdet\nref = np.linalg.slogdet(A)[-1]\nnp.allclose(res, ref)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/stats/_covariance.py",
  "item_line": 247,
  "item_type": "<class 'staticmethod'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}