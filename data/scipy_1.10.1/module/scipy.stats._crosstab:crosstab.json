{
  "aliases": [
    "scipy.stats._crosstab.crosstab"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "When "
            },
            {
              "type": "inlineCode",
              "value": "len(args) > 1"
            },
            {
              "type": "text",
              "value": ", the array computed by this function is often referred to as a "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "contingency table"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " ."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The arguments must be sequences with the same length.  The second return value, "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "count"
            },
            {
              "type": "text",
              "value": ", is an integer array with "
            },
            {
              "type": "inlineCode",
              "value": "len(args)"
            },
            {
              "type": "text",
              "value": " dimensions.  If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "levels",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "levels"
            },
            {
              "type": "text",
              "value": " is None, the shape of "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "count"
            },
            {
              "type": "text",
              "value": " is "
            },
            {
              "type": "inlineCode",
              "value": "(n0, n1, ...)"
            },
            {
              "type": "text",
              "value": ", where "
            },
            {
              "type": "inlineCode",
              "value": "nk"
            },
            {
              "type": "text",
              "value": " is the number of unique elements in "
            },
            {
              "type": "inlineCode",
              "value": "args[k]"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "versionadded 1.7.0"
                }
              ],
              "type": "admonitionTitle"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A sequence of sequences whose unique aligned elements are to be counted.  The sequences in args must all be the same length."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "*args",
              "type": "Param",
              "type_": "sequences"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "levels",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "levels"
                    },
                    {
                      "type": "text",
                      "value": " is given, it must be a sequence that is the same length as "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": ".  Each element in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "levels",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "levels"
                    },
                    {
                      "type": "text",
                      "value": " is either a sequence or None.  If it is a sequence, it gives the values in the corresponding sequence in "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": " that are to be counted.  If any value in the sequences in "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": " does not occur in the corresponding sequence in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "levels",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "levels"
                    },
                    {
                      "type": "text",
                      "value": ", that value is ignored and not counted in the returned array "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "count"
                    },
                    {
                      "type": "text",
                      "value": ".  The default value of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "levels",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "levels"
                    },
                    {
                      "type": "text",
                      "value": " for "
                    },
                    {
                      "type": "inlineCode",
                      "value": "args[i]"
                    },
                    {
                      "type": "text",
                      "value": " is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.unique(args[i])"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "levels",
              "type": "Param",
              "type_": "sequence, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, return a sparse matrix.  The matrix will be an instance of the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.sparse._coo",
                        "path": "scipy.sparse._coo:coo_matrix",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.sparse.coo_matrix"
                    },
                    {
                      "type": "text",
                      "value": " class.  Because SciPy's sparse matrices must be 2-d, only two input sequences are allowed when "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sparse",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sparse"
                    },
                    {
                      "type": "text",
                      "value": " is True.  Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sparse",
              "type": "Param",
              "type_": "bool, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An object containing the following attributes:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "elements"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "elements"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "count"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "count"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "res",
              "type": "Param",
              "type_": "CrosstabResult"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return table of counts for each possible unique combination in "
            },
            {
              "type": "inlineCode",
              "value": "*args"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from scipy.stats.contingency import crosstab"
      },
      {
        "type": "text",
        "value": "Given the lists `a` and `x`, create a contingency table that counts the\nfrequencies of the corresponding pairs."
      },
      {
        "type": "code",
        "value": "a = ['A', 'B', 'A', 'A', 'B', 'B', 'A', 'A', 'B', 'B']\nx = ['X', 'X', 'X', 'Y', 'Z', 'Z', 'Y', 'Y', 'Z', 'Z']\nres = crosstab(a, x)\navals, xvals = res.elements\navals"
      },
      {
        "type": "code",
        "value": "xvals"
      },
      {
        "type": "code",
        "value": "res.count"
      },
      {
        "type": "text",
        "value": "So `('A', 'X')` occurs twice, `('A', 'Y')` occurs three times, etc."
      },
      {
        "type": "text",
        "value": "Higher dimensional contingency tables can be created."
      },
      {
        "type": "code",
        "value": "p = [0, 0, 0, 0, 1, 1, 1, 0, 0, 1]\nres = crosstab(a, x, p)\nres.count"
      },
      {
        "type": "code",
        "value": "res.count.shape"
      },
      {
        "type": "text",
        "value": "The values to be counted can be set by using the `levels` argument.\nIt allows the elements of interest in each input sequence to be\ngiven explicitly instead finding the unique elements of the sequence."
      },
      {
        "type": "text",
        "value": "For example, suppose one of the arguments is an array containing the\nanswers to a survey question, with integer values 1 to 4.  Even if the\nvalue 1 does not occur in the data, we want an entry for it in the table."
      },
      {
        "type": "code",
        "value": "q1 = [2, 3, 3, 2, 4, 4, 2, 3, 4, 4, 4, 3, 3, 3, 4]  # 1 does not occur.\nq2 = [4, 4, 2, 2, 2, 4, 1, 1, 2, 2, 4, 2, 2, 2, 4]  # 3 does not occur.\noptions = [1, 2, 3, 4]\nres = crosstab(q1, q2, levels=(options, options))\nres.count"
      },
      {
        "type": "text",
        "value": "If `levels` is given, but an element of `levels` is None, the unique values\nof the corresponding argument are used. For example,"
      },
      {
        "type": "code",
        "value": "res = crosstab(q1, q2, levels=(None, options))\nres.elements"
      },
      {
        "type": "code",
        "value": "res.count"
      },
      {
        "type": "text",
        "value": "If we want to ignore the pairs where 4 occurs in ``q2``, we can\ngive just the values [1, 2] to `levels`, and the 4 will be ignored:"
      },
      {
        "type": "code",
        "value": "res = crosstab(q1, q2, levels=(None, [1, 2]))\nres.elements"
      },
      {
        "type": "code",
        "value": "res.count"
      },
      {
        "type": "text",
        "value": "Finally, let's repeat the first example, but return a sparse matrix:"
      },
      {
        "type": "code",
        "value": "res = crosstab(a, x, sparse=True)\nres.count"
      },
      {
        "type": "code",
        "value": "res.count.A"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/stats/_crosstab.py",
  "item_line": 10,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "numpy.unique",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "numpy.unique"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(*args, levels=None, sparse=False)"
  },
  "type": "DocBlob"
}