{
  "aliases": [
    "scipy.stats.rv_discrete"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "rv_discrete"
            },
            {
              "type": "text",
              "value": " is a base class to construct specific distribution classes and instances for discrete random variables. It can also be used to construct an arbitrary distribution defined by a list of support points and corresponding probabilities."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "rvs",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "pmf",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "logpmf",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "cdf",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "logcdf",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "sf",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "logsf",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "ppf",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "isf",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "moment",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "stats",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "entropy",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "expect",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "median",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "mean",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "std",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "var",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "interval",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "__call__",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [],
              "param": "support",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This class is similar to "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "rv_continuous"
            },
            {
              "type": "text",
              "value": ". Whether a shape parameter is valid is decided by an "
            },
            {
              "type": "inlineCode",
              "value": "_argcheck"
            },
            {
              "type": "text",
              "value": " method (which defaults to checking that its arguments are strictly positive.) The main differences are:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "the support of the distribution is a set of integers"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "instead of the probability density function, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "pdf"
                    },
                    {
                      "type": "text",
                      "value": " (and the   corresponding private "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_pdf"
                    },
                    {
                      "type": "text",
                      "value": "), this class defines the   "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "probability mass function"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "pmf",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "pmf"
                    },
                    {
                      "type": "text",
                      "value": " (and the corresponding   private "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_pmf"
                    },
                    {
                      "type": "text",
                      "value": ".)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "scale parameter is not defined."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "To create a new discrete distribution, we would do the following:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> from scipy.stats import rv_discrete\n>>> class poisson_gen(rv_discrete):\n...     \"Poisson distribution\"\n...     def _pmf(self, k, mu):\n...         return exp(-mu) * mu**k / factorial(k)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "and create an instance  "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": ">>> poisson = poisson_gen(name=\"poisson\")"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Note that above we defined the Poisson distribution in the standard form. Shifting the distribution can be done by providing the "
            },
            {
              "type": "inlineCode",
              "value": "loc"
            },
            {
              "type": "text",
              "value": " parameter to the methods of the instance. For example, "
            },
            {
              "type": "inlineCode",
              "value": "poisson.pmf(x, mu, loc)"
            },
            {
              "type": "text",
              "value": " delegates the work to "
            },
            {
              "type": "inlineCode",
              "value": "poisson._pmf(x-loc, mu)"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Discrete distributions from a list of probabilities"
                }
              ],
              "type": "strong"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Alternatively, you can construct an arbitrary discrete rv defined on a finite set of values "
            },
            {
              "type": "inlineCode",
              "value": "xk"
            },
            {
              "type": "text",
              "value": " with "
            },
            {
              "type": "inlineCode",
              "value": "Prob{X=xk} = pk"
            },
            {
              "type": "text",
              "value": " by using the "
            },
            {
              "type": "inlineCode",
              "value": "values"
            },
            {
              "type": "text",
              "value": " keyword argument to the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "rv_discrete"
            },
            {
              "type": "text",
              "value": " constructor."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Lower bound of the support of the distribution, default: 0"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "a",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Upper bound of the support of the distribution, default: plus infinity"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "b",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The tolerance for the generic calculation of moments."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "moment_tol",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "(xk, pk)"
                    },
                    {
                      "type": "text",
                      "value": " where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xk"
                    },
                    {
                      "type": "text",
                      "value": " are integers and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "pk"
                    },
                    {
                      "type": "text",
                      "value": " are the non-zero probabilities between 0 and 1 with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "sum(pk) = 1"
                    },
                    {
                      "type": "text",
                      "value": ". "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xk"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "pk"
                    },
                    {
                      "type": "text",
                      "value": " must have the same shape."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "values",
              "type": "Param",
              "type_": "tuple of two array_like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Increment for the support of the distribution. Default is 1. (other values have not been tested)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "inc",
              "type": "Param",
              "type_": "integer, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The value in a result arrays that indicates a value that for which some argument restriction is violated, default is np.nan."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "badvalue",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The name of the instance. This string is used to construct the default example for distributions."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "name",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This string is used as part of the first line of the docstring returned when a subclass has no docstring of its own. Note: "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "longname",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "longname"
                    },
                    {
                      "type": "text",
                      "value": " exists for backwards compatibility, do not use for new subclasses."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "longname",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The shape of the distribution. For example \"m, n\" for a distribution that takes two integers as the two shape arguments for all its methods If not provided, shape parameters will be inferred from the signatures of the private methods, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_pmf"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "_cdf"
                    },
                    {
                      "type": "text",
                      "value": " of the instance."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "shapes",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "This string is used as the last part of the docstring returned when a subclass has no docstring of its own. Note: "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "extradoc",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "extradoc"
                    },
                    {
                      "type": "text",
                      "value": " exists for backwards compatibility and will be removed in SciPy 1.11.0, do not use for new subclasses."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "extradoc",
              "type": "Param",
              "type_": "str, optional, deprecated"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is None (or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "np.random"
                    },
                    {
                      "type": "text",
                      "value": "), the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy.random.mtrand",
                        "path": "numpy.random.mtrand:RandomState",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.random.RandomState"
                    },
                    {
                      "type": "text",
                      "value": " singleton is used. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is an int, a new "
                    },
                    {
                      "type": "inlineCode",
                      "value": "RandomState"
                    },
                    {
                      "type": "text",
                      "value": " instance is used, seeded with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is already a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Generator"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "RandomState"
                    },
                    {
                      "type": "text",
                      "value": " instance then that instance is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "seed",
              "type": "Param",
              "type_": "{None, int, `numpy.random.Generator`, `numpy.random.RandomState`}, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A generic discrete random variable class meant for subclassing."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Custom made discrete distribution:"
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy import stats\nxk = np.arange(7)\npk = (0.1, 0.2, 0.3, 0.1, 0.1, 0.0, 0.2)\ncustm = stats.rv_discrete(name='custm', values=(xk, pk))"
      },
      {
        "type": "code",
        "value": "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1)\nax.plot(xk, custm.pmf(xk), 'ro', ms=12, mec='r')\nax.vlines(xk, 0, custm.pmf(xk), colors='r', lw=4)\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.stats._distn_infrastructure:rv_discrete-0-33d704e4.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      },
      {
        "type": "text",
        "value": "Random number generation:"
      },
      {
        "type": "code",
        "value": "R = custm.rvs(size=100)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/stats/_distn_infrastructure.py",
  "item_line": 3036,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Methods",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}