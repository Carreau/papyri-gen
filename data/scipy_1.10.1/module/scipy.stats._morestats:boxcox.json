{
  "aliases": [
    "scipy.stats.boxcox"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The Box-Cox transform is given by      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "y = (x**lmbda - 1) / lmbda,  for lmbda != 0\n    log(x),                  for lmbda = 0"
        },
        {
          "children": [
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "boxcox",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "boxcox"
            },
            {
              "type": "text",
              "value": " requires the input data to be positive.  Sometimes a Box-Cox transformation provides a shift parameter to achieve this; "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "boxcox",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "boxcox"
            },
            {
              "type": "text",
              "value": " does not.  Such a shift parameter is equivalent to adding a positive constant to "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "x",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "x"
            },
            {
              "type": "text",
              "value": " before calling "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "boxcox",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "boxcox"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The confidence limits returned when "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "alpha",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "alpha"
            },
            {
              "type": "text",
              "value": " is provided give the interval where:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "math",
          "value": "llf(\\hat{\\lambda}) - llf(\\lambda) < \\frac{1}{2}\\chi^2(1 - \\alpha, 1),"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "with "
            },
            {
              "type": "inlineCode",
              "value": "llf"
            },
            {
              "type": "text",
              "value": " the log-likelihood function and "
            },
            {
              "type": "inlineMath",
              "value": "\\chi^2"
            },
            {
              "type": "text",
              "value": " the chi-squared function."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input array to be transformed."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " is not None, this is an alias of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "scipy.special.boxcox"
                    },
                    {
                      "type": "text",
                      "value": ". Returns nan if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x < 0"
                    },
                    {
                      "type": "text",
                      "value": "; returns -inf if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "x == 0 and lmbda < 0"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " is None, array must be positive, 1-dimensional, and non-constant."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " is None (default), find the value of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " that maximizes the log-likelihood function and return it as the second output argument."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " is not None, do the transformation for that value."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "lmbda",
              "type": "Param",
              "type_": "scalar, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " is None and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "alpha",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "alpha"
                    },
                    {
                      "type": "text",
                      "value": " is not None (default), return the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "100 * (1-alpha)%"
                    },
                    {
                      "type": "text",
                      "value": " confidence  interval for "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " as the third output argument. Must be between 0.0 and 1.0."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " is not None, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "alpha",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "alpha"
                    },
                    {
                      "type": "text",
                      "value": " is ignored."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "alpha",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " is None, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "optimizer",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "optimizer"
                    },
                    {
                      "type": "text",
                      "value": " is the scalar optimizer used to find the value of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " that minimizes the negative log-likelihood function. "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "optimizer",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "optimizer"
                    },
                    {
                      "type": "text",
                      "value": " is a callable that accepts one argument:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "fun"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "fun"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "and returns an object, such as an instance of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.optimize._optimize",
                        "path": "scipy.optimize._optimize:OptimizeResult",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.optimize.OptimizeResult"
                    },
                    {
                      "type": "text",
                      "value": ", which holds the optimal value of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " in an attribute "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "See the example in "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.stats._morestats:boxcox_normmax",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "boxcox_normmax"
                    },
                    {
                      "type": "text",
                      "value": " or the documentation of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.optimize._minimize",
                        "path": "scipy.optimize._minimize:minimize_scalar",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.optimize.minimize_scalar"
                    },
                    {
                      "type": "text",
                      "value": " for more information."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " is not None, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "optimizer",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "optimizer"
                    },
                    {
                      "type": "text",
                      "value": " is ignored."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "optimizer",
              "type": "Param",
              "type_": "callable, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Box-Cox power transformed array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "boxcox",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " parameter is None, the second returned argument is the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " that maximizes the log-likelihood function."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxlog",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "lmbda",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " parameter is None and "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "alpha",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "alpha"
                    },
                    {
                      "type": "text",
                      "value": " is not None, this returned tuple of floats represents the minimum and maximum confidence limits given "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "alpha",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "alpha"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "(min_ci, max_ci)",
              "type": "Param",
              "type_": "tuple of float, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return a dataset transformed by a Box-Cox power transformation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from scipy import stats\nimport matplotlib.pyplot as plt"
      },
      {
        "type": "text",
        "value": "We generate some random variates from a non-normal distribution and make a\nprobability plot for it, to show it is non-normal in the tails:"
      },
      {
        "type": "code",
        "value": "fig = plt.figure()\nax1 = fig.add_subplot(211)\nx = stats.loggamma.rvs(5, size=500) + 5\nprob = stats.probplot(x, dist=stats.norm, plot=ax1)\nax1.set_xlabel('')\nax1.set_title('Probplot against normal distribution')"
      },
      {
        "type": "text",
        "value": "We now use `boxcox` to transform the data so it's closest to normal:"
      },
      {
        "type": "code",
        "value": "ax2 = fig.add_subplot(212)\nxt, _ = stats.boxcox(x)\nprob = stats.probplot(xt, dist=stats.norm, plot=ax2)\nax2.set_title('Probplot after Box-Cox transformation')"
      },
      {
        "type": "code",
        "value": "plt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.stats._morestats:boxcox-0-0fcac1b4.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/stats/_morestats.py",
  "item_line": 973,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._morestats:probplot",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "probplot"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._morestats:boxcox_normplot",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "boxcox_normplot"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._morestats:boxcox_normmax",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "boxcox_normmax"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._morestats:boxcox_llf",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "boxcox_llf"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(x, lmbda=None, alpha=None, optimizer=None)"
  },
  "type": "DocBlob"
}