{
  "aliases": [
    "scipy.stats.boxcox_normmax"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "x",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The starting interval for a downhill bracket search for the default "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "optimize.brent"
                    },
                    {
                      "type": "text",
                      "value": " solver. Note that this is in most cases not critical; the final result is allowed to be outside this bracket. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "optimizer",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "optimizer"
                    },
                    {
                      "type": "text",
                      "value": " is passed, "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "brack",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "brack"
                    },
                    {
                      "type": "text",
                      "value": " must be None."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "brack",
              "type": "Param",
              "type_": "2-tuple, optional, default (-2.0, 2.0)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The method to determine the optimal transform parameter ("
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "boxcox"
                    },
                    {
                      "type": "text",
                      "value": " "
                    },
                    {
                      "type": "inlineCode",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " parameter). Options are:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Maximizes the Pearson correlation coefficient between     "
                            },
                            {
                              "type": "inlineCode",
                              "value": "y = boxcox(x)"
                            },
                            {
                              "type": "text",
                              "value": " and the expected values for "
                            },
                            {
                              "type": "inlineCode",
                              "value": "y"
                            },
                            {
                              "type": "text",
                              "value": " if "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "local",
                              "reference": {
                                "kind": "local",
                                "module": null,
                                "path": "x",
                                "type": "RefInfo",
                                "version": null
                              },
                              "type": "Link",
                              "value": "x"
                            },
                            {
                              "type": "text",
                              "value": " would be     normally-distributed."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'pearsonr'  (default)"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Minimizes the log-likelihood "
                            },
                            {
                              "anchor": null,
                              "exists": true,
                              "kind": "module",
                              "reference": {
                                "kind": "module",
                                "module": "scipy",
                                "path": "scipy.stats._morestats:boxcox_llf",
                                "type": "RefInfo",
                                "version": "1.10.1"
                              },
                              "type": "Link",
                              "value": "boxcox_llf"
                            },
                            {
                              "type": "text",
                              "value": ".  This is the method used     in "
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "boxcox"
                            },
                            {
                              "type": "text",
                              "value": "."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'mle'"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    },
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "Use all optimization methods available, and return all results.     Useful to compare different methods."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "'all'"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "method",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "optimizer",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "optimizer"
                    },
                    {
                      "type": "text",
                      "value": " is a callable that accepts one argument:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "fun"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "fun"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "and returns an object, such as an instance of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.optimize._optimize",
                        "path": "scipy.optimize._optimize:OptimizeResult",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.optimize.OptimizeResult"
                    },
                    {
                      "type": "text",
                      "value": ", which holds the optimal value of "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "lmbda"
                    },
                    {
                      "type": "text",
                      "value": " in an attribute "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "x",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "x"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "See the example below or the documentation of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "scipy.optimize._minimize",
                        "path": "scipy.optimize._minimize:minimize_scalar",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "scipy.optimize.minimize_scalar"
                    },
                    {
                      "type": "text",
                      "value": " for more information."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "optimizer",
              "type": "Param",
              "type_": "callable, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The optimal transform parameter found.  An array instead of a scalar for "
                    },
                    {
                      "type": "inlineCode",
                      "value": "method='all'"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "maxlog",
              "type": "Param",
              "type_": "float or ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute optimal Box-Cox transform parameter for input data."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt"
      },
      {
        "type": "text",
        "value": "We can generate some data and determine the optimal ``lmbda`` in various\nways:"
      },
      {
        "type": "code",
        "value": "rng = np.random.default_rng()\nx = stats.loggamma.rvs(5, size=30, random_state=rng) + 5\ny, lmax_mle = stats.boxcox(x)\nlmax_pearsonr = stats.boxcox_normmax(x)"
      },
      {
        "type": "code",
        "value": "lmax_mle"
      },
      {
        "type": "code",
        "value": "lmax_pearsonr"
      },
      {
        "type": "code",
        "value": "stats.boxcox_normmax(x, method='all')"
      },
      {
        "type": "code",
        "value": "fig = plt.figure()\nax = fig.add_subplot(111)\nprob = stats.boxcox_normplot(x, -10, 10, plot=ax)\nax.axvline(lmax_mle, color='r')\nax.axvline(lmax_pearsonr, color='g', ls='--')"
      },
      {
        "type": "code",
        "value": "plt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.stats._morestats:boxcox_normmax-0-e28309fd.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      },
      {
        "type": "text",
        "value": "Alternatively, we can define our own `optimizer` function. Suppose we\nare only interested in values of `lmbda` on the interval [6, 7], we\nwant to use `scipy.optimize.minimize_scalar` with ``method='bounded'``,\nand we want to use tighter tolerances when optimizing the log-likelihood\nfunction. To do this, we define a function that accepts positional argument\n`fun` and uses `scipy.optimize.minimize_scalar` to minimize `fun` subject\nto the provided bounds and tolerances:"
      },
      {
        "type": "code",
        "value": "from scipy import optimize\noptions = {'xatol': 1e-12}  # absolute tolerance on `x`\ndef optimizer(fun):\n    return optimize.minimize_scalar(fun, bounds=(6, 7),\n                                    method=\"bounded\", options=options)\nstats.boxcox_normmax(x, optimizer=optimizer)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/stats/_morestats.py",
  "item_line": 1116,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "boxcox",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "boxcox"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._morestats:boxcox_llf",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "boxcox_llf"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._morestats:boxcox_normplot",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "boxcox_normplot"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.optimize._minimize:minimize_scalar",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "scipy.optimize.minimize_scalar"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(x, brack=None, method='pearsonr', optimizer=None)"
  },
  "type": "DocBlob"
}