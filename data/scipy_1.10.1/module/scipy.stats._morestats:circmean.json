{
  "aliases": [
    "scipy.stats.circmean"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "samples",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "High boundary for the sample range. Default is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "2*pi"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "high",
              "type": "Param",
              "type_": "float or int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Low boundary for the sample range. Default is 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "low",
              "type": "Param",
              "type_": "float or int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Axis along which means are computed. The default is to compute the mean of the flattened array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "axis",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Defines how to handle when input contains nan. 'propagate' returns nan, 'raise' throws an error, 'omit' performs the calculations ignoring nan values. Default is 'propagate'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nan_policy",
              "type": "Param",
              "type_": "{'propagate', 'raise', 'omit'}, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Circular mean."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "circmean",
              "type": "Param",
              "type_": "float"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute the circular mean for samples in a range."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "For simplicity, all angles are printed out in degrees."
      },
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.stats import circmean\nimport matplotlib.pyplot as plt\nangles = np.deg2rad(np.array([20, 30, 330]))\ncircmean = circmean(angles)\nnp.rad2deg(circmean)"
      },
      {
        "type": "code",
        "value": "mean = angles.mean()\nnp.rad2deg(mean)"
      },
      {
        "type": "text",
        "value": "Plot and compare the circular mean against the arithmetic mean."
      },
      {
        "type": "code",
        "value": "plt.plot(np.cos(np.linspace(0, 2*np.pi, 500)),\n         np.sin(np.linspace(0, 2*np.pi, 500)),\n         c='k')\nplt.scatter(np.cos(angles), np.sin(angles), c='k')\nplt.scatter(np.cos(circmean), np.sin(circmean), c='b',\n            label='circmean')\nplt.scatter(np.cos(mean), np.sin(mean), c='r', label='mean')\nplt.legend()\nplt.axis('equal')\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.stats._morestats:circmean-0-86d80e6c.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/stats/_morestats.py",
  "item_line": 3760,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Circular standard deviation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._morestats:circstd",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "circstd"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Circular variance."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._morestats:circvar",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "circvar"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(samples, high=6.283185307179586, low=0, axis=None, nan_policy='propagate')"
  },
  "type": "DocBlob"
}