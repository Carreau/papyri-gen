{
  "aliases": [
    "scipy.stats.circstd"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This uses a definition of circular standard deviation from . Essentially, the calculation is as follows."
            }
          ],
          "type": "paragraph"
        },
        {
          "args": "python",
          "children": [],
          "name": "code-block",
          "options": {},
          "type": "mystDirective",
          "value": "import numpy as np\nC = np.cos(samples).mean()\nS = np.sin(samples).mean()\nR = np.sqrt(C**2 + S**2)\nl = 2*np.pi / (high-low)\ncircstd = np.sqrt(-2*np.log(R)) / l"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "In the limit of small angles, it returns a number close to the 'linear' standard deviation."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "samples",
              "type": "Param",
              "type_": "array_like"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "High boundary for the sample range. Default is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "2*pi"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "high",
              "type": "Param",
              "type_": "float or int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Low boundary for the sample range. Default is 0."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "low",
              "type": "Param",
              "type_": "float or int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Axis along which standard deviations are computed. The default is to compute the standard deviation of the flattened array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "axis",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Defines how to handle when input contains nan. 'propagate' returns nan, 'raise' throws an error, 'omit' performs the calculations ignoring nan values. Default is 'propagate'."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "nan_policy",
              "type": "Param",
              "type_": "{'propagate', 'raise', 'omit'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the returned value is equal to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "sqrt(-2*log(R))"
                    },
                    {
                      "type": "text",
                      "value": " and does not depend on the variable units. If False (default), the returned value is scaled by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "((high-low)/(2*pi))"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "normalize",
              "type": "Param",
              "type_": "boolean, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Circular standard deviation."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "circstd",
              "type": "Param",
              "type_": "float"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Compute the circular standard deviation for samples assumed to be in the range [low to high]."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom scipy.stats import circstd\nimport matplotlib.pyplot as plt\nsamples_1 = np.array([0.072, -0.158, 0.077, 0.108, 0.286,\n                      0.133, -0.473, -0.001, -0.348, 0.131])\nsamples_2 = np.array([0.111, -0.879, 0.078, 0.733, 0.421,\n                      0.104, -0.136, -0.867,  0.012,  0.105])\ncircstd_1 = circstd(samples_1)\ncircstd_2 = circstd(samples_2)"
      },
      {
        "type": "text",
        "value": "Plot the samples."
      },
      {
        "type": "code",
        "value": "fig, (left, right) = plt.subplots(ncols=2)\nfor image in (left, right):\n    image.plot(np.cos(np.linspace(0, 2*np.pi, 500)),\n               np.sin(np.linspace(0, 2*np.pi, 500)),\n               c='k')\n    image.axis('equal')\n    image.axis('off')\nleft.scatter(np.cos(samples_1), np.sin(samples_1), c='k', s=15)\nleft.set_title(f\"circular std: {np.round(circstd_1, 2)!r}\")\nright.plot(np.cos(np.linspace(0, 2*np.pi, 500)),\n           np.sin(np.linspace(0, 2*np.pi, 500)),\n           c='k')\nright.scatter(np.cos(samples_2), np.sin(samples_2), c='k', s=15)\nright.set_title(f\"circular std: {np.round(circstd_2, 2)!r}\")\nplt.show()"
      },
      {
        "type": "Fig",
        "value": {
          "kind": "assets",
          "module": "scipy",
          "path": "fig-scipy.stats._morestats:circstd-0-19a0ed62.png",
          "type": "RefInfo",
          "version": "1.10.1"
        }
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/stats/_morestats.py",
  "item_line": 3940,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Circular mean."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._morestats:circmean",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "circmean"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "type": "text",
              "value": "Circular variance."
            }
          ],
          "type": "paragraph"
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "scipy",
          "path": "scipy.stats._morestats:circvar",
          "type": "RefInfo",
          "version": "1.10.1"
        },
        "type": "Link",
        "value": "circvar"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(samples, high=6.283185307179586, low=0, axis=None, nan_policy='propagate', *, normalize=False)"
  },
  "type": "DocBlob"
}