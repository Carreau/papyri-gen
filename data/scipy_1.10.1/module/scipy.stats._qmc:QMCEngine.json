{
  "aliases": [
    "scipy.stats._qmc.QMCEngine"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "QMCEngine is a base class to construct a specific Quasi-Monte Carlo sampler. It cannot be used directly as a sampler."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "By convention samples are distributed over the half-open interval "
            },
            {
              "type": "inlineCode",
              "value": "[0, 1)"
            },
            {
              "type": "text",
              "value": ". Instances of the class can access the attributes: "
            },
            {
              "type": "inlineCode",
              "value": "d"
            },
            {
              "type": "text",
              "value": " for the dimension; and "
            },
            {
              "type": "inlineCode",
              "value": "rng"
            },
            {
              "type": "text",
              "value": " for the random number generator (used for the "
            },
            {
              "type": "inlineCode",
              "value": "seed"
            },
            {
              "type": "text",
              "value": ")."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "Subclassing"
                }
              ],
              "type": "strong"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "When subclassing "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "QMCEngine"
            },
            {
              "type": "text",
              "value": " to create a new sampler,  "
            },
            {
              "type": "inlineCode",
              "value": "__init__"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "random"
            },
            {
              "type": "text",
              "value": " must be redefined."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "__init__(d, seed=None)"
                    },
                    {
                      "type": "text",
                      "value": ": at least fix the dimension. If the sampler   does not take advantage of a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " (deterministic methods like   Halton), this parameter can be omitted."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "_random(n, *, workers=1)"
                    },
                    {
                      "type": "text",
                      "value": ": draw "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n"
                    },
                    {
                      "type": "text",
                      "value": " from the engine. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "workers"
                    },
                    {
                      "type": "text",
                      "value": "   is used for parallelism. See "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "Halton"
                    },
                    {
                      "type": "text",
                      "value": " for example."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Optionally, two other methods can be overwritten by subclasses:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "reset"
                    },
                    {
                      "type": "text",
                      "value": ": Reset the engine to its original state."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "fast_forward"
                    },
                    {
                      "type": "text",
                      "value": ": If the sequence is deterministic (like Halton   sequence), then "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fast_forward(n)"
                    },
                    {
                      "type": "text",
                      "value": " is skipping the "
                    },
                    {
                      "type": "inlineCode",
                      "value": "n"
                    },
                    {
                      "type": "text",
                      "value": " first draw."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dimension of the parameter space."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "d",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to use an optimization scheme to improve the quality after sampling. Note that this is a post-processing step that does not guarantee that all properties of the sample will be conserved. Default is None."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "random-cd"
                            },
                            {
                              "type": "text",
                              "value": ": random permutations of coordinates to lower the   centered discrepancy. The best sample based on the centered   discrepancy is constantly updated. Centered discrepancy-based   sampling shows better space-filling robustness toward 2D and 3D   subprojections compared to using other discrepancy measures."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "lloyd"
                            },
                            {
                              "type": "text",
                              "value": ": Perturb samples using a modified Lloyd-Max algorithm.   The process converges to equally spaced samples."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.10.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "optimization",
              "type": "Param",
              "type_": "{None, \"random-cd\", \"lloyd\"}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is an int or None, a new "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy.random._generator",
                        "path": "numpy.random._generator:Generator",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.random.Generator"
                    },
                    {
                      "type": "text",
                      "value": " is created using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.random.default_rng(seed)"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is already a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Generator"
                    },
                    {
                      "type": "text",
                      "value": " instance, then the provided instance is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "seed",
              "type": "Param",
              "type_": "{None, int, `numpy.random.Generator`}, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A generic Quasi-Monte Carlo sampler class meant for subclassing."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "To create a random sampler based on ``np.random.random``, we would do the\nfollowing:"
      },
      {
        "type": "code",
        "value": "from scipy.stats import qmc\nclass RandomEngine(qmc.QMCEngine):\n    def __init__(self, d, seed=None):\n        super().__init__(d=d, seed=seed)"
      },
      {
        "type": "text",
        "value": "After subclassing `QMCEngine` to define the sampling strategy we want to\nuse, we can create an instance to sample from."
      },
      {
        "type": "code",
        "value": ">>> engine = RandomEngine(2)\n>>> engine.random(5)"
      },
      {
        "type": "text",
        "value": "We can also reset the state of the generator and resample again."
      },
      {
        "type": "code",
        "value": ">>> _ = engine.reset()\n>>> engine.random(5)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/stats/_qmc.py",
  "item_line": 604,
  "item_type": "<class 'abc.ABCMeta'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Notes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}