{
  "aliases": [
    "scipy.stats._qmc.Sobol"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Sobol' sequences are low-discrepancy, quasi-random numbers. Points can be drawn using two methods:"
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "scipy",
                        "path": "scipy.stats._qmc:Sobol.random_base2",
                        "type": "RefInfo",
                        "version": "1.10.1"
                      },
                      "type": "Link",
                      "value": "random_base2"
                    },
                    {
                      "type": "text",
                      "value": ": safely draw "
                    },
                    {
                      "type": "inlineMath",
                      "value": "n=2^m"
                    },
                    {
                      "type": "text",
                      "value": " points. This method   guarantees the balance properties of the sequence."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "random",
                        "path": "random",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "random"
                    },
                    {
                      "type": "text",
                      "value": ": draw an arbitrary number of points from the   sequence. See warning below."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "spread": false,
              "type": "listItem"
            }
          ],
          "ordered": false,
          "spread": false,
          "start": 1,
          "type": "list"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Sobol' sequences  provide "
            },
            {
              "type": "inlineMath",
              "value": "n=2^m"
            },
            {
              "type": "text",
              "value": " low discrepancy points in "
            },
            {
              "type": "inlineMath",
              "value": "[0,1)^{d}"
            },
            {
              "type": "text",
              "value": ". Scrambling them  makes them suitable for singular integrands, provides a means of error estimation, and can improve their rate of convergence. The scrambling strategy which is implemented is a (left) linear matrix scramble (LMS) followed by a digital random shift (LMS+shift) ."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "There are many versions of Sobol' sequences depending on their 'direction numbers'. This code uses direction numbers from . Hence, the maximum number of dimension is 21201. The direction numbers have been precomputed with search criterion 6 and can be retrieved at https://web.maths.unsw.edu.au/~fkuo/sobol/."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "warning "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Sobol' sequences are a quadrature rule and they lose their balance properties if one uses a sample size that is not a power of 2, or skips the first point, or thins the sequence ."
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "If "
                },
                {
                  "domain": null,
                  "role": "math",
                  "type": "Directive",
                  "value": "n=2^m"
                },
                {
                  "type": "text",
                  "value": " points are not enough then one should take "
                },
                {
                  "domain": null,
                  "role": "math",
                  "type": "Directive",
                  "value": "2^M"
                },
                {
                  "type": "text",
                  "value": " points for "
                },
                {
                  "domain": null,
                  "role": "math",
                  "type": "Directive",
                  "value": "M>m"
                },
                {
                  "type": "text",
                  "value": ". When scrambling, the number R of independent replicates does not have to be a power of 2."
                }
              ],
              "type": "paragraph"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Sobol' sequences are generated to some number "
                },
                {
                  "domain": null,
                  "role": "math",
                  "type": "Directive",
                  "value": "B"
                },
                {
                  "type": "text",
                  "value": " of bits. After "
                },
                {
                  "domain": null,
                  "role": "math",
                  "type": "Directive",
                  "value": "2^B"
                },
                {
                  "type": "text",
                  "value": " points have been generated, the sequence would repeat. Hence, an error is raised. The number of bits can be controlled with the parameter "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "bits"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dimensionality of the sequence. Max dimensionality is 21201."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "d",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, use LMS+shift scrambling. Otherwise, no scrambling is done. Default is True."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "scramble",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Number of bits of the generator. Control the maximum number of points that can be generated, which is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "2**bits"
                    },
                    {
                      "type": "text",
                      "value": ". Maximal value is 64. It does not correspond to the return type, which is always "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.float64"
                    },
                    {
                      "type": "text",
                      "value": " to prevent points from repeating themselves. Default is None, which for backward compatibility, corresponds to 30."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.9.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "bits",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to use an optimization scheme to improve the quality after sampling. Note that this is a post-processing step that does not guarantee that all properties of the sample will be conserved. Default is None."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "random-cd"
                            },
                            {
                              "type": "text",
                              "value": ": random permutations of coordinates to lower the   centered discrepancy. The best sample based on the centered   discrepancy is constantly updated. Centered discrepancy-based   sampling shows better space-filling robustness toward 2D and 3D   subprojections compared to using other discrepancy measures."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "inlineCode",
                              "value": "lloyd"
                            },
                            {
                              "type": "text",
                              "value": ": Perturb samples using a modified Lloyd-Max algorithm.   The process converges to equally spaced samples."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "versionadded 1.10.0"
                        }
                      ],
                      "type": "admonitionTitle"
                    }
                  ],
                  "kind": "note",
                  "type": "admonition"
                }
              ],
              "param": "optimization",
              "type": "Param",
              "type_": "{None, \"random-cd\", \"lloyd\"}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is an int or None, a new "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy.random._generator",
                        "path": "numpy.random._generator:Generator",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.random.Generator"
                    },
                    {
                      "type": "text",
                      "value": " is created using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.random.default_rng(seed)"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "seed"
                    },
                    {
                      "type": "text",
                      "value": " is already a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Generator"
                    },
                    {
                      "type": "text",
                      "value": " instance, then the provided instance is used."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "seed",
              "type": "Param",
              "type_": "{None, int, `numpy.random.Generator`}, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Engine for generating (scrambled) Sobol' sequences."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Generate samples from a low discrepancy sequence of Sobol'."
      },
      {
        "type": "code",
        "value": "from scipy.stats import qmc\nsampler = qmc.Sobol(d=2, scramble=False)\nsample = sampler.random_base2(m=3)\nsample"
      },
      {
        "type": "text",
        "value": "Compute the quality of the sample using the discrepancy criterion."
      },
      {
        "type": "code",
        "value": "qmc.discrepancy(sample)"
      },
      {
        "type": "text",
        "value": "To continue an existing design, extra points can be obtained\nby calling again `random_base2`. Alternatively, you can skip some\npoints like:"
      },
      {
        "type": "code",
        "value": "_ = sampler.reset()\n_ = sampler.fast_forward(4)\nsample_continued = sampler.random_base2(m=2)\nsample_continued"
      },
      {
        "type": "text",
        "value": "Finally, samples can be scaled to bounds."
      },
      {
        "type": "code",
        "value": "l_bounds = [0, 2]\nu_bounds = [10, 5]\nqmc.scale(sample_continued, l_bounds, u_bounds)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/scipy/stats/_qmc.py",
  "item_line": 1301,
  "item_type": "<class 'abc.ABCMeta'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}