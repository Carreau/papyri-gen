{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Determine the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "MF"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " parameter (Method Flag) for the Fortran subroutine "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "dvode"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In the Fortran code, the legal values of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "MF"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "    10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25,     -11, -12, -14, -15, -21, -22, -24, -25"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "but this Python wrapper does not use negative values."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Returns"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "    mf  = 10*self.meth + miter"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "self.meth is the linear multistep method:",
                      "_number": 9,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    self.meth == 1:  method=\"adams\"",
                      "_number": 10,
                      "_offset": 4
                    },
                    {
                      "_line": "    self.meth == 2:  method=\"bdf\"",
                      "_number": 11,
                      "_offset": 4
                    },
                    {
                      "_line": "",
                      "_number": 12,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "self.meth is the linear multistep method:"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "self.meth == 1:  method=\"adams\" self.meth == 2:  method=\"bdf\" "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "miter is the correction iteration method:",
                      "_number": 13,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    miter == 0:  Functional iteraton; no Jacobian involved.",
                      "_number": 14,
                      "_offset": 4
                    },
                    {
                      "_line": "    miter == 1:  Chord iteration with user-supplied full Jacobian.",
                      "_number": 15,
                      "_offset": 4
                    },
                    {
                      "_line": "    miter == 2:  Chord iteration with internally computed full Jacobian.",
                      "_number": 16,
                      "_offset": 4
                    },
                    {
                      "_line": "    miter == 3:  Chord iteration with internally computed diagonal Jacobian.",
                      "_number": 17,
                      "_offset": 4
                    },
                    {
                      "_line": "    miter == 4:  Chord iteration with user-supplied banded Jacobian.",
                      "_number": 18,
                      "_offset": 4
                    },
                    {
                      "_line": "    miter == 5:  Chord iteration with internally computed banded Jacobian.",
                      "_number": 19,
                      "_offset": 4
                    },
                    {
                      "_line": "",
                      "_number": 20,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "miter is the correction iteration method:"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "miter == 0:  Functional iteraton; no Jacobian involved. miter == 1:  Chord iteration with user-supplied full Jacobian. miter == 2:  Chord iteration with internally computed full Jacobian. miter == 3:  Chord iteration with internally computed diagonal Jacobian. miter == 4:  Chord iteration with user-supplied banded Jacobian. miter == 5:  Chord iteration with internally computed banded Jacobian. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Side effects: If either self.mu or self.ml is not None and the other is None, then the one that is None is set to 0."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py",
  "item_line": 886,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.integrate._ode.vode._determine_mf_and_set_bands"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "_determine_mf_and_set_bands(self, has_jac)",
  "references": null,
  "arbitrary": []
}