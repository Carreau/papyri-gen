{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Converts complex eigenvalues "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "w"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and eigenvectors "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "v"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to real eigenvalues in a block diagonal form "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "wr"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and the associated real eigenvectors "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "vr"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", such that::"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                      "_number": 0,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    vr @ wr = X @ vr",
                      "_number": 0,
                      "_offset": 4
                    },
                    {
                      "_line": "",
                      "_number": 1,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "vr @ wr = X @ vr "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "continues to hold, where "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "X"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the original array for which "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "w"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "v"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are the eigenvalues and eigenvectors."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. versionadded:: 1.1.0",
                  "_number": 5,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "versionadded",
            "args0": [
              " 1.1.0"
            ],
            "inner": null
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "w",
            "type_": "(..., M) array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Complex or real eigenvalues, an array or stack of arrays"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Conjugate pairs must not be interleaved, else the wrong result will be produced. So "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "[1+1j,",
                          " ",
                          "1,",
                          " ",
                          "1-1j]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will give a correct result, but "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "[1+1j,",
                          " ",
                          "2+1j,",
                          " ",
                          "1-1j,",
                          " ",
                          "2-1j]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will not."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "v",
            "type_": "(..., M, M) array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Complex or real eigenvectors, a square array or stack of square arrays."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "wr",
            "type_": "(..., M, M) ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Real diagonal block form of eigenvalues"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "vr",
            "type_": "(..., M, M) ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Real eigenvectors associated with `"
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "wr"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "`"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "w"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "v"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " must be the eigenstructure for some *real* matrix "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "X"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". For example, obtained by "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "w,",
                    " ",
                    "v",
                    " ",
                    "=",
                    " ",
                    "scipy.linalg.eig(X)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "w,",
                    " ",
                    "v",
                    " ",
                    "=",
                    " ",
                    "numpy.linalg.eig(X)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " in which case "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "X"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " can also represent stacked arrays."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. versionadded:: 1.1.0",
                  "_number": 5,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "versionadded",
            "args0": [
              " 1.1.0"
            ],
            "inner": null
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "eig",
    "numpy",
    "numpy.array",
    "numpy.ndarray",
    "rsf2csf",
    "scipy",
    "scipy.linalg",
    "scipy.linalg.decomp.cdf2rdf",
    "scipy.linalg.decomp.eig"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/linalg/decomp.py",
  "item_line": 1436,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.linalg.cdf2rdf"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "X",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "X",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([[ 1,  2,  3],\n       [ 0,  4,  5],\n       [ 0, -5,  4]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "linalg",
              "scipy.linalg",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "w",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "v",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "linalg",
              "scipy.linalg",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "eig",
              "scipy.linalg.decomp.eig",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "X",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "w",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([ 1.+0.j,  4.+5.j,  4.-5.j])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "v",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([[ 1.00000+0.j     , -0.01906-0.40016j, -0.01906+0.40016j],\n       [ 0.00000+0.j     ,  0.00000-0.64788j,  0.00000+0.64788j],\n       [ 0.00000+0.j     ,  0.64788+0.j     ,  0.64788-0.j     ]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "wr",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "vr",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "linalg",
              "scipy.linalg",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "cdf2rdf",
              "scipy.linalg.decomp.cdf2rdf",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "w",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "v",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "wr",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([[ 1.,  0.,  0.],\n       [ 0.,  4.,  5.],\n       [ 0., -5.,  4.]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "vr",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([[ 1.     ,  0.40016, -0.01906],\n       [ 0.     ,  0.64788,  0.     ],\n       [ 0.     ,  0.     ,  0.64788]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "vr",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "@",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "wr",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([[ 1.     ,  1.69593,  1.9246 ],\n       [ 0.     ,  2.59153,  3.23942],\n       [ 0.     , -3.23942,  2.59153]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "X",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "@",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "vr",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([[ 1.     ,  1.69593,  1.9246 ],\n       [ 0.     ,  2.59153,  3.23942],\n       [ 0.     , -3.23942,  2.59153]])",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "eig",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Eigenvalues and right eigenvectors for non-symmetric arrays"
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "rsf2csf",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Convert real Schur form to complex Schur form"
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "signature": "cdf2rdf(w, v)",
  "references": null,
  "arbitrary": []
}