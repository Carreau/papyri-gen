{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Compute Schur decomposition of a matrix."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The Schur decomposition is::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    A = Z T Z^H",
                  "_number": 2,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 3,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "where Z is unitary and T is either upper-triangular, or for real Schur decomposition (output='real'), quasi-upper triangular. In the quasi-triangular form, 2x2 blocks describing complex-valued eigenvalue pairs may extrude from the diagonal."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "a",
            "type_": "(M, M) array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Matrix to decompose"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "output",
            "type_": "{'real', 'complex'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Construct the real or complex Schur decomposition (for real matrices)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "lwork",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Work array size. If None or -1, it is automatically computed."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "overwrite_a",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether to overwrite data in a (may improve performance)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "sort",
            "type_": "{None, callable, 'lhp', 'rhp', 'iuc', 'ouc'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Specifies whether the upper eigenvalues should be sorted. A callable may be passed that, given a eigenvalue, returns a boolean denoting whether the eigenvalue should be sorted to the top-left (True). Alternatively, string parameters may be used::"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "    'lhp'   Left-hand plane (x.real < 0.0)",
                        "_number": 5,
                        "_offset": 4
                      },
                      {
                        "_line": "    'rhp'   Right-hand plane (x.real > 0.0)",
                        "_number": 6,
                        "_offset": 4
                      },
                      {
                        "_line": "    'iuc'   Inside the unit circle (x*x.conjugate() <= 1.0)",
                        "_number": 7,
                        "_offset": 4
                      },
                      {
                        "_line": "    'ouc'   Outside the unit circle (x*x.conjugate() > 1.0)",
                        "_number": 8,
                        "_offset": 4
                      },
                      {
                        "_line": "",
                        "_number": 9,
                        "_offset": 4
                      }
                    ]
                  }
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Defaults to None (no sorting)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "check_finite",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether to check that the input matrix contains only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "T",
            "type_": "(M, M) ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Schur form of A. It is real-valued for the real Schur decomposition."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "Z",
            "type_": "(M, M) ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "An unitary Schur transformation matrix for A. It is real-valued for the real Schur decomposition."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "sdim",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If and only if sorting was requested, a third return value will contain the number of eigenvalues satisfying the sort condition."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "LinAlgError",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Error raised under three conditions:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "1. The algorithm failed due to a failure of the QR algorithm to",
                            "_number": 2,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "   compute all eigenvalues.",
                            "_number": 3,
                            "_offset": 3
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "1. The algorithm failed due to a failure of the QR algorithm to"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "compute all eigenvalues."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "2. If eigenvalue sorting was requested, the eigenvalues could not be",
                            "_number": 4,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "   reordered due to a failure to separate eigenvalues, usually because",
                            "_number": 5,
                            "_offset": 3
                          },
                          {
                            "_line": "   of poor conditioning.",
                            "_number": 6,
                            "_offset": 3
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "2. If eigenvalue sorting was requested, the eigenvalues could not be"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "reordered due to a failure to separate eigenvalues, usually because of poor conditioning."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "3. If eigenvalue sorting was requested, roundoff errors caused the",
                            "_number": 7,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "   leading eigenvalues to no longer satisfy the sorting condition.",
                            "_number": 8,
                            "_offset": 3
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "3. If eigenvalue sorting was requested, roundoff errors caused the"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "leading eigenvalues to no longer satisfy the sorting condition."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "rsf2csf"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/linalg/decomp_schur.py",
  "item_line": 17,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.linalg.schur"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "linalg",
              "",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "schur",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "eigvals",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "A",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "T",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Z",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "schur",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "A",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "T",
              "",
              ""
            ]
          ],
          "out": "array([[ 2.65896708,  1.42440458, -1.92933439],\n       [ 0.        , -0.32948354, -0.49063704],\n       [ 0.        ,  1.31178921, -0.32948354]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "Z",
              "",
              ""
            ]
          ],
          "out": "array([[0.72711591, -0.60156188, 0.33079564],\n       [0.52839428, 0.79801892, 0.28976765],\n       [0.43829436, 0.03590414, -0.89811411]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "T2",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Z2",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "schur",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "A",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "output",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "complex",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "T2",
              "",
              ""
            ]
          ],
          "out": "array([[ 2.65896708, -1.22839825+1.32378589j,  0.42590089+1.51937378j],\n       [ 0.        , -0.32948354+0.80225456j, -0.59877807+0.56192146j],\n       [ 0.        ,  0.                    , -0.32948354-0.80225456j]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "eigvals",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "T2",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([2.65896708, -0.32948354+0.80225456j, -0.32948354-0.80225456j])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "An arbitrary custom eig-sorting condition, having positive imaginary part, which is satisfied by only one eigenvalue"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "T3",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Z3",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "sdim",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "schur",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "A",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "output",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "complex",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "sort",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "lambda",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "imag",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              ">",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "sdim",
              "",
              ""
            ]
          ],
          "out": "1",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "rsf2csf",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Convert real Schur form to complex Schur form"
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "signature": "schur(a, output='real', lwork=None, overwrite_a=False, sort=None, check_finite=True)",
  "references": null,
  "arbitrary": []
}