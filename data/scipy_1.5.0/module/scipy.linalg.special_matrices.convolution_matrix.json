{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Construct a convolution matrix."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Constructs the Toeplitz matrix representing one-dimensional convolution [1]_.  See the notes below for details."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "a",
            "type_": "(m,) array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The 1-D array to convolve."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "n",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The number of columns in the resulting matrix.  It gives the length of the input to be convolved with "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "a"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  This is analogous to the length of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "v"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " in "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "numpy.convolve(a,",
                          " ",
                          "v)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "mode",
            "type_": "str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This is analogous to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "mode"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " in "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "numpy.convolve(v,",
                          " ",
                          "a,",
                          " ",
                          "mode)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". It must be one of ('full', 'valid', 'same'). See below for how "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "mode"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " determines the shape of the result."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "A",
            "type_": "(k, n) ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The convolution matrix whose row count "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "k"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " depends on "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "mode"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "::"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "    =======  =========================",
                        "_number": 2,
                        "_offset": 4
                      },
                      {
                        "_line": "     mode    k",
                        "_number": 3,
                        "_offset": 4
                      },
                      {
                        "_line": "    =======  =========================",
                        "_number": 4,
                        "_offset": 4
                      },
                      {
                        "_line": "    'full'   m + n -1",
                        "_number": 5,
                        "_offset": 4
                      },
                      {
                        "_line": "    'same'   max(m, n)",
                        "_number": 6,
                        "_offset": 4
                      },
                      {
                        "_line": "    'valid'  max(m, n) - min(m, n) + 1",
                        "_number": 7,
                        "_offset": 4
                      },
                      {
                        "_line": "    =======  =========================",
                        "_number": 8,
                        "_offset": 4
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The code::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    A = convolution_matrix(a, n, mode)",
                  "_number": 2,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 3,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "creates a Toeplitz matrix "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "A"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " such that "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A",
                    " ",
                    "@",
                    " ",
                    "v"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is equivalent to using "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "convolve(a,",
                    " ",
                    "v,",
                    " ",
                    "mode)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ".  The returned array always has "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "n"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " columns.  The number of rows depends on the specified "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "mode"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", as explained above."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In the default 'full' mode, the entries of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "A"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are given by::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    A[i, j] == (a[i-j] if (0 <= (i-j) < m) else 0)",
                  "_number": 11,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 12,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "where "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "m",
                    " ",
                    "=",
                    " ",
                    "len(a)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ".  Suppose, for example, the input array is "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "[x,",
                    " ",
                    "y,",
                    " ",
                    "z]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ".  The convolution matrix has the form::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    [x, 0, 0, ..., 0, 0]",
                  "_number": 16,
                  "_offset": 4
                },
                {
                  "_line": "    [y, x, 0, ..., 0, 0]",
                  "_number": 17,
                  "_offset": 4
                },
                {
                  "_line": "    [z, y, x, ..., 0, 0]",
                  "_number": 18,
                  "_offset": 4
                },
                {
                  "_line": "    ...",
                  "_number": 19,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, 0, ..., x, 0]",
                  "_number": 20,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, 0, ..., y, x]",
                  "_number": 21,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, 0, ..., z, y]",
                  "_number": 22,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, 0, ..., 0, z]",
                  "_number": 23,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 24,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In 'valid' mode, the entries of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "A"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are given by::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    A[i, j] == (a[i-j+m-1] if (0 <= (i-j+m-1) < m) else 0)",
                  "_number": 27,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 28,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This corresponds to a matrix whose rows are the subset of those from the 'full' case where all the coefficients in "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "a"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are contained in the row.  For input "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "[x,",
                    " ",
                    "y,",
                    " ",
                    "z]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", this array looks like::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    [z, y, x, 0, 0, ..., 0, 0, 0]",
                  "_number": 33,
                  "_offset": 4
                },
                {
                  "_line": "    [0, z, y, x, 0, ..., 0, 0, 0]",
                  "_number": 34,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, z, y, x, ..., 0, 0, 0]",
                  "_number": 35,
                  "_offset": 4
                },
                {
                  "_line": "    ...",
                  "_number": 36,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, 0, 0, 0, ..., x, 0, 0]",
                  "_number": 37,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, 0, 0, 0, ..., y, x, 0]",
                  "_number": 38,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, 0, 0, 0, ..., z, y, x]",
                  "_number": 39,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 40,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In the 'same' mode, the entries of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "A"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are given by::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    d = (m - 1) // 2",
                  "_number": 43,
                  "_offset": 4
                },
                {
                  "_line": "    A[i, j] == (a[i-j+d] if (0 <= (i-j+d) < m) else 0)",
                  "_number": 44,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 45,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The typical application of the 'same' mode is when one has a signal of length "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "n"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " (with "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "n"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " greater than "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "len(a)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "), and the desired output is a filtered signal that is still of length "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "n"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For input "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "[x,",
                    " ",
                    "y,",
                    " ",
                    "z]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", this array looks like::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    [y, x, 0, 0, ..., 0, 0, 0]",
                  "_number": 52,
                  "_offset": 4
                },
                {
                  "_line": "    [z, y, x, 0, ..., 0, 0, 0]",
                  "_number": 53,
                  "_offset": 4
                },
                {
                  "_line": "    [0, z, y, x, ..., 0, 0, 0]",
                  "_number": 54,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, z, y, ..., 0, 0, 0]",
                  "_number": 55,
                  "_offset": 4
                },
                {
                  "_line": "    ...",
                  "_number": 56,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, 0, 0, ..., y, x, 0]",
                  "_number": 57,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, 0, 0, ..., z, y, x]",
                  "_number": 58,
                  "_offset": 4
                },
                {
                  "_line": "    [0, 0, 0, 0, ..., 0, z, y]",
                  "_number": 59,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 60,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. versionadded:: 1.5.0",
                  "_number": 61,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "versionadded",
            "args0": [
              " 1.5.0"
            ],
            "inner": null
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "numpy",
    "numpy.array",
    "numpy.convolve",
    "numpy.ndarray",
    "scipy",
    "scipy.linalg",
    "scipy.linalg.special_matrices.convolution_matrix",
    "toeplitz"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/linalg/special_matrices.py",
  "item_line": 1195,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.linalg.convolution_matrix"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "linalg",
              "scipy.linalg",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "convolution_matrix",
              "scipy.linalg.special_matrices.convolution_matrix",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "A",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "convolution_matrix",
              "scipy.linalg.special_matrices.convolution_matrix",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mode",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "same",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "A",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([[ 4, -1,  0,  0,  0],\n       [-2,  4, -1,  0,  0],\n       [ 0, -2,  4, -1,  0],\n       [ 0,  0, -2,  4, -1],\n       [ 0,  0,  0, -2,  4]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Compare multiplication by "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "A"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " with the use of "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "numpy.convolve"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": "."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "x",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "A",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "@",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([  2. ,   6. ,  -1. , -12.5,   8. ])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Verify that "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "A",
                  " ",
                  "@",
                  " ",
                  "x"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " produced the same result as applying the convolution function."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "convolve",
              "numpy.convolve",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mode",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "same",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([  2. ,   6. ,  -1. , -12.5,   8. ])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "For comparison to the case "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "mode='same'"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " shown above, here are the matrices produced by "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "mode='full'"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " and "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "mode='valid'"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " for the same coefficients and size."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "convolution_matrix",
              "scipy.linalg.special_matrices.convolution_matrix",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mode",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "full",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([[-1,  0,  0,  0,  0],\n       [ 4, -1,  0,  0,  0],\n       [-2,  4, -1,  0,  0],\n       [ 0, -2,  4, -1,  0],\n       [ 0,  0, -2,  4, -1],\n       [ 0,  0,  0, -2,  4],\n       [ 0,  0,  0,  0, -2]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "convolution_matrix",
              "scipy.linalg.special_matrices.convolution_matrix",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mode",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "valid",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([[-2,  4, -1,  0,  0],\n       [ 0, -2,  4, -1,  0],\n       [ 0,  0, -2,  4, -1]])",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "toeplitz",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Toeplitz matrix"
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "signature": "convolution_matrix(a, n, mode='full')",
  "references": [
    ".. [1] \"Convolution\", https://en.wikipedia.org/wiki/Convolution"
  ],
  "arbitrary": []
}