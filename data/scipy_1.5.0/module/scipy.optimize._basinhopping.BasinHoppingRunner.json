{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This class implements the core of the basinhopping algorithm."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "x0 : ndarray",
                      "_number": 0,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    The starting coordinates.",
                      "_number": 1,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "x0 : ndarray"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "The starting coordinates."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "minimizer : callable",
                      "_number": 2,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    The local minimizer, with signature ``result = minimizer(x)``.",
                      "_number": 3,
                      "_offset": 4
                    },
                    {
                      "_line": "    The return value is an `optimize.OptimizeResult` object.",
                      "_number": 4,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "minimizer : callable"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "The local minimizer, with signature "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "result",
                              " ",
                              "=",
                              " ",
                              "minimizer(x)"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". The return value is an "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "optimize.OptimizeResult"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " object."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "step_taking : callable",
                      "_number": 5,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    This function displaces the coordinates randomly. Signature should",
                      "_number": 6,
                      "_offset": 4
                    },
                    {
                      "_line": "    be ``x_new = step_taking(x)``. Note that `x` may be modified in-place.",
                      "_number": 7,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "step_taking : callable"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "This function displaces the coordinates randomly. Signature should be "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "x",
                              "_",
                              "new",
                              " ",
                              "=",
                              " ",
                              "step",
                              "_",
                              "taking(x)"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". Note that "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "x"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " may be modified in-place."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "accept_tests : list of callables",
                      "_number": 8,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    Each test is passed the kwargs `f_new`, `x_new`, `f_old` and",
                      "_number": 9,
                      "_offset": 4
                    },
                    {
                      "_line": "    `x_old`. These tests will be used to judge whether or not to accept",
                      "_number": 10,
                      "_offset": 4
                    },
                    {
                      "_line": "    the step. The acceptable return values are True, False, or ``\"force",
                      "_number": 11,
                      "_offset": 4
                    },
                    {
                      "_line": "    accept\"``. If any of the tests return False then the step is rejected.",
                      "_number": 12,
                      "_offset": 4
                    },
                    {
                      "_line": "    If ``\"force accept\"``, then this will override any other tests in",
                      "_number": 13,
                      "_offset": 4
                    },
                    {
                      "_line": "    order to accept the step. This can be used, for example, to forcefully",
                      "_number": 14,
                      "_offset": 4
                    },
                    {
                      "_line": "    escape from a local minimum that ``basinhopping`` is trapped in.",
                      "_number": 15,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "accept_tests : list of callables"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "Each test is passed the kwargs "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "f",
                              "_",
                              "new"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ", "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "x",
                              "_",
                              "new"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ", "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "f",
                              "_",
                              "old"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " and "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "x",
                              "_",
                              "old"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". These tests will be used to judge whether or not to accept the step. The acceptable return values are True, False, or "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "\"force",
                              " ",
                              "accept\""
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". If any of the tests return False then the step is rejected. If "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "\"force",
                              " ",
                              "accept\""
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ", then this will override any other tests in order to accept the step. This can be used, for example, to forcefully escape from a local minimum that "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "basinhopping"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " is trapped in."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "disp : bool, optional",
                      "_number": 16,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    Display status messages.",
                      "_number": 17,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "disp : bool, optional"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "Display status messages."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/optimize/_basinhopping.py",
  "item_line": 35,
  "item_type": "<class 'type'>",
  "aliases": [
    "scipy.optimize._basinhopping.BasinHoppingRunner"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "BasinHoppingRunner(x0, minimizer, step_taking, accept_tests, disp=False)",
  "references": null,
  "arbitrary": []
}