{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Find the global minimum of a function using the basin-hopping algorithm"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Basin-hopping is a two-phase method that combines a global stepping algorithm with local minimization at each step. Designed to mimic the natural process of energy minimization of clusters of atoms, it works well for similar problems with \"funnel-like, but rugged\" energy landscapes [5]_."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "As the step-taking, step acceptance, and minimization methods are all customizable, this function can also be used to implement other two-phase methods."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "func",
            "type_": "callable ``f(x, *args)``",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Function to be optimized.  "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "args"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can be passed as an optional item in the dict `"
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "minimizer",
                          "_",
                          "kwargs"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "`"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "x0",
            "type_": "array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Initial guess."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "niter",
            "type_": "integer, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The number of basin-hopping iterations"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "T",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The \"temperature\" parameter for the accept or reject criterion. Higher \"temperatures\" mean that larger jumps in function value will be accepted.  For best results "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "T"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " should be comparable to the separation (in function value) between local minima."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "stepsize",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum step size for use in the random displacement."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "minimizer_kwargs",
            "type_": "dict, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Extra keyword arguments to be passed to the local minimizer "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "scipy.optimize.minimize()"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " Some important options could be:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "    method : str",
                            "_number": 3,
                            "_offset": 4
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "        The minimization method (e.g. ``\"L-BFGS-B\"``)",
                            "_number": 4,
                            "_offset": 8
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "method : str"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "The minimization method (e.g. "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "\"L-BFGS-B\""
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ")"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "    args : tuple",
                            "_number": 5,
                            "_offset": 4
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "        Extra arguments passed to the objective function (``func``) and",
                            "_number": 6,
                            "_offset": 8
                          },
                          {
                            "_line": "        its derivatives (Jacobian, Hessian).",
                            "_number": 7,
                            "_offset": 8
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "args : tuple"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "Extra arguments passed to the objective function ("
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "func"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ") and its derivatives (Jacobian, Hessian)."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "take_step",
            "type_": "callable ``take_step(x)``, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Replace the default step-taking routine with this routine. The default step-taking routine is a random displacement of the coordinates, but other step-taking algorithms may be better for some systems. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "take",
                          "_",
                          "step"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can optionally have the attribute "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "take",
                          "_",
                          "step.stepsize"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If this attribute exists, then "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "basinhopping"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will adjust "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "take",
                          "_",
                          "step.stepsize"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " in order to try to optimize the global minimum search."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "accept_test",
            "type_": "callable, ``accept_test(f_new=f_new, x_new=x_new, f_old=fold, x_old=x_old)``, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Define a test which will be used to judge whether or not to accept the step.  This will be used in addition to the Metropolis test based on \"temperature\" "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "T"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  The acceptable return values are True, False, or "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "\"force",
                          " ",
                          "accept\""
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If any of the tests return False then the step is rejected. If the latter, then this will override any other tests in order to accept the step. This can be used, for example, to forcefully escape from a local minimum that "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "basinhopping"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is trapped in."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "callback",
            "type_": "callable, ``callback(x, f, accept)``, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A callback function which will be called for all minima found. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "f"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are the coordinates and function value of the trial minimum, and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "accept"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is whether or not that minimum was accepted. This can be used, for example, to save the lowest N minima found. Also, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "callback"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can be used to specify a user defined stop criterion by optionally returning True to stop the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "basinhopping"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " routine."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "interval",
            "type_": "integer, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "interval for how often to update the `"
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "stepsize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "`"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "disp",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Set to True to print status messages"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "niter_success",
            "type_": "integer, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Stop the run if the global minimum candidate remains the same for this number of iterations."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "seed",
            "type_": "{int, `~np.random.RandomState`, `~np.random.Generator`}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "seed"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is not specified the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~np.random.RandomState"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " singleton is used. If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "seed"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is an int, a new "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "RandomState"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance is used, seeded with seed. If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "seed"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is already a "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "RandomState"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Generator"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance, then that object is used. Specify "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "seed"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for repeatable minimizations. The random numbers generated with this seed only affect the default Metropolis "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "accept",
                          "_",
                          "test"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and the default "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "take",
                          "_",
                          "step"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If you supply your own "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "take",
                          "_",
                          "step"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "accept",
                          "_",
                          "test"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", and these functions use random number generation, then those functions are responsible for the state of their random number generator."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "res",
            "type_": "OptimizeResult",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The optimization result represented as a "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "OptimizeResult"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " object. Important attributes are: "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the solution array, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "fun"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the value of the function at the solution, and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "message"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " which describes the cause of the termination. The "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "OptimizeResult"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " object returned by the selected minimizer at the lowest minimum is also contained within this object and can be accessed through the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "lowest",
                          "_",
                          "optimization",
                          "_",
                          "result"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " attribute.  See "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "OptimizeResult"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for a description of other attributes."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Basin-hopping is a stochastic algorithm which attempts to find the global minimum of a smooth scalar function of one or more variables [1]_ [2]_ [3]_ [4]_. The algorithm in its current form was described by David Wales and Jonathan Doye [2]_ http://www-wales.ch.cam.ac.uk/."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The algorithm is iterative with each cycle composed of the following features"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "1) random perturbation of the coordinates"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "2) local minimization"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "3) accept or reject the new coordinates based on the minimized function",
                      "_number": 12,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "   value",
                      "_number": 13,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 14,
                      "_offset": 3
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "3) accept or reject the new coordinates based on the minimized function"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "value "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The acceptance test used here is the Metropolis criterion of standard Monte Carlo algorithms, although there are many other possibilities [3]_."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This global minimization method has been shown to be extremely efficient for a wide variety of problems in physics and chemistry. It is particularly useful when the function has many minima separated by large barriers. See the Cambridge Cluster Database http://www-wales.ch.cam.ac.uk/CCD.html for databases of molecular systems that have been optimized primarily using basin-hopping. This database includes minimization problems exceeding 300 degrees of freedom."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "See the free software program GMIN (http://www-wales.ch.cam.ac.uk/GMIN) for a Fortran implementation of basin-hopping. This implementation has many different variations of the procedure described above, including more advanced step taking algorithms and alternate acceptance criterion."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For stochastic global optimization there is no way to determine if the true global minimum has actually been found. Instead, as a consistency check, the algorithm can be run from a number of different random starting points to ensure the lowest minimum found in each example has converged to the global minimum. For this reason, "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "basinhopping"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " will by default simply run for the number of iterations "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "niter"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and return the lowest minimum found. It is left to the user to ensure that this is in fact the global minimum."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Choosing "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "stepsize"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ":  This is a crucial parameter in "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "basinhopping"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and depends on the problem being solved. The step is chosen uniformly in the region from x0-stepsize to x0+stepsize, in each dimension. Ideally, it should be comparable to the typical separation (in argument values) between local minima of the function being optimized. "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "basinhopping"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " will, by default, adjust "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "stepsize"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to find an optimal value, but this may take many iterations. You will get quicker results if you set a sensible initial value for "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "stepsize"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Choosing "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "T"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ": The parameter "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "T"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the \"temperature\" used in the Metropolis criterion. Basinhopping steps are always accepted if "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "func(xnew)",
                    " ",
                    "<",
                    " ",
                    "func(xold)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". Otherwise, they are accepted with probability::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    exp( -(func(xnew) - func(xold)) / T )",
                  "_number": 54,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 55,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "So, for best results, "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "T"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " should to be comparable to the typical difference (in function values) between local minima. (The height of \"walls\" between local minima is irrelevant.)"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "T"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is 0, the algorithm becomes Monotonic Basin-Hopping, in which all steps that increase energy are rejected."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. versionadded:: 0.12.0",
                  "_number": 63,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "versionadded",
            "args0": [
              " 0.12.0"
            ],
            "inner": null
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "minimize"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/optimize/_basinhopping.py",
  "item_line": 334,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.optimize.basinhopping"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "The following example is a 1-D minimization problem, with many local minima superimposed on a parabola."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "optimize",
              "",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "func",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lambda",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "cos",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "14.5",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.3",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.2",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x0",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1.0",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Basinhopping, internally, uses a local minimization algorithm. We will use the parameter "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "minimizer",
                  "_",
                  "kwargs"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " to tell basinhopping which algorithm to use and how to set up that minimizer. This parameter will be passed to "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "scipy.optimize.minimize()"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": "."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "method",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "BFGS",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "}",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x0",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "niter",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "200",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "global minimum: x = ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              ", f(x0) = ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fun",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "global minimum: x = -0.1951, f(x0) = -1.0009",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Next consider a 2-D minimization problem. Also, this time, we will use gradient information to significantly speed up the search."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "func2d",
              "",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "f",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "cos",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "14.5",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.3",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.2",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.2",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "df",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "zeros",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "df",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "14.5",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "sin",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "14.5",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.3",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2.0",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.2",
              "",
              "mf"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "df",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2.0",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.2",
              "",
              "mf"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "f",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "df",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "We'll also use a different local minimization algorithm. Also, we must tell the minimizer that our function returns both energy and gradient (Jacobian)."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "method",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "L-BFGS-B",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "jac",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "True",
              "",
              "kc"
            ],
            [
              "}",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x0",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1.0",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1.0",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func2d",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x0",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "niter",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "200",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "global minimum: x = [",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              ", ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              "], f(x0) = ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fun",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "global minimum: x = [-0.1951, -0.1000], f(x0) = -1.0109",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Here is an example using a custom step-taking routine. Imagine you want the first coordinate to take larger steps than the rest of the coordinates. This can be implemented like so:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "class",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "MyTakeStep",
              "",
              "nc"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "object",
              "",
              "nb"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "__init__",
              "",
              "fm"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "stepsize",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "stepsize",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "stepsize",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "__call__",
              "",
              "fm"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "s",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "stepsize",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "uniform",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "2.0",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "s",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2.0",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "s",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "uniform",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "s",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "s",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "shape",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "return",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Since "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "MyTakeStep.stepsize"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " exists basinhopping will adjust the magnitude of "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "stepsize"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " to optimize the search. We'll use the same 2-D function as before"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "mytakestep",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "MyTakeStep",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "func2d",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x0",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "niter",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "200",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "take_step",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "mytakestep",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "global minimum: x = [",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              ", ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              "], f(x0) = ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fun",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "global minimum: x = [-0.1951, -0.1000], f(x0) = -1.0109",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Now, let's do an example using a custom callback function which prints the value of every minimum found"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "print_fun",
              "",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "f",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "accepted",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "print",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "at minimum ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              " accepted ",
              "",
              "s2"
            ],
            [
              "%d",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "f",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "int",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "accepted",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "We'll run it for only 10 basinhopping steps this time."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "seed",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "func2d",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x0",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "niter",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "callback",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "print_fun",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "at minimum 0.4159 accepted 1\nat minimum -0.9073 accepted 1\nat minimum -0.1021 accepted 1\nat minimum -0.1021 accepted 1\nat minimum 0.9102 accepted 1\nat minimum 0.9102 accepted 1\nat minimum 2.2945 accepted 0\nat minimum -0.1021 accepted 1\nat minimum -1.0109 accepted 1\nat minimum -1.0109 accepted 1",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "The minimum at -1.0109 is actually the global minimum, found already on the 8th iteration."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Now let's implement bounds on the problem using a custom "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "accept",
                  "_",
                  "test"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ":"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "class",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "MyBounds",
              "",
              "nc"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "object",
              "",
              "nb"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "__init__",
              "",
              "fm"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "xmax",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1.1",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1.1",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "xmin",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1.1",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1.1",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "xmax",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "xmax",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "xmin",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "xmin",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "__call__",
              "",
              "fm"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "kwargs",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "kwargs",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "x_new",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "tmax",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bool",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "all",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "<",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "xmax",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "tmin",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bool",
              "",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "all",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              ">",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "xmin",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "return",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "tmax",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "and",
              "",
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "tmin",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "mybounds",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "MyBounds",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "func2d",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x0",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "minimizer_kwargs",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "niter",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "accept_test",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "mybounds",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "minimize",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "The local minimization function called once for each basinhopping step. "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "minimizer",
                  "_",
                  "kwargs"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " is passed to this routine."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "signature": "basinhopping(func, x0, niter=100, T=1.0, stepsize=0.5, minimizer_kwargs=None, take_step=None, accept_test=None, callback=None, interval=50, disp=False, niter_success=None, seed=None)",
  "references": [
    ".. [1] Wales, David J. 2003, Energy Landscapes, Cambridge University Press,",
    "    Cambridge, UK.",
    ".. [2] Wales, D J, and Doye J P K, Global Optimization by Basin-Hopping and",
    "    the Lowest Energy Structures of Lennard-Jones Clusters Containing up to",
    "    110 Atoms.  Journal of Physical Chemistry A, 1997, 101, 5111.",
    ".. [3] Li, Z. and Scheraga, H. A., Monte Carlo-minimization approach to the",
    "    multiple-minima problem in protein folding, Proc. Natl. Acad. Sci. USA,",
    "    1987, 84, 6611.",
    ".. [4] Wales, D. J. and Scheraga, H. A., Global optimization of clusters,",
    "    crystals, and biomolecules, Science, 1999, 285, 1368.",
    ".. [5] Olson, B., Hashmi, I., Molloy, K., and Shehu1, A., Basin Hopping as",
    "    a General and Versatile Optimization Framework for the Characterization",
    "    of Biological Macromolecules, Advances in Artificial Intelligence,",
    "    Volume 2012 (2012), Article ID 674832, :doi:`10.1155/2012/674832`"
  ],
  "arbitrary": []
}