{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Solve a nonlinear least-squares problem with bounds on the variables."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Given the residuals f(x) (an m-D real function of n real variables) and the loss function rho(s) (a scalar function), "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "least",
                    "_",
                    "squares"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " finds a local minimum of the cost function F(x)::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    minimize F(x) = 0.5 * sum(rho(f_i(x)**2), i = 0, ..., m - 1)",
                  "_number": 4,
                  "_offset": 4
                },
                {
                  "_line": "    subject to lb <= x <= ub",
                  "_number": 5,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 6,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The purpose of the loss function rho(s) is to reduce the influence of outliers on the solution."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "fun",
            "type_": "callable",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Function which computes the vector of residuals, with the signature "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "fun(x,",
                          " ",
                          "*",
                          "args,",
                          " ",
                          "*",
                          "*",
                          "kwargs)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", i.e., the minimization proceeds with respect to its first argument. The argument "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " passed to this function is an ndarray of shape (n,) (never a scalar, even for n=1). It must allocate and return a 1-D array_like of shape (m,) or a scalar. If the argument "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is complex or the function "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "fun"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " returns complex residuals, it must be wrapped in a real function of real arguments, as shown at the end of the Examples section."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "x0",
            "type_": "array_like with shape (n,) or float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Initial guess on independent variables. If float, it will be treated as a 1-D array with one element."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "jac",
            "type_": "{'2-point', '3-point', 'cs', callable}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Method of computing the Jacobian matrix (an m-by-n matrix, where element (i, j) is the partial derivative of f[i] with respect to x[j]). The keywords select a finite difference scheme for numerical estimation. The scheme '3-point' is more accurate, but requires twice as many operations as '2-point' (default). The scheme 'cs' uses complex steps, and while potentially the most accurate, it is applicable only when "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "fun"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " correctly handles complex inputs and can be analytically continued to the complex plane. Method 'lm' always uses the '2-point' scheme. If callable, it is used as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "jac(x,",
                          " ",
                          "*",
                          "args,",
                          " ",
                          "*",
                          "*",
                          "kwargs)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and should return a good approximation (or the exact value) for the Jacobian as an array_like (np.atleast_2d is applied), a sparse matrix or a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "scipy.sparse.linalg.LinearOperator"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "bounds",
            "type_": "2-tuple of array_like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Lower and upper bounds on independent variables. Defaults to no bounds. Each array must match the size of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "x0"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or be a scalar, in the latter case a bound will be the same for all variables. Use "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "np.inf"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " with an appropriate sign to disable bounds on all or some variables."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "method",
            "type_": "{'trf', 'dogbox', 'lm'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Algorithm to perform minimization."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "    * 'trf' : Trust Region Reflective algorithm, particularly suitable",
                            "_number": 2,
                            "_offset": 4
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "      for large sparse problems with bounds. Generally robust method.",
                            "_number": 3,
                            "_offset": 6
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "* 'trf' : Trust Region Reflective algorithm, particularly suitable"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "for large sparse problems with bounds. Generally robust method."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "    * 'dogbox' : dogleg algorithm with rectangular trust regions,",
                            "_number": 4,
                            "_offset": 4
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "      typical use case is small problems with bounds. Not recommended",
                            "_number": 5,
                            "_offset": 6
                          },
                          {
                            "_line": "      for problems with rank-deficient Jacobian.",
                            "_number": 6,
                            "_offset": 6
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "* 'dogbox' : dogleg algorithm with rectangular trust regions,"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "typical use case is small problems with bounds. Not recommended for problems with rank-deficient Jacobian."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "    * 'lm' : Levenberg-Marquardt algorithm as implemented in MINPACK.",
                            "_number": 7,
                            "_offset": 4
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "      Doesn't handle bounds and sparse Jacobians. Usually the most",
                            "_number": 8,
                            "_offset": 6
                          },
                          {
                            "_line": "      efficient method for small unconstrained problems.",
                            "_number": 9,
                            "_offset": 6
                          },
                          {
                            "_line": "",
                            "_number": 10,
                            "_offset": 6
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "* 'lm' : Levenberg-Marquardt algorithm as implemented in MINPACK."
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "Doesn't handle bounds and sparse Jacobians. Usually the most efficient method for small unconstrained problems. "
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Default is 'trf'. See Notes for more information."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "ftol",
            "type_": "float or None, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Tolerance for termination by the change of the cost function. Default is 1e-8. The optimization process is stopped when "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "dF",
                          " ",
                          "<",
                          " ",
                          "ftol",
                          " ",
                          "*",
                          " ",
                          "F"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", and there was an adequate agreement between a local quadratic model and the true model in the last step. If None, the termination by this condition is disabled."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "xtol",
            "type_": "float or None, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Tolerance for termination by the change of the independent variables. Default is 1e-8. The exact condition depends on the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "method"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " used:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * For 'trf' and 'dogbox' : "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "norm(dx)",
                          " ",
                          "<",
                          " ",
                          "xtol",
                          " ",
                          "*",
                          " ",
                          "(xtol",
                          " ",
                          "+",
                          " ",
                          "norm(x))"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".     * For 'lm' : "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Delta",
                          " ",
                          "<",
                          " ",
                          "xtol",
                          " ",
                          "*",
                          " ",
                          "norm(xs)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", where "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Delta"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "      a trust-region radius and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "xs"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the value of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "       scaled according to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "x",
                          "_",
                          "scale"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " parameter (see below)."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If None, the termination by this condition is disabled."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "gtol",
            "type_": "float or None, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Tolerance for termination by the norm of the gradient. Default is 1e-8. The exact condition depends on a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "method"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " used:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * For 'trf' : "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "norm(g",
                          "_",
                          "scaled,",
                          " ",
                          "ord=np.inf)",
                          " ",
                          "<",
                          " ",
                          "gtol"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", where"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "      "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "g",
                          "_",
                          "scaled"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the value of the gradient scaled to account for       the presence of the bounds [STIR]_."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * For 'dogbox' : "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "norm(g",
                          "_",
                          "free,",
                          " ",
                          "ord=np.inf)",
                          " ",
                          "<",
                          " ",
                          "gtol"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", where"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "      "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "g",
                          "_",
                          "free"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the gradient with respect to the variables which       are not in the optimal state on the boundary."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "    * For 'lm' : the maximum absolute value of the cosine of angles",
                            "_number": 9,
                            "_offset": 4
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "      between columns of the Jacobian and the residual vector is less",
                            "_number": 10,
                            "_offset": 6
                          },
                          {
                            "_line": "      than `gtol`, or the residual vector is zero.",
                            "_number": 11,
                            "_offset": 6
                          },
                          {
                            "_line": "",
                            "_number": 12,
                            "_offset": 6
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "* For 'lm' : the maximum absolute value of the cosine of angles"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "between columns of the Jacobian and the residual vector is less than "
                                }
                              },
                              {
                                "type": "Directive",
                                "data": {
                                  "value": [
                                    "gtol"
                                  ],
                                  "domain": null,
                                  "role": null
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ", or the residual vector is zero. "
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If None, the termination by this condition is disabled."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "x_scale",
            "type_": "array_like or 'jac', optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Characteristic scale of each variable. Setting "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "x",
                          "_",
                          "scale"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is equivalent to reformulating the problem in scaled variables "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "xs",
                          " ",
                          "=",
                          " ",
                          "x",
                          " ",
                          "/",
                          " ",
                          "x",
                          "_",
                          "scale"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". An alternative view is that the size of a trust region along jth dimension is proportional to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x",
                          "_",
                          "scale[j]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Improved convergence may be achieved by setting "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "x",
                          "_",
                          "scale"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " such that a step of a given size along any of the scaled variables has a similar effect on the cost function. If set to 'jac', the scale is iteratively updated using the inverse norms of the columns of the Jacobian matrix (as described in [JJMore]_)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "loss",
            "type_": "str or callable, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the loss function. The following keyword values are allowed:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * 'linear' (default) : "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "rho(z)",
                          " ",
                          "=",
                          " ",
                          "z"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Gives a standard"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "      least-squares problem."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * 'soft_l1' : "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "rho(z)",
                          " ",
                          "=",
                          " ",
                          "2",
                          " ",
                          "*",
                          " ",
                          "((1",
                          " ",
                          "+",
                          " ",
                          "z)",
                          "*",
                          "*",
                          "0.5",
                          " ",
                          "-",
                          " ",
                          "1)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". The smooth"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "      approximation of l1 (absolute value) loss. Usually a good       choice for robust least squares."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * 'huber' : "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "rho(z)",
                          " ",
                          "=",
                          " ",
                          "z",
                          " ",
                          "if",
                          " ",
                          "z",
                          " ",
                          "<=",
                          " ",
                          "1",
                          " ",
                          "else",
                          " ",
                          "2",
                          "*",
                          "z",
                          "*",
                          "*",
                          "0.5",
                          " ",
                          "-",
                          " ",
                          "1"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Works"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "      similarly to 'soft_l1'."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * 'cauchy' : "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "rho(z)",
                          " ",
                          "=",
                          " ",
                          "ln(1",
                          " ",
                          "+",
                          " ",
                          "z)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Severely weakens outliers"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "      influence, but may cause difficulties in optimization process."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * 'arctan' : "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "rho(z)",
                          " ",
                          "=",
                          " ",
                          "arctan(z)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Limits a maximum loss on"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "      a single residual, has properties similar to 'cauchy'."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If callable, it must take a 1-D ndarray "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "z=f",
                          "*",
                          "*",
                          "2"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and return an array_like with shape (3, m) where row 0 contains function values, row 1 contains first derivatives and row 2 contains second derivatives. Method 'lm' supports only 'linear' loss."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "f_scale",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Value of soft margin between inlier and outlier residuals, default is 1.0. The loss function is evaluated as follows "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "rho",
                          "_",
                          "(f",
                          "*",
                          "*",
                          "2)",
                          " ",
                          "=",
                          " ",
                          "C",
                          "*",
                          "*",
                          "2",
                          " ",
                          "*",
                          " ",
                          "rho(f",
                          "*",
                          "*",
                          "2",
                          " ",
                          "/",
                          " ",
                          "C",
                          "*",
                          "*",
                          "2)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", where "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "C"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "f",
                          "_",
                          "scale"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "rho"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is determined by "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "loss"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " parameter. This parameter has no effect with "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "loss='linear'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", but for other "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "loss"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " values it is of crucial importance."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "max_nfev",
            "type_": "None or int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum number of function evaluations before the termination. If None (default), the value is chosen automatically:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * For 'trf' and 'dogbox' : 100 * n.     * For 'lm' :  100 * n if "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "jac"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is callable and 100 * n * (n + 1)"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "      otherwise (because 'lm' counts function calls in Jacobian       estimation)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "diff_step",
            "type_": "None or array_like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the relative step size for the finite difference approximation of the Jacobian. The actual step is computed as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x",
                          " ",
                          "*",
                          " ",
                          "diff",
                          "_",
                          "step"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If None (default), then "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "diff",
                          "_",
                          "step"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is taken to be a conventional \"optimal\" power of machine epsilon for the finite difference scheme used [NR]_."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "tr_solver",
            "type_": "{None, 'exact', 'lsmr'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Method for solving trust-region subproblems, relevant only for 'trf' and 'dogbox' methods."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "    * 'exact' is suitable for not very large problems with dense",
                            "_number": 3,
                            "_offset": 4
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "      Jacobian matrices. The computational complexity per iteration is",
                            "_number": 4,
                            "_offset": 6
                          },
                          {
                            "_line": "      comparable to a singular value decomposition of the Jacobian",
                            "_number": 5,
                            "_offset": 6
                          },
                          {
                            "_line": "      matrix.",
                            "_number": 6,
                            "_offset": 6
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "* 'exact' is suitable for not very large problems with dense"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "Jacobian matrices. The computational complexity per iteration is comparable to a singular value decomposition of the Jacobian matrix."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "    * 'lsmr' is suitable for problems with sparse and large Jacobian",
                            "_number": 7,
                            "_offset": 4
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "      matrices. It uses the iterative procedure",
                            "_number": 8,
                            "_offset": 6
                          },
                          {
                            "_line": "      `scipy.sparse.linalg.lsmr` for finding a solution of a linear",
                            "_number": 9,
                            "_offset": 6
                          },
                          {
                            "_line": "      least-squares problem and only requires matrix-vector product",
                            "_number": 10,
                            "_offset": 6
                          },
                          {
                            "_line": "      evaluations.",
                            "_number": 11,
                            "_offset": 6
                          },
                          {
                            "_line": "",
                            "_number": 12,
                            "_offset": 6
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "* 'lsmr' is suitable for problems with sparse and large Jacobian"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "matrices. It uses the iterative procedure "
                                }
                              },
                              {
                                "type": "Directive",
                                "data": {
                                  "value": [
                                    "scipy.sparse.linalg.lsmr"
                                  ],
                                  "domain": null,
                                  "role": null
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": " for finding a solution of a linear least-squares problem and only requires matrix-vector product evaluations. "
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If None (default), the solver is chosen based on the type of Jacobian returned on the first iteration."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "tr_options",
            "type_": "dict, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Keyword options passed to trust-region solver."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "tr",
                          "_",
                          "solver='exact'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "tr",
                          "_",
                          "options"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are ignored.     * "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "tr",
                          "_",
                          "solver='lsmr'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": options for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "scipy.sparse.linalg.lsmr"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "      Additionally,  "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "method='trf'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " supports  'regularize' option       (bool, default is True), which adds a regularization term to the       normal equation, which improves convergence if the Jacobian is       rank-deficient [Byrd]_ (eq. 3.4)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "jac_sparsity",
            "type_": "{None, array_like, sparse matrix}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Defines the sparsity structure of the Jacobian matrix for finite difference estimation, its shape must be (m, n). If the Jacobian has only few non-zero elements in *each* row, providing the sparsity structure will greatly speed up the computations [Curtis]_. A zero entry means that a corresponding element in the Jacobian is identically zero. If provided, forces the use of 'lsmr' trust-region solver. If None (default), then dense differencing will be used. Has no effect for 'lm' method."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "verbose",
            "type_": "{0, 1, 2}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Level of algorithm's verbosity:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * 0 (default) : work silently.     * 1 : display a termination report.     * 2 : display progress during iterations (not supported by 'lm'"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "      method)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "args, kwargs",
            "type_": "tuple and dict, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Additional arguments passed to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "fun"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "jac"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Both empty by default. The calling signature is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "fun(x,",
                          " ",
                          "*",
                          "args,",
                          " ",
                          "*",
                          "*",
                          "kwargs)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and the same for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "jac"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`OptimizeResult` with the following fields defined:",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "x",
            "type_": "ndarray, shape (n,)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Solution found."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "cost",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Value of the cost function at the solution."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "fun",
            "type_": "ndarray, shape (m,)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Vector of residuals at the solution."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "jac",
            "type_": "ndarray, sparse matrix or LinearOperator, shape (m, n)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Modified Jacobian matrix at the solution, in the sense that J^T J is a Gauss-Newton approximation of the Hessian of the cost function. The type is the same as the one used by the algorithm."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "grad",
            "type_": "ndarray, shape (m,)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Gradient of the cost function at the solution."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "optimality",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "First-order optimality measure. In unconstrained problems, it is always the uniform norm of the gradient. In constrained problems, it is the quantity which was compared with "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "gtol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " during iterations."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "active_mask",
            "type_": "ndarray of int, shape (n,)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Each component shows whether a corresponding constraint is active (that is, whether a variable is at the bound):"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    *  0 : a constraint is not active.     * -1 : a lower bound is active.     *  1 : an upper bound is active."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Might be somewhat arbitrary for 'trf' method as it generates a sequence of strictly feasible iterates and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "active",
                          "_",
                          "mask"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is determined within a tolerance threshold."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "nfev",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of function evaluations done. Methods 'trf' and 'dogbox' do not count function calls for numerical Jacobian approximation, as opposed to 'lm' method."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "njev",
            "type_": "int or None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of Jacobian evaluations done. If numerical Jacobian approximation is used in 'lm' method, it is set to None."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "status",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The reason for algorithm termination:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * -1 : improper input parameters status returned from MINPACK.     *  0 : the maximum number of function evaluations is exceeded.     *  1 : "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "gtol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " termination condition is satisfied.     *  2 : "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "ftol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " termination condition is satisfied.     *  3 : "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "xtol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " termination condition is satisfied.     *  4 : Both "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "ftol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "xtol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " termination conditions are satisfied."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "message",
            "type_": "str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Verbal description of the termination reason."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "success",
            "type_": "bool",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "True if one of the convergence criteria is satisfied ("
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "status"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " > 0)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Method 'lm' (Levenberg-Marquardt) calls a wrapper over least-squares algorithms implemented in MINPACK (lmder, lmdif). It runs the Levenberg-Marquardt algorithm formulated as a trust-region type algorithm. The implementation is based on paper [JJMore]_, it is very robust and efficient with a lot of smart tricks. It should be your first choice for unconstrained problems. Note that it doesn't support bounds. Also, it doesn't work when m < n."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Method 'trf' (Trust Region Reflective) is motivated by the process of solving a system of equations, which constitute the first-order optimality condition for a bound-constrained minimization problem as formulated in [STIR]_. The algorithm iteratively solves trust-region subproblems augmented by a special diagonal quadratic term and with trust-region shape determined by the distance from the bounds and the direction of the gradient. This enhancements help to avoid making steps directly into bounds and efficiently explore the whole space of variables. To further improve convergence, the algorithm considers search directions reflected from the bounds. To obey theoretical requirements, the algorithm keeps iterates strictly feasible. With dense Jacobians trust-region subproblems are solved by an exact method very similar to the one described in [JJMore]_ (and implemented in MINPACK). The difference from the MINPACK implementation is that a singular value decomposition of a Jacobian matrix is done once per iteration, instead of a QR decomposition and series of Givens rotation eliminations. For large sparse Jacobians a 2-D subspace approach of solving trust-region subproblems is used [STIR]_, [Byrd]_. The subspace is spanned by a scaled gradient and an approximate Gauss-Newton solution delivered by "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "scipy.sparse.linalg.lsmr"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". When no constraints are imposed the algorithm is very similar to MINPACK and has generally comparable performance. The algorithm works quite robust in unbounded and bounded problems, thus it is chosen as a default algorithm."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Method 'dogbox' operates in a trust-region framework, but considers rectangular trust regions as opposed to conventional ellipsoids [Voglis]_. The intersection of a current trust region and initial bounds is again rectangular, so on each iteration a quadratic minimization problem subject to bound constraints is solved approximately by Powell's dogleg method [NumOpt]_. The required Gauss-Newton step can be computed exactly for dense Jacobians or approximately by "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "scipy.sparse.linalg.lsmr"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " for large sparse Jacobians. The algorithm is likely to exhibit slow convergence when the rank of Jacobian is less than the number of variables. The algorithm often outperforms 'trf' in bounded problems with a small number of variables."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Robust loss functions are implemented as described in [BA]_. The idea is to modify a residual vector and a Jacobian matrix on each iteration such that computed gradient and Gauss-Newton Hessian approximation match the true gradient and Hessian approximation of the cost function. Then the algorithm proceeds in a normal way, i.e., robust loss functions are implemented as a simple wrapper over standard least-squares algorithms."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. versionadded:: 0.17.0",
                  "_number": 50,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "versionadded",
            "args0": [
              " 0.17.0"
            ],
            "inner": null
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "curve_fit",
    "leastsq"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py",
  "item_line": 240,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.optimize.least_squares"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "leastsq",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "A legacy wrapper for the MINPACK implementation of the Levenberg-Marquadt algorithm."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "curve_fit",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Least-squares minimization applied to a curve-fitting problem."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "signature": "least_squares(fun, x0, jac='2-point', bounds=(-inf, inf), method='trf', ftol=1e-08, xtol=1e-08, gtol=1e-08, x_scale=1.0, loss='linear', f_scale=1.0, diff_step=None, tr_solver=None, tr_options={}, jac_sparsity=None, max_nfev=None, verbose=0, args=(), kwargs={})",
  "references": [
    ".. [STIR] M. A. Branch, T. F. Coleman, and Y. Li, \"A Subspace, Interior,",
    "          and Conjugate Gradient Method for Large-Scale Bound-Constrained",
    "          Minimization Problems,\" SIAM Journal on Scientific Computing,",
    "          Vol. 21, Number 1, pp 1-23, 1999.",
    ".. [NR] William H. Press et. al., \"Numerical Recipes. The Art of Scientific",
    "        Computing. 3rd edition\", Sec. 5.7.",
    ".. [Byrd] R. H. Byrd, R. B. Schnabel and G. A. Shultz, \"Approximate",
    "          solution of the trust region problem by minimization over",
    "          two-dimensional subspaces\", Math. Programming, 40, pp. 247-263,",
    "          1988.",
    ".. [Curtis] A. Curtis, M. J. D. Powell, and J. Reid, \"On the estimation of",
    "            sparse Jacobian matrices\", Journal of the Institute of",
    "            Mathematics and its Applications, 13, pp. 117-120, 1974.",
    ".. [JJMore] J. J. More, \"The Levenberg-Marquardt Algorithm: Implementation",
    "            and Theory,\" Numerical Analysis, ed. G. A. Watson, Lecture",
    "            Notes in Mathematics 630, Springer Verlag, pp. 105-116, 1977.",
    ".. [Voglis] C. Voglis and I. E. Lagaris, \"A Rectangular Trust Region",
    "            Dogleg Approach for Unconstrained and Bound Constrained",
    "            Nonlinear Optimization\", WSEAS International Conference on",
    "            Applied Mathematics, Corfu, Greece, 2004.",
    ".. [NumOpt] J. Nocedal and S. J. Wright, \"Numerical optimization,",
    "            2nd edition\", Chapter 4.",
    ".. [BA] B. Triggs et. al., \"Bundle Adjustment - A Modern Synthesis\",",
    "        Proceedings of the International Workshop on Vision Algorithms:",
    "        Theory and Practice, pp. 298-372, 1999."
  ],
  "arbitrary": []
}