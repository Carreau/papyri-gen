{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Was not able to parse docstring for scipy.optimize"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/optimize/__init__.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "scipy.optimize"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": null,
  "references": null,
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "SciPy "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "optimize"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " provides functions for minimizing (or maximizing) objective functions, possibly subject to constraints. It includes solvers for nonlinear problems (with support for both local and global optimization algorithms), linear programing, constrained and nonlinear least - squares, root finding, and curve fitting. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Common functions and objects, shared across different solvers, are : "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Optimization and root finding (:mod:`scipy.optimize`)"
    },
    {
      "children": [],
      "title": "Optimization"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "minimize_scalar"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " function supports the following methods : "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Scalar functions optimization"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "minimize"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " function supports the following methods : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Constraints are passed to "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "minimize"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " function as a single object or as a list of objects from the following classes : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Simple bound constraints are handled separately and there is a special class for them : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Quasi - Newton strategies implementing "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "HessianUpdateStrategy"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " interface can be used to approximate the Hessian in "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "minimize"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " function (available only for the 'trust - constr' method). Available quasi - Newton methods implementing this interface are : "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Local (multivariate) optimization"
    },
    {
      "children": [],
      "title": "Global optimization"
    },
    {
      "children": [],
      "title": "Least-squares and curve fitting"
    },
    {
      "children": [],
      "title": "Nonlinear least-squares"
    },
    {
      "children": [],
      "title": "Linear least-squares"
    },
    {
      "children": [],
      "title": "Curve fitting"
    },
    {
      "children": [],
      "title": "Root finding"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "root_scalar"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " function supports the following methods : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The table below lists situations and appropriate methods, along with convergence rates per iteration (and per function evaluation) for successful convergence to a simple root (*). Bisection is the slowest of them all, adding one bit of accuracy for each function evaluation, but is guaranteed to converge. The other bracketing methods all (eventually) increase the number of accurate bits by about 50% for every function evaluation. The derivative - based methods, all built on "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "newton"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " , can converge quite quickly if the initial value is close to the root. They can also be applied to functions defined on (a subset of) the complex plane. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "+- - - - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - + | Domain of f | Bracket? | Derivatives? | Solvers | Convergence | + + + - - - - - - - - - - + - - - - - - - - - - - + + - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - + | | | "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "fprime"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " | "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "fprime2"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " | | Guaranteed? | Rate (s) (*) | +=============+==========+==========+===========+=============+=============+================+ | "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "R"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " | Yes | N/ A | N/ A | - bisection | - Yes | - 1 \"Linear\" | | | | | | - brentq | - Yes | - >=1, <= 1.62 | | | | | | - brenth | - Yes | - >=1, <= 1.62 | | | | | | - ridder | - Yes | - 2.0 (1.41) | | | | | | - toms748 | - Yes | - 2.7 (1.65) | + - - - - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - + | "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "R"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "C"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " | No | No | No | secant | No | 1.62 (1.62) | + - - - - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - + | "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "R"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "C"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " | No | Yes | No | newton | No | 2.00 (1.41) | + - - - - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - + | "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "R"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "C"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " | No | Yes | Yes | halley | No | 3.00 (1.44) | + - - - - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - + - - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - + "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Fixed point finding : "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Scalar functions"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "root"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " function supports the following methods : "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Multidimensional"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "linprog"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " function supports the following methods : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The simplex method supports callback functions, such as : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Assignment problems : "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Linear programming"
    },
    {
      "children": [],
      "title": "Utilities"
    },
    {
      "children": [],
      "title": "Finite-difference approximation"
    },
    {
      "children": [],
      "title": "Line search"
    },
    {
      "children": [],
      "title": "Hessian approximation"
    },
    {
      "children": [],
      "title": "Benchmark problems"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The functions below are not recommended for use in new scripts; all of these methods are accessible via a newer, more consistent interfaces, provided by the interfaces above. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Legacy functions"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "General - purpose multivariate methods : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Constrained multivariate methods : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Univariate (scalar) minimization methods : "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Optimization"
    },
    {
      "children": [],
      "title": "Least-squares"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "General nonlinear solvers : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Large - scale nonlinear solvers : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Simple iteration solvers : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "mod:`Additional information on the nonlinear solvers <scipy.optimize.nonlin>"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Root finding"
    }
  ]
}