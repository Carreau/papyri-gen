{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Minimize a function func using the L-BFGS-B algorithm."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "func",
            "type_": "callable f(x,*args)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Function to minimize."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "x0",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Initial guess."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "fprime",
            "type_": "callable fprime(x,*args), optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The gradient of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "func"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If None, then "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "func"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " returns the function value and the gradient ("
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "f,",
                          " ",
                          "g",
                          " ",
                          "=",
                          " ",
                          "func(x,",
                          " ",
                          "*",
                          "args)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "), unless "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "approx",
                          "_",
                          "grad"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is True in which case "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "func"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " returns only "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "f"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "args",
            "type_": "sequence, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Arguments to pass to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "func"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "fprime"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "approx_grad",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether to approximate the gradient numerically (in which case "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "func"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " returns only the function value)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "bounds",
            "type_": "list, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(min,",
                          " ",
                          "max)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " pairs for each element in "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", defining the bounds on that parameter. Use None or +-inf for one of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "min"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "max"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " when there is no bound in that direction."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "m",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The maximum number of variable metric corrections used to define the limited memory matrix. (The limited memory BFGS method does not store the full hessian but uses this many terms in an approximation to it.)"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "factr",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The iteration stops when "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(f^k",
                          " ",
                          "-",
                          " ",
                          "f^{k+1})/max{|f^k|,|f^{k+1}|,1}",
                          " ",
                          "<=",
                          " ",
                          "factr",
                          " ",
                          "*",
                          " ",
                          "eps"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", where "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "eps"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the machine precision, which is automatically generated by the code. Typical values for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "factr"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are: 1e12 for low accuracy; 1e7 for moderate accuracy; 10.0 for extremely high accuracy. See Notes for relationship to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "ftol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", which is exposed (instead of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "factr"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ") by the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "scipy.optimize.minimize"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " interface to L-BFGS-B."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "pgtol",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The iteration will stop when "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "max{|proj",
                          " ",
                          "g",
                          "_",
                          "i",
                          " ",
                          "|",
                          " ",
                          "i",
                          " ",
                          "=",
                          " ",
                          "1,",
                          " ",
                          "...,",
                          " ",
                          "n}",
                          " ",
                          "<=",
                          " ",
                          "pgtol"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " where "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "pg",
                          "_",
                          "i"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the i-th component of the projected gradient."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "epsilon",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Step size used when "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "approx",
                          "_",
                          "grad"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is True, for numerically calculating the gradient"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "iprint",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Controls the frequency of output. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "iprint",
                          " ",
                          "<",
                          " ",
                          "0"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " means no output; "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "iprint",
                          " ",
                          "=",
                          " ",
                          "0"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "    print only one line at the last iteration; "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "0",
                          " ",
                          "<",
                          " ",
                          "iprint",
                          " ",
                          "<",
                          " ",
                          "99"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " print also f and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "|proj",
                          " ",
                          "g|"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " every iprint iterations; "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "iprint",
                          " ",
                          "=",
                          " ",
                          "99"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "   print details of every iteration except n-vectors; "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "iprint",
                          " ",
                          "=",
                          " ",
                          "100"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "  print also the changes of active set and final x; "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "iprint",
                          " ",
                          ">",
                          " ",
                          "100"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "  print details of every iteration including x and g."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "disp",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If zero, then no output. If a positive number, then this over-rides "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "iprint"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (i.e., "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "iprint"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " gets the value of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "disp"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ")."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "maxfun",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum number of function evaluations."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "maxiter",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum number of iterations."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "callback",
            "type_": "callable, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Called after each iteration, as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "callback(xk)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", where "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "xk"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the current parameter vector."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "maxls",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum number of line search steps (per iteration). Default is 20."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "x",
            "type_": "array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Estimated position of the minimum."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "f",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Value of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "func"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " at the minimum."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "d",
            "type_": "dict",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Information dictionary."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "* d['warnflag'] is"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  - 0 if converged,   - 1 if too many function evaluations or too many iterations,   - 2 if stopped for another reason, given in d['task']"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "* d['grad'] is the gradient at the minimum (should be 0 ish) * d['funcalls'] is the number of function calls made. * d['nit'] is the number of iterations."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "License of L-BFGS-B (FORTRAN code):"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The version included here (in fortran code) is 3.0 (released April 25, 2011). It was written by Ciyou Zhu, Richard Byrd, and Jorge Nocedal <nocedal@ece.nwu.edu>. It carries the following condition for use:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This software is freely available, but we expect that all publications describing work using this software, or all commercial products using it, quote at least one of the references given below. This software is released under the BSD License."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "minimize"
  ],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/optimize/lbfgsb.py",
  "item_line": 48,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.optimize.fmin_l_bfgs_b"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "minimize",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Interface to minimization algorithms for multivariate functions. See the 'L-BFGS-B' "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "method"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " in particular. Note that the "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "ftol"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " option is made available via that interface, while "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "factr"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " is provided via this interface, where "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "factr"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " is the factor multiplying the default machine floating-point precision to arrive at "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "ftol"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ": "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "ftol",
                  " ",
                  "=",
                  " ",
                  "factr",
                  " ",
                  "*",
                  " ",
                  "numpy.finfo(float).eps"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": "."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "signature": "fmin_l_bfgs_b(func, x0, fprime=None, args=(), approx_grad=0, bounds=None, m=10, factr=10000000.0, pgtol=1e-05, epsilon=1e-08, iprint=-1, maxfun=15000, maxiter=15000, disp=None, callback=None, maxls=20)",
  "references": [
    "* R. H. Byrd, P. Lu and J. Nocedal. A Limited Memory Algorithm for Bound",
    "  Constrained Optimization, (1995), SIAM Journal on Scientific and",
    "  Statistical Computing, 16, 5, pp. 1190-1208.",
    "* C. Zhu, R. H. Byrd and J. Nocedal. L-BFGS-B: Algorithm 778: L-BFGS-B,",
    "  FORTRAN routines for large scale bound constrained optimization (1997),",
    "  ACM Transactions on Mathematical Software, 23, 4, pp. 550 - 560.",
    "* J.L. Morales and J. Nocedal. L-BFGS-B: Remark on Algorithm 778: L-BFGS-B,",
    "  FORTRAN routines for large scale bound constrained optimization (2011),",
    "  ACM Transactions on Mathematical Software, 38, 1."
  ],
  "arbitrary": []
}