{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Line-search algorithm using fminbound."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Find the minimium of the function "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "func(x0",
                    " ",
                    "+",
                    " ",
                    "alpha",
                    "*",
                    "direc)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "lower_bound : np.array.",
                      "_number": 2,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    The lower bounds for each parameter in ``x0``. If the ``i``th",
                      "_number": 3,
                      "_offset": 4
                    },
                    {
                      "_line": "    parameter in ``x0`` is unbounded below, then ``lower_bound[i]``",
                      "_number": 4,
                      "_offset": 4
                    },
                    {
                      "_line": "    should be ``-np.inf``.",
                      "_number": 5,
                      "_offset": 4
                    },
                    {
                      "_line": "    Note ``np.shape(lower_bound) == (n,)``.",
                      "_number": 6,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "lower_bound : np.array."
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "The lower bounds for each parameter in "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "x0"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". If the "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "i"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": "th parameter in "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "x0"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " is unbounded below, then "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "lower",
                              "_",
                              "bound[i]"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " should be "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "-np.inf"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". Note "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "np.shape(lower",
                              "_",
                              "bound)",
                              " ",
                              "==",
                              " ",
                              "(n,)"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": "."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "upper_bound : np.array.",
                      "_number": 7,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    The upper bounds for each parameter in ``x0``. If the ``i``th",
                      "_number": 8,
                      "_offset": 4
                    },
                    {
                      "_line": "    parameter in ``x0`` is unbounded above, then ``upper_bound[i]``",
                      "_number": 9,
                      "_offset": 4
                    },
                    {
                      "_line": "    should be ``np.inf``.",
                      "_number": 10,
                      "_offset": 4
                    },
                    {
                      "_line": "    Note ``np.shape(upper_bound) == (n,)``.",
                      "_number": 11,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "upper_bound : np.array."
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "The upper bounds for each parameter in "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "x0"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". If the "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "i"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": "th parameter in "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "x0"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " is unbounded above, then "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "upper",
                              "_",
                              "bound[i]"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " should be "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "np.inf"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". Note "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "np.shape(upper",
                              "_",
                              "bound)",
                              " ",
                              "==",
                              " ",
                              "(n,)"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": "."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "fval : number.",
                      "_number": 12,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    ``fval`` is equal to ``func(p)``, the idea is just to avoid",
                      "_number": 13,
                      "_offset": 4
                    },
                    {
                      "_line": "    recomputing it so we can limit the ``fevals``.",
                      "_number": 14,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "fval : number."
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "fval"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " is equal to "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "func(p)"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ", the idea is just to avoid recomputing it so we can limit the "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "fevals"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": "."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/optimize/optimize.py",
  "item_line": 2634,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.optimize.optimize._linesearch_powell"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "_linesearch_powell(func, p, xi, tol=0.001, lower_bound=None, upper_bound=None, fval=None)",
  "references": null,
  "arbitrary": []
}