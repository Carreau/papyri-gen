{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Find peaks in a 1-D array with wavelet transformation."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The general approach is to smooth "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "vector"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " by convolving it with "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "wavelet(width)"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " for each width in "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "widths"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". Relative maxima which appear at enough length scales, and with sufficiently high SNR, are accepted."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "vector",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "1-D array in which to find the peaks."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "widths",
            "type_": "sequence",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "1-D array of widths to use for calculating the CWT matrix. In general, this range should cover the expected width of peaks of interest."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "wavelet",
            "type_": "callable, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Should take two parameters and return a 1-D array to convolve with "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "vector"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". The first parameter determines the number of points of the returned wavelet array, the second parameter is the scale ("
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "width"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ") of the wavelet. Should be normalized and symmetric. Default is the ricker wavelet."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "max_distances",
            "type_": "ndarray, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "At each row, a ridge line is only connected if the relative max at row[n] is within "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "max",
                          "_",
                          "distances[n]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " from the relative max at "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "row[n+1]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  Default value is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "widths/4"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "gap_thresh",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a relative maximum is not found within "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "max",
                          "_",
                          "distances"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", there will be a gap. A ridge line is discontinued if there are more than "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "gap",
                          "_",
                          "thresh"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " points without connecting a new relative maximum. Default is the first value of the widths array i.e. widths[0]."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "min_length",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Minimum length a ridge line needs to be acceptable. Default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "cwt.shape[0]",
                          " ",
                          "/",
                          " ",
                          "4"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", ie 1/4-th the number of widths."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "min_snr",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Minimum SNR ratio. Default 1. The signal is the value of the cwt matrix at the shortest length scale ("
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "cwt[0,",
                          " ",
                          "loc]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "), the noise is the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "noise",
                          "_",
                          "perc"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "th percentile of datapoints contained within a window of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "window",
                          "_",
                          "size"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " around "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "cwt[0,",
                          " ",
                          "loc]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "noise_perc",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "When calculating the noise floor, percentile of data points examined below which to consider noise. Calculated using "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "stats.scoreatpercentile"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  Default is 10."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "window_size",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Size of window to use to calculate noise floor. Default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "cwt.shape[1]",
                          " ",
                          "/",
                          " ",
                          "20"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "peaks_indices",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Indices of the locations in the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "vector"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " where peaks were found. The list is sorted."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This approach was designed for finding sharp peaks among noisy data, however with proper parameter selection it should function well for different peak shapes."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. versionadded:: 0.11.0",
                  "_number": 12,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "versionadded",
            "args0": [
              " 0.11.0"
            ],
            "inner": null
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "The algorithm is as follows:",
                      "_number": 4,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": " 1. Perform a continuous wavelet transform on `vector`, for the supplied",
                      "_number": 5,
                      "_offset": 1
                    },
                    {
                      "_line": "    `widths`. This is a convolution of `vector` with `wavelet(width)` for",
                      "_number": 6,
                      "_offset": 1
                    },
                    {
                      "_line": "    each width in `widths`. See `cwt`.",
                      "_number": 7,
                      "_offset": 1
                    },
                    {
                      "_line": " 2. Identify \"ridge lines\" in the cwt matrix. These are relative maxima",
                      "_number": 8,
                      "_offset": 1
                    },
                    {
                      "_line": "    at each row, connected across adjacent rows. See identify_ridge_lines",
                      "_number": 9,
                      "_offset": 1
                    },
                    {
                      "_line": " 3. Filter the ridge_lines using filter_ridge_lines.",
                      "_number": 10,
                      "_offset": 1
                    },
                    {
                      "_line": "",
                      "_number": 11,
                      "_offset": 1
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The algorithm is as follows:"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "1. Perform a continuous wavelet transform on "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "vector"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ", for the supplied    "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "widths"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". This is a convolution of "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "vector"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " with "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "wavelet(width)"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " for    each width in "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "widths"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". See "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "cwt"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". 2. Identify \"ridge lines\" in the cwt matrix. These are relative maxima    at each row, connected across adjacent rows. See identify_ridge_lines 3. Filter the ridge_lines using filter_ridge_lines. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "builtins.float",
    "cwt",
    "find_peaks",
    "numpy",
    "numpy.arange",
    "numpy.ndarray",
    "numpy.ufunc",
    "scipy",
    "scipy.signal",
    "scipy.signal._peak_finding.find_peaks_cwt"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/signal/_peak_finding.py",
  "item_line": 1189,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.signal.find_peaks_cwt"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "signal",
              "scipy.signal",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "xs",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "numpy.arange",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "pi",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.05",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "data",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "sin",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "xs",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "peakind",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "signal",
              "scipy.signal",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "find_peaks_cwt",
              "scipy.signal._peak_finding.find_peaks_cwt",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "data",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "numpy.arange",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "peakind",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "xs",
              "numpy.ndarray",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "peakind",
              "numpy.ndarray",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "data",
              "numpy.ndarray",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "peakind",
              "numpy.ndarray",
              ""
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": "([32], array([ 1.6]), array([ 0.9995736]))",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "cwt",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Continuous wavelet transform."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "find_peaks",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Find peaks inside a signal based on peak properties."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "signature": "find_peaks_cwt(vector, widths, wavelet=None, max_distances=None, gap_thresh=None, min_length=None, min_snr=1, noise_perc=10, window_size=None)",
  "references": [
    ".. [1] Bioinformatics (2006) 22 (17): 2059-2065.",
    "   :doi:`10.1093/bioinformatics/btl355`"
  ],
  "arbitrary": []
}