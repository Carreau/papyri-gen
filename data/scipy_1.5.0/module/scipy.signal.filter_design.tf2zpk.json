{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Return zero, pole, gain (z, p, k) representation from a numerator, denominator representation of a linear filter."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "b",
            "type_": "array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Numerator polynomial coefficients."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "a",
            "type_": "array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Denominator polynomial coefficients."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "z",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Zeros of the transfer function."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "p",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Poles of the transfer function."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "k",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "System gain."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If some values of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "b"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are too close to 0, they are removed. In that case, a BadCoefficients warning is emitted."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "b"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "a"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " arrays are interpreted as coefficients for positive, descending powers of the transfer function variable. So the inputs "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "b",
                    " ",
                    "=",
                    " ",
                    "[b",
                    "_",
                    "0,",
                    " ",
                    "b",
                    "_",
                    "1,",
                    " ",
                    "...,",
                    " ",
                    "b",
                    "_",
                    "M]"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "a",
                    " ",
                    "=[a",
                    "_",
                    "0,",
                    " ",
                    "a",
                    "_",
                    "1,",
                    " ",
                    "...,",
                    " ",
                    "a",
                    "_",
                    "N]"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " can represent an analog filter of the form:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. math::",
                  "_number": 8,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 9,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    H(s) = \\frac",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "    {b_0 s^M + b_1 s^{(M-1)} + \\cdots + b_M}",
                  "_number": 11,
                  "_offset": 0
                },
                {
                  "_line": "    {a_0 s^N + a_1 s^{(N-1)} + \\cdots + a_N}",
                  "_number": 12,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 13,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "math",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "H(s) = \\frac {b_0 s^M + b_1 s^{(M-1)} + \\cdots + b_M} {a_0 s^N + a_1 s^{(N-1)} + \\cdots + a_N} "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "or a discrete-time filter of the form:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. math::",
                  "_number": 16,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 17,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    H(z) = \\frac",
                  "_number": 18,
                  "_offset": 0
                },
                {
                  "_line": "    {b_0 z^M + b_1 z^{(M-1)} + \\cdots + b_M}",
                  "_number": 19,
                  "_offset": 0
                },
                {
                  "_line": "    {a_0 z^N + a_1 z^{(N-1)} + \\cdots + a_N}",
                  "_number": 20,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 21,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "math",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "H(z) = \\frac {b_0 z^M + b_1 z^{(M-1)} + \\cdots + b_M} {a_0 z^N + a_1 z^{(N-1)} + \\cdots + a_N} "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This \"positive powers\" form is found more commonly in controls engineering. If "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "M"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "N"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are equal (which is true for all filters generated by the bilinear transform), then this happens to be equivalent to the \"negative powers\" discrete-time form preferred in DSP:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. math::",
                  "_number": 27,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 28,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    H(z) = \\frac",
                  "_number": 29,
                  "_offset": 0
                },
                {
                  "_line": "    {b_0 + b_1 z^{-1} + \\cdots + b_M z^{-M}}",
                  "_number": 30,
                  "_offset": 0
                },
                {
                  "_line": "    {a_0 + a_1 z^{-1} + \\cdots + a_N z^{-N}}",
                  "_number": 31,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 32,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "math",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "H(z) = \\frac {b_0 + b_1 z^{-1} + \\cdots + b_M z^{-M}} {a_0 + a_1 z^{-1} + \\cdots + a_N z^{-N}} "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Although this is true for common filters, remember that this is not true in the general case. If "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "M"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "N"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are not equal, the discrete-time transfer function coefficients must first be converted to the \"positive powers\" form before finding the poles and zeros."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/signal/filter_design.py",
  "item_line": 1007,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.signal.tf2zpk"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": "tf2zpk(b, a)",
  "references": null,
  "arbitrary": []
}