{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Continuous-time linear time invariant system base class."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "*system",
            "type_": "arguments",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lti"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " class can be instantiated with either 2, 3 or 4 arguments. The following gives the number of arguments and the corresponding continuous-time subclass that is created:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    * 2: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "TransferFunction"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ":  (numerator, denominator)     * 3: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "ZerosPolesGain"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": (zeros, poles, gain)     * 4: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "StateSpace"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ":  (A, B, C, D)"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Each argument can be an array or a sequence."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "lti"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " instances do not exist directly. Instead, "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "lti"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " creates an instance of one of its subclasses: "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "StateSpace"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "TransferFunction"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "ZerosPolesGain"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If (numerator, denominator) is passed in for "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "*",
                    "system"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", coefficients for both the numerator and denominator should be specified in descending exponent order (e.g., "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "s^2",
                    " ",
                    "+",
                    " ",
                    "3s",
                    " ",
                    "+",
                    " ",
                    "5"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " would be represented as "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "[1,",
                    " ",
                    "3,",
                    " ",
                    "5]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ")."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Changing the value of properties that are not directly part of the current system representation (such as the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "zeros"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " of a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "StateSpace"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " system) is very inefficient and may lead to numerical inaccuracies. It is better to convert to the specific system representation first. For example, call "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "sys",
                    " ",
                    "=",
                    " ",
                    "sys.to",
                    "_",
                    "zpk()"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " before accessing/changing the zeros, poles or gain."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "StateSpace",
    "TransferFunction",
    "ZerosPolesGain",
    "dlti"
  ],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "See Also",
    "Notes",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/signal/ltisys.py",
  "item_line": 133,
  "item_type": "<class 'type'>",
  "aliases": [
    "scipy.signal.lti"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "signal",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "lti",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "StateSpaceContinuous(\narray([[1]]),\narray([[2]]),\narray([[3]]),\narray([[4]]),\ndt: None\n)",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "lti",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "ZerosPolesGainContinuous(\narray([1, 2]),\narray([3, 4]),\n5,\ndt: None\n)",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "lti",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "TransferFunctionContinuous(\narray([3., 4.]),\narray([1., 2.]),\ndt: None\n)",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "ZerosPolesGain",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "StateSpace",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "TransferFunction",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "dlti",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    }
  ],
  "signature": "lti(*system)",
  "references": null,
  "arbitrary": []
}