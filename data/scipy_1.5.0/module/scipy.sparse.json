{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Was not able to parse docstring for scipy.sparse"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/sparse/__init__.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "scipy.sparse"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "signature": null,
  "references": null,
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "SciPy 2 - D sparse matrix package for numeric data. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Sparse matrices (:mod:`scipy.sparse`)"
    },
    {
      "children": [],
      "title": "Contents"
    },
    {
      "children": [],
      "title": "Sparse matrix classes"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Building sparse matrices : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Save and load sparse matrices : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Sparse matrix tools : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Identifying sparse matrices : "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Functions"
    },
    {
      "children": [],
      "title": "Submodules"
    },
    {
      "children": [],
      "title": "Exceptions"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "There are seven available sparse matrix types : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockQuote",
          "data": {
            "value": [
              "1. csc_matrix: Compressed Sparse Column format",
              "2. csr_matrix: Compressed Sparse Row format",
              "3. bsr_matrix: Block Sparse Row format",
              "4. lil_matrix: List of Lists format",
              "5. dok_matrix: Dictionary of Keys format",
              "6. coo_matrix: COOrdinate format (aka IJV, triplet format)",
              "7. dia_matrix: DIAgonal format"
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To construct a matrix efficiently, use either dok_matrix or lil_matrix. The lil_matrix class supports basic slicing and fancy indexing with a similar syntax to NumPy arrays. As illustrated below, the COO format may also be used to efficiently construct matrices. Despite their similarity to NumPy arrays, it is to use NumPy functions directly on these matrices because NumPy may not properly convert them for computations, leading to unexpected (and incorrect) results. If you do want to apply a NumPy function to these matrices, first check if SciPy has its own implementation for the given sparse matrix class, or (e.g., using the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "toarray()"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method of the class) first before applying the method. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To perform manipulations such as multiplication or inversion, first convert the matrix to either CSC or CSR format. The lil_matrix format is row - based, so conversion to CSR is efficient, whereas conversion to CSC is less so. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "All conversions among the CSR, CSC, and COO formats are efficient, linear - time operations. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Usage information"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To do a vector product between a sparse matrix and a vector simply use the matrix "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "dot"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method, as described in its docstring : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The CSR format is specially suitable for fast matrix vector products. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Matrix vector product"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Construct a 1000x1000 lil_matrix and add some values to it : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Now convert it to CSR format and solve A x = b for x : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Convert it to a dense matrix and solve, and check that the result is the same : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Now we can compute norm of the error with : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "It should be small :) "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Example 1"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Construct a matrix in COO format : "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Notice that the indices do not need to be sorted. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Duplicate (i,j) entries are summed when converting to CSR or CSC. "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This is useful for constructing finite - element stiffness and mass matrices. "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Example 2"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "CSR column indices are not necessarily sorted. Likewise for CSC row indices. Use the .sorted_indices () and .sort_indices () methods when sorted indices are required (e.g., when passing data to other libraries). "
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Further details"
    }
  ]
}