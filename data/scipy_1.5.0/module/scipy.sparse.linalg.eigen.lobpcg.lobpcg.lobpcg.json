{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG)"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "LOBPCG is a preconditioned eigensolver for large symmetric positive definite (SPD) generalized eigenproblems."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "A",
            "type_": "{sparse matrix, dense matrix, LinearOperator}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The symmetric linear operator of the problem, usually a sparse matrix.  Often called the \"stiffness matrix\"."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "X",
            "type_": "ndarray, float32 or float64",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Initial approximation to the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "k"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " eigenvectors (non-sparse). If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "A"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " has "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "shape=(n,n)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " then "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "X"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " should have shape "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "shape=(n,k)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "B",
            "type_": "{dense matrix, sparse matrix, LinearOperator}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The right hand side operator in a generalized eigenproblem. By default, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "B",
                          " ",
                          "=",
                          " ",
                          "Identity"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  Often called the \"mass matrix\"."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "M",
            "type_": "{dense matrix, sparse matrix, LinearOperator}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Preconditioner to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "A"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "; by default "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "M",
                          " ",
                          "=",
                          " ",
                          "Identity"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "M"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " should approximate the inverse of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "A"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "Y",
            "type_": "ndarray, float32 or float64, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "n-by-sizeY matrix of constraints (non-sparse), sizeY < n The iterations will be performed in the B-orthogonal complement of the column-space of Y. Y must be full rank."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "tol",
            "type_": "scalar, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Solver tolerance (stopping criterion). The default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "tol=n",
                          "*",
                          "sqrt(eps)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "maxiter",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum number of iterations.  The default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "maxiter",
                          " ",
                          "=",
                          " ",
                          "20"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "largest",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "When True, solve for the largest eigenvalues, otherwise the smallest."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "verbosityLevel",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Controls solver output.  The default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "verbosityLevel=0"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "retLambdaHistory",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether to return eigenvalue history.  Default is False."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "retResidualNormsHistory",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether to return history of residual norms.  Default is False."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "w",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Array of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "k"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " eigenvalues"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "v",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "An array of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "k"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " eigenvectors.  "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "v"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " has the same shape as "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "X"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "lambdas",
            "type_": "list of ndarray, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The eigenvalue history, if "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "retLambdaHistory"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is True."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "rnorms",
            "type_": "list of ndarray, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The history of residual norms, if "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "retResidualNormsHistory"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is True."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If both "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "retLambdaHistory"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "retResidualNormsHistory"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are True, the return tuple has the following format "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "(lambda,",
                    " ",
                    "V,",
                    " ",
                    "lambda",
                    " ",
                    "history,",
                    " ",
                    "residual",
                    " ",
                    "norms",
                    " ",
                    "history)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In the following "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " denotes the matrix size and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "m"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " the number of required eigenvalues (smallest or largest)."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The LOBPCG code internally solves eigenproblems of the size "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "3m"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " on every iteration by calling the \"standard\" dense eigensolver, so if "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "m"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is not small enough compared to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", it does not make sense to call the LOBPCG code, but rather one should use the \"standard\" eigensolver, e.g. numpy or scipy function in this case. If one calls the LOBPCG algorithm for "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "5m",
                    " ",
                    ">",
                    " ",
                    "n"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", it will most likely break internally, so the code tries to call the standard function instead."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "It is not that "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " should be large for the LOBPCG to work, but rather the ratio "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n",
                    " ",
                    "/",
                    " ",
                    "m"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " should be large. It you call LOBPCG with "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "m=1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n=10"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", it works though "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is small. The method is intended for extremely large "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n",
                    " ",
                    "/",
                    " ",
                    "m"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", see e.g., reference [28] in https://arxiv.org/abs/0705.2626"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The convergence speed depends basically on two factors:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "1. How well relatively separated the seeking eigenvalues are from the rest",
                      "_number": 23,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "   of the eigenvalues. One can try to vary ``m`` to make this better.",
                      "_number": 24,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 25,
                      "_offset": 3
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "1. How well relatively separated the seeking eigenvalues are from the rest"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "of the eigenvalues. One can try to vary "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "m"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " to make this better. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "2. How well conditioned the problem is. This can be changed by using proper",
                      "_number": 26,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "   preconditioning. For example, a rod vibration test problem (under tests",
                      "_number": 27,
                      "_offset": 3
                    },
                    {
                      "_line": "   directory) is ill-conditioned for large ``n``, so convergence will be",
                      "_number": 28,
                      "_offset": 3
                    },
                    {
                      "_line": "   slow, unless efficient preconditioning is used. For this specific",
                      "_number": 29,
                      "_offset": 3
                    },
                    {
                      "_line": "   problem, a good simple preconditioner function would be a linear solve",
                      "_number": 30,
                      "_offset": 3
                    },
                    {
                      "_line": "   for `A`, which is easy to code since A is tridiagonal.",
                      "_number": 31,
                      "_offset": 3
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "2. How well conditioned the problem is. This can be changed by using proper"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "preconditioning. For example, a rod vibration test problem (under tests directory) is ill-conditioned for large "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "n"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ", so convergence will be slow, unless efficient preconditioning is used. For this specific problem, a good simple preconditioner function would be a linear solve for "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "A"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ", which is easy to code since A is tridiagonal."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "__main__.precond",
    "builtins.float",
    "builtins.int",
    "numpy",
    "numpy.ndarray",
    "numpy.random",
    "scipy",
    "scipy.sparse",
    "scipy.sparse.base.isspmatrix",
    "scipy.sparse.base.spmatrix.toarray",
    "scipy.sparse.construct.spdiags",
    "scipy.sparse.dia.dia_matrix",
    "scipy.sparse.linalg",
    "scipy.sparse.linalg.eigen.lobpcg.lobpcg",
    "scipy.sparse.linalg.interface.LinearOperator"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/sparse/linalg/eigen/lobpcg/lobpcg.py",
  "item_line": 127,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.sparse.linalg.lobpcg"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Solve "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "A",
                  " ",
                  "x",
                  " ",
                  "=",
                  " ",
                  "lambda",
                  " ",
                  "x"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " with constraints and preconditioning."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "numpy",
              "numpy",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "as",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "sparse",
              "scipy.sparse",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "spdiags",
              "scipy.sparse.construct.spdiags",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "issparse",
              "scipy.sparse.base.isspmatrix",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "sparse",
              "scipy.sparse",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "linalg",
              "scipy.sparse.linalg",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lobpcg",
              "scipy.sparse.linalg.eigen.lobpcg.lobpcg",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "LinearOperator",
              "scipy.sparse.linalg.interface.LinearOperator",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "n",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "vals",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "A",
              "scipy.sparse.dia.dia_matrix",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "spdiags",
              "scipy.sparse.construct.spdiags",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "vals",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n",
              "builtins.int",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "A",
              "scipy.sparse.dia.dia_matrix",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "toarray",
              "scipy.sparse.base.spmatrix.toarray",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([[  1.,   0.,   0., ...,   0.,   0.,   0.],\n       [  0.,   2.,   0., ...,   0.,   0.,   0.],\n       [  0.,   0.,   3., ...,   0.,   0.,   0.],\n       ...,\n       [  0.,   0.,   0., ...,  98.,   0.,   0.],\n       [  0.,   0.,   0., ...,   0.,  99.,   0.],\n       [  0.,   0.,   0., ...,   0.,   0., 100.]])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Constraints:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "Y",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "eye",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "n",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Initial guess for eigenvectors, should have linearly independent columns. Column dimension = number of requested eigenvalues."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "X",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "numpy.random",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "rand",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "n",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Preconditioner in the inverse of A in this example:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "invA",
              "scipy.sparse.dia.dia_matrix",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "spdiags",
              "scipy.sparse.construct.spdiags",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1.0",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "/",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "vals",
              "numpy.ndarray",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n",
              "builtins.int",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "The preconditiner must be defined by a function:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "precond",
              "__main__.precond",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "invA",
              "scipy.sparse.dia.dia_matrix",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "@",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "The argument x of the preconditioner function is a matrix inside "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "lobpcg"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ", thus the use of matrix-matrix product "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "@"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": "."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "The preconditioner function is passed to lobpcg as a "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "LinearOperator"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ":"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "M",
              "scipy.sparse.linalg.interface.LinearOperator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "LinearOperator",
              "scipy.sparse.linalg.interface.LinearOperator",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "matvec",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "precond",
              "__main__.precond",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "matmat",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "precond",
              "__main__.precond",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "shape",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "n",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "n",
              "builtins.int",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "float",
              "builtins.float",
              "nb"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Let us now solve the eigenvalue problem for the matrix A:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "eigenvalues",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "_",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lobpcg",
              "scipy.sparse.linalg.eigen.lobpcg.lobpcg",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "A",
              "scipy.sparse.dia.dia_matrix",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "X",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "Y",
              "numpy.ndarray",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "Y",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "M",
              "scipy.sparse.linalg.interface.LinearOperator",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "M",
              "scipy.sparse.linalg.interface.LinearOperator",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "largest",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "False",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "eigenvalues",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([4., 5., 6.])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Note that the vectors passed in Y are the eigenvectors of the 3 smallest eigenvalues. The results returned are orthogonal to those."
              }
            }
          ],
          "inner": []
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "signature": "lobpcg(A, X, B=None, M=None, Y=None, tol=None, maxiter=None, largest=True, verbosityLevel=0, retLambdaHistory=False, retResidualNormsHistory=False)",
  "references": [
    ".. [1] A. V. Knyazev (2001),",
    "       Toward the Optimal Preconditioned Eigensolver: Locally Optimal",
    "       Block Preconditioned Conjugate Gradient Method.",
    "       SIAM Journal on Scientific Computing 23, no. 2,",
    "       pp. 517-541. http://dx.doi.org/10.1137/S1064827500366124",
    "",
    ".. [2] A. V. Knyazev, I. Lashuk, M. E. Argentati, and E. Ovchinnikov",
    "       (2007), Block Locally Optimal Preconditioned Eigenvalue Xolvers",
    "       (BLOPEX) in hypre and PETSc. https://arxiv.org/abs/0705.2626",
    "",
    ".. [3] A. V. Knyazev's C and MATLAB implementations:",
    "       https://bitbucket.org/joseroman/blopex"
  ],
  "arbitrary": []
}