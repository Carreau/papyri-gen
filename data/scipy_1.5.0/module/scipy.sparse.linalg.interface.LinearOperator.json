{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Common interface for performing matrix vector products"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Many iterative methods (e.g. cg, gmres) do not need to know the individual entries of a matrix to solve a linear system A*x=b. Such solvers only require the computation of matrix vector products, A*v where v is a dense vector.  This class serves as an abstract interface between iterative solvers and matrix-like objects."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To construct a concrete LinearOperator, either pass appropriate callables to the constructor of this class, or subclass it."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A subclass must implement either one of the methods "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "matvec"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "matmat"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", and the attributes/properties "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "shape"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " (pair of integers) and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "dtype"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " (may be None). It may call the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "init",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " on this class to have these attributes validated. Implementing "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "matvec"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " automatically implements "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "matmat"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " (using a naive algorithm) and vice-versa."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Optionally, a subclass may implement "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "rmatvec"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "adjoint"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to implement the Hermitian adjoint (conjugate transpose). As with "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "matvec"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "matmat"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", implementing either "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "rmatvec"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "adjoint"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " implements the other automatically. Implementing "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "adjoint"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is preferable; "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "rmatvec"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is mostly there for backwards compatibility."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "shape",
            "type_": "tuple",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Matrix dimensions (M, N)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "matvec",
            "type_": "callable f(v)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Returns returns A * v."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "rmatvec",
            "type_": "callable f(v)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Returns A^H * v, where A^H is the conjugate transpose of A."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "matmat",
            "type_": "callable f(V)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Returns A * V, where V is a dense matrix with dimensions (N, K)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "dtype",
            "type_": "dtype",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Data type of the matrix."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "rmatmat",
            "type_": "callable f(V)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Returns A^H * V, where V is a dense matrix with dimensions (M, K)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "args",
            "type_": "tuple",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "For linear operators describing products etc. of other linear operators, the operands of the binary operation."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "ndim",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of dimensions (this is always 2)"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The user-defined matvec() function must properly handle the case where v has shape (N,) as well as the (N,1) case.  The shape of the return type is handled internally by LinearOperator."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "LinearOperator instances can also be multiplied, added with each other and exponentiated, all lazily: the result of these operations is always a new, composite LinearOperator, that defers linear operations to the original operators and combines the results."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "More details regarding how to subclass a LinearOperator and several examples of concrete LinearOperator instances can be found in the external project "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "PyLops",
                    " ",
                    "<https",
                    ":",
                    "//pylops.readthedocs.io>"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "_."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "__main__.mv",
    "aslinearoperator",
    "numpy",
    "numpy.array",
    "numpy.ones",
    "scipy",
    "scipy.sparse",
    "scipy.sparse.linalg",
    "scipy.sparse.linalg.interface.LinearOperator",
    "scipy.sparse.linalg.interface.LinearOperator.matvec"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Attributes",
    "See Also",
    "Notes",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/sparse/linalg/interface.py",
  "item_line": 53,
  "item_type": "<class 'type'>",
  "aliases": [
    "scipy.optimize._differentiable_functions.LinearOperator"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "numpy",
              "numpy",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "as",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "sparse",
              "scipy.sparse",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "linalg",
              "scipy.sparse.linalg",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "LinearOperator",
              "scipy.sparse.linalg.interface.LinearOperator",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mv",
              "__main__.mv",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "v",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "v",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "v",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "...",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "A",
              "scipy.sparse.linalg.interface.LinearOperator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "LinearOperator",
              "scipy.sparse.linalg.interface.LinearOperator",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "matvec",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "mv",
              "__main__.mv",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "A",
              "scipy.sparse.linalg.interface.LinearOperator",
              ""
            ]
          ],
          "out": "<2x2 _CustomLinearOperator with dtype=float64>",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "A",
              "scipy.sparse.linalg.interface.LinearOperator",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "matvec",
              "scipy.sparse.linalg.interface.LinearOperator.matvec",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "ones",
              "numpy.core.numeric.ones",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([ 2.,  3.])",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "A",
              "scipy.sparse.linalg.interface.LinearOperator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "ones",
              "numpy.core.numeric.ones",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([ 2.,  3.])",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "aslinearoperator",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Construct LinearOperators"
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "signature": "LinearOperator(*args, **kwargs)",
  "references": null,
  "arbitrary": []
}