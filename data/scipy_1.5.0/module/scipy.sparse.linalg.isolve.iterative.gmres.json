{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Use Generalized Minimal RESidual iteration to solve "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "Ax",
                    " ",
                    "=",
                    " ",
                    "b"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "A",
            "type_": "{sparse matrix, dense matrix, LinearOperator}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The real or complex N-by-N matrix of the linear system. Alternatively, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "A"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can be a linear operator which can produce "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Ax"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " using, e.g., "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "scipy.sparse.linalg.LinearOperator"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "b",
            "type_": "{array, matrix}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Right hand side of the linear system. Has shape (N,) or (N,1)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "x",
            "type_": "{array, matrix}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The converged solution."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "info",
            "type_": "int",
            "desc": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "Provides convergence information:",
                            "_number": 0,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  * 0  : successful exit",
                            "_number": 1,
                            "_offset": 2
                          },
                          {
                            "_line": "  * >0 : convergence to tolerance not achieved, number of iterations",
                            "_number": 2,
                            "_offset": 2
                          },
                          {
                            "_line": "  * <0 : illegal input or breakdown",
                            "_number": 3,
                            "_offset": 2
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "Provides convergence information:"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "* 0  : successful exit * >0 : convergence to tolerance not achieved, number of iterations * <0 : illegal input or breakdown"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "x0",
            "type_": "{array, matrix}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Starting guess for the solution (a vector of zeros by default)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "tol, atol",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Tolerances for convergence, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "norm(residual)",
                          " ",
                          "<=",
                          " ",
                          "max(tol",
                          "*",
                          "norm(b),",
                          " ",
                          "atol)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". The default for "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "atol"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'legacy'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", which emulates a different legacy behavior."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockDirective",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": ".. warning::",
                        "_number": 4,
                        "_offset": 0
                      }
                    ]
                  },
                  "wh": {
                    "_lines": [
                      {
                        "_line": "",
                        "_number": 5,
                        "_offset": 0
                      }
                    ]
                  },
                  "ind": {
                    "_lines": [
                      {
                        "_line": "   The default value for `atol` will be changed in a future release.",
                        "_number": 6,
                        "_offset": 0
                      },
                      {
                        "_line": "   For future compatibility, specify `atol` explicitly.",
                        "_number": 7,
                        "_offset": 0
                      }
                    ]
                  },
                  "directive_name": "warning",
                  "args0": [
                    ""
                  ],
                  "inner": {
                    "inline": [
                      {
                        "type": "Words",
                        "data": {
                          "value": "The default value for "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            "atol"
                          ],
                          "domain": null,
                          "role": null
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " will be changed in a future release. For future compatibility, specify "
                        }
                      },
                      {
                        "type": "Directive",
                        "data": {
                          "value": [
                            "atol"
                          ],
                          "domain": null,
                          "role": null
                        }
                      },
                      {
                        "type": "Words",
                        "data": {
                          "value": " explicitly."
                        }
                      }
                    ],
                    "inner": []
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "restart",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of iterations between restarts. Larger values increase iteration cost, but may be necessary for convergence. Default is 20."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "maxiter",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum number of iterations (restart cycles).  Iteration will stop after maxiter steps even if the specified tolerance has not been achieved."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "M",
            "type_": "{sparse matrix, dense matrix, LinearOperator}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Inverse of the preconditioner of A.  M should approximate the inverse of A and be easy to solve for (see Notes).  Effective preconditioning dramatically improves the rate of convergence, which implies that fewer iterations are needed to reach a given error tolerance.  By default, no preconditioner is used."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "callback",
            "type_": "function",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "User-supplied function to call after each iteration.  It is called as "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "callback(args)"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", where "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "args"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are selected by "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "callback",
                          "_",
                          "type"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "callback_type",
            "type_": "{'x', 'pr_norm', 'legacy'}, optional",
            "desc": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "Callback function argument requested:",
                            "_number": 0,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  - ``x``: current iterate (ndarray), called on every restart",
                            "_number": 1,
                            "_offset": 2
                          },
                          {
                            "_line": "  - ``pr_norm``: relative (preconditioned) residual norm (float),",
                            "_number": 2,
                            "_offset": 2
                          },
                          {
                            "_line": "    called on every inner iteration",
                            "_number": 3,
                            "_offset": 2
                          },
                          {
                            "_line": "  - ``legacy`` (default): same as ``pr_norm``, but also changes the",
                            "_number": 4,
                            "_offset": 2
                          },
                          {
                            "_line": "    meaning of 'maxiter' to count inner iterations instead of restart",
                            "_number": 5,
                            "_offset": 2
                          },
                          {
                            "_line": "    cycles.",
                            "_number": 6,
                            "_offset": 2
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "Callback function argument requested:"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "- "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "x"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ": current iterate (ndarray), called on every restart - "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "pr",
                                    "_",
                                    "norm"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ": relative (preconditioned) residual norm (float),   called on every inner iteration - "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "legacy"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": " (default): same as "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "pr",
                                    "_",
                                    "norm"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ", but also changes the   meaning of 'maxiter' to count inner iterations instead of restart   cycles."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "restrt",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "DEPRECATED - use "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "restart"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instead."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A preconditioner, P, is chosen such that P is close to A but easy to solve for. The preconditioner parameter required by this routine is "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "M",
                    " ",
                    "=",
                    " ",
                    "P^-1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". The inverse should preferably not be calculated explicitly.  Rather, use the following template to produce M::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "  # Construct a linear operator that computes P^-1 * x.",
                  "_number": 5,
                  "_offset": 2
                },
                {
                  "_line": "  import scipy.sparse.linalg as spla",
                  "_number": 6,
                  "_offset": 2
                },
                {
                  "_line": "  M_x = lambda x: spla.spsolve(P, x)",
                  "_number": 7,
                  "_offset": 2
                },
                {
                  "_line": "  M = spla.LinearOperator((n, n), M_x)",
                  "_number": 8,
                  "_offset": 2
                }
              ]
            }
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "LinearOperator",
    "builtins.float",
    "builtins.int",
    "builtins.print",
    "numpy",
    "numpy.allclose",
    "numpy.array",
    "numpy.ndarray",
    "scipy",
    "scipy.sparse",
    "scipy.sparse.base.spmatrix.dot",
    "scipy.sparse.csc.csc_matrix",
    "scipy.sparse.linalg"
  ],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "See Also",
    "Notes",
    "Examples"
  ],
  "item_file": "<decorator-gen-5>",
  "item_line": 431,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.sparse.linalg.gmres"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "sparse",
              "scipy.sparse",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "csc_matrix",
              "scipy.sparse.csc.csc_matrix",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "sparse",
              "scipy.sparse",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "linalg",
              "scipy.sparse.linalg",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "gmres",
              null,
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "A",
              "scipy.sparse.csc.csc_matrix",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "csc_matrix",
              "scipy.sparse.csc.csc_matrix",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "float",
              "builtins.float",
              "nb"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "b",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "float",
              "builtins.float",
              "nb"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "exitCode",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "gmres",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "A",
              "scipy.sparse.csc.csc_matrix",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "exitCode",
              "builtins.int",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# 0 indicates successful convergence",
              "",
              "c1"
            ]
          ],
          "out": "0",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "allclose",
              "numpy.allclose",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "A",
              "scipy.sparse.csc.csc_matrix",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "dot",
              "scipy.sparse.base.spmatrix.dot",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "True",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "LinearOperator",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    }
  ],
  "signature": "gmres(A, b, x0=None, tol=1e-05, restart=None, maxiter=None, M=None, callback=None, restrt=None, atol=None, callback_type=None)",
  "references": null,
  "arbitrary": []
}