{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Return MLEs for shape (if applicable), location, and scale parameters from data."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "MLE stands for Maximum Likelihood Estimate.  Starting estimates for the fit are given by input arguments; for any arguments not provided with starting estimates, "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "self.",
                    "_",
                    "fitstart(data)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is called to generate such."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "One can hold some parameters fixed to specific values by passing in keyword arguments "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "f0"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "f1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", ..., "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "fn"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " (for shape parameters) and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "floc"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "fscale"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " (for location and scale parameters, respectively)."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "data",
            "type_": "array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Data to use in calculating the MLEs."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "arg1, arg2, arg3,...",
            "type_": "floats, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Starting value(s) for any shape-characterizing arguments (those not provided will be determined by a call to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "_",
                          "fitstart(data)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "). No default value."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "kwds",
            "type_": "floats, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "loc"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": initial guess of the distribution's location parameter. - "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "scale"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": initial guess of the distribution's scale parameter."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Special keyword arguments are recognized as holding certain parameters fixed:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "- f0...fn : hold respective shape parameters fixed.",
                            "_number": 6,
                            "_offset": 0
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "  Alternatively, shape parameters to fix can be specified by name.",
                            "_number": 7,
                            "_offset": 2
                          },
                          {
                            "_line": "  For example, if ``self.shapes == \"a, b\"``, ``fa`` and ``fix_a``",
                            "_number": 8,
                            "_offset": 2
                          },
                          {
                            "_line": "  are equivalent to ``f0``, and ``fb`` and ``fix_b`` are",
                            "_number": 9,
                            "_offset": 2
                          },
                          {
                            "_line": "  equivalent to ``f1``.",
                            "_number": 10,
                            "_offset": 2
                          },
                          {
                            "_line": "",
                            "_number": 11,
                            "_offset": 2
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- f0...fn : hold respective shape parameters fixed."
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "Alternatively, shape parameters to fix can be specified by name. For example, if "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "self.shapes",
                                    " ",
                                    "==",
                                    " ",
                                    "\"a,",
                                    " ",
                                    "b\""
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ", "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "fa"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": " and "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "fix",
                                    "_",
                                    "a"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": " are equivalent to "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "f0"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ", and "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "fb"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": " and "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "fix",
                                    "_",
                                    "b"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": " are equivalent to "
                                }
                              },
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "f1"
                                  ]
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": ". "
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- floc : hold location parameter fixed to specified value."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- fscale : hold scale parameter fixed to specified value."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- optimizer : The optimizer to use.  The optimizer must take "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "func"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ","
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "  and starting position as the first two arguments,   plus "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "args"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (for extra arguments to pass to the   function to be optimized) and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "disp=0"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to suppress   output as keyword arguments."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "mle_tuple",
            "type_": "tuple of floats",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "MLEs for any shape parameters (if applicable), followed by those for location and scale. For most random variables, shape statistics will be returned, but there are exceptions (e.g. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "norm"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ")."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This function uses explicit formulas for the maximum likelihood estimation of the normal distribution parameters, so the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "optimizer"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " argument is ignored."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "builtins.float",
    "builtins.int",
    "builtins.str",
    "numpy.floating",
    "numpy.ndarray",
    "scipy",
    "scipy.stats",
    "scipy.stats._continuous_distns.beta_gen",
    "scipy.stats._continuous_distns.beta_gen.fit",
    "scipy.stats._continuous_distns.norm_gen",
    "scipy.stats._continuous_distns.norm_gen.fit",
    "scipy.stats._distn_infrastructure.rv_generic.rvs"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py",
  "item_line": 331,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.stats._continuous_distns.norm_gen.fit"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Generate some data to fit: draw random variates from the "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "beta"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " distribution"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "stats",
              "scipy.stats",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "beta",
              "scipy.stats._continuous_distns.beta_gen",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "a",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "builtins.float",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1.0",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2.0",
              "",
              "mf"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "beta",
              "scipy.stats._continuous_distns.beta_gen",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "rvs",
              "scipy.stats._distn_infrastructure.rv_generic.rvs",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "size",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1000",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Now we can fit all four parameters ("
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "a"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ", "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "b"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ", "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "loc"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " and "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "scale"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": "):"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "a1",
              "builtins.str",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b1",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "loc1",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scale1",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "beta",
              "scipy.stats._continuous_distns.beta_gen",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fit",
              "scipy.stats._continuous_distns.beta_gen.fit",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "builtins.int",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "We can also use some prior knowledge about the dataset: let's keep "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "loc"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " and "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "scale"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " fixed:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "a1",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b1",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "loc1",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scale1",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "beta",
              "scipy.stats._continuous_distns.beta_gen",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fit",
              "scipy.stats._continuous_distns.beta_gen.fit",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "floc",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "fscale",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "loc1",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scale1",
              "builtins.int",
              ""
            ]
          ],
          "out": "(0, 1)",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "We can also keep shape parameters fixed by using "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "f"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": "-keywords. To keep the zero-th shape parameter "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "a"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " equal 1, use "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "f0=1"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " or, equivalently, "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "fa=1"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ":"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "a1",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b1",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "loc1",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scale1",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "beta",
              "scipy.stats._continuous_distns.beta_gen",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fit",
              "scipy.stats._continuous_distns.beta_gen.fit",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "fa",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "floc",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "fscale",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "a1",
              "builtins.int",
              ""
            ]
          ],
          "out": "1",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Not all distributions return estimates for the shape parameters. "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "norm"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " for example just returns estimates for location and scale:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "stats",
              "scipy.stats",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "norm",
              "scipy.stats._continuous_distns.norm_gen",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "builtins.float",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "norm",
              "scipy.stats._continuous_distns.norm_gen",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "rvs",
              "scipy.stats._distn_infrastructure.rv_generic.rvs",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "a",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "size",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1000",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "random_state",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "123",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "loc1",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scale1",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "norm",
              "scipy.stats._continuous_distns.norm_gen",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fit",
              "scipy.stats._continuous_distns.norm_gen.fit",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "builtins.float",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "loc1",
              "numpy.floating",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scale1",
              "numpy.floating",
              ""
            ]
          ],
          "out": "(0.92087172783841631, 2.0015750750324668)",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "signature": "fit(self, data, **kwds)",
  "references": null,
  "arbitrary": []
}