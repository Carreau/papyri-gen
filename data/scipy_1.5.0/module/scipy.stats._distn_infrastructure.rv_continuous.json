{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A generic continuous random variable class meant for subclassing."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "rv",
                    "_",
                    "continuous"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is a base class to construct specific distribution classes and instances for continuous random variables. It cannot be used directly as a distribution."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "momtype",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The type of generic moment calculation to use: 0 for pdf, 1 (default) for ppf."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "a",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Lower bound of the support of the distribution, default is minus infinity."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "b",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Upper bound of the support of the distribution, default is plus infinity."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "xtol",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The tolerance for fixed point calculation for generic ppf."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "badvalue",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The value in a result arrays that indicates a value that for which some argument restriction is violated, default is np.nan."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "name",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The name of the instance. This string is used to construct the default example for distributions."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "longname",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This string is used as part of the first line of the docstring returned when a subclass has no docstring of its own. Note: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "longname"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " exists for backwards compatibility, do not use for new subclasses."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "shapes",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The shape of the distribution. For example "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "\"m,",
                          " ",
                          "n\""
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for a distribution that takes two integers as the two shape arguments for all its methods. If not provided, shape parameters will be inferred from the signature of the private methods, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "_",
                          "pdf"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "_",
                          "cdf"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " of the instance."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "extradoc",
            "type_": "str, optional, deprecated",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This string is used as the last part of the docstring returned when a subclass has no docstring of its own. Note: "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "extradoc"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " exists for backwards compatibility, do not use for new subclasses."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "seed",
            "type_": "{None, int, `~np.random.RandomState`, `~np.random.Generator`}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This parameter defines the object to use for drawing random variates. If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "seed"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "None"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~np.random.RandomState"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " singleton is used. If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "seed"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is an int, a new "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "RandomState"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance is used, seeded with seed. If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "seed"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is already a "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "RandomState"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Generator"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance, then that object is used. Default is None."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "rvs",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "pdf",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "logpdf",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "cdf",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "logcdf",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "sf",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "logsf",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "ppf",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "isf",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "moment",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "stats",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "entropy",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "expect",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "median",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "mean",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "std",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "var",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "interval",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "__call__",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "fit",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "fit_loc_scale",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "nnlf",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "support",
            "type_": "",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Public methods of an instance of a distribution class (e.g., "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "pdf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "cdf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ") check their arguments and pass valid arguments to private, computational methods ("
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "pdf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "cdf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "). For "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "pdf(x)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "x"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is valid if it is within the support of the distribution. Whether a shape parameter is valid is decided by an "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "argcheck"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method (which defaults to checking that its arguments are strictly positive.)"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "**Subclassing**"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "New random variables can be defined by subclassing the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "rv",
                    "_",
                    "continuous"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " class and re-defining at least the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "pdf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "cdf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method (normalized to location 0 and scale 1)."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If positive argument checking is not correct for your RV then you will also need to re-define the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "argcheck"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For most of the scipy.stats distributions, the support interval doesn't depend on the shape parameters. "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "x"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " being in the support interval is equivalent to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "self.a",
                    " ",
                    "<=",
                    " ",
                    "x",
                    " ",
                    "<=",
                    " ",
                    "self.b"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ".  If either of the endpoints of the support do depend on the shape parameters, then i) the distribution must implement the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "get",
                    "_",
                    "support"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method; and ii) those dependent endpoints must be omitted from the distribution's call to the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "rv",
                    "_",
                    "continuous"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " initializer."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Correct, but potentially slow defaults exist for the remaining methods but for speed and/or accuracy you can over-ride::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "  _logpdf, _cdf, _logcdf, _ppf, _rvs, _isf, _sf, _logsf",
                  "_number": 27,
                  "_offset": 2
                },
                {
                  "_line": "",
                  "_number": 28,
                  "_offset": 2
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The default method "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "rvs"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " relies on the inverse of the cdf, "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "ppf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", applied to a uniform random variate. In order to generate random variates efficiently, either the default "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "ppf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " needs to be overwritten (e.g. if the inverse cdf can expressed in an explicit form) or a sampling method needs to be implemented in a custom "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "rvs"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If possible, you should override "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "isf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "sf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "logsf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". The main reason would be to improve numerical accuracy: for example, the survival function "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "sf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is computed as "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "1",
                    " ",
                    "-",
                    " ",
                    "_",
                    "cdf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " which can result in loss of precision if "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "cdf(x)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is close to one."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "**Methods that can be overwritten by subclasses** ::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "  _rvs",
                  "_number": 43,
                  "_offset": 2
                },
                {
                  "_line": "  _pdf",
                  "_number": 44,
                  "_offset": 2
                },
                {
                  "_line": "  _cdf",
                  "_number": 45,
                  "_offset": 2
                },
                {
                  "_line": "  _sf",
                  "_number": 46,
                  "_offset": 2
                },
                {
                  "_line": "  _ppf",
                  "_number": 47,
                  "_offset": 2
                },
                {
                  "_line": "  _isf",
                  "_number": 48,
                  "_offset": 2
                },
                {
                  "_line": "  _stats",
                  "_number": 49,
                  "_offset": 2
                },
                {
                  "_line": "  _munp",
                  "_number": 50,
                  "_offset": 2
                },
                {
                  "_line": "  _entropy",
                  "_number": 51,
                  "_offset": 2
                },
                {
                  "_line": "  _argcheck",
                  "_number": 52,
                  "_offset": 2
                },
                {
                  "_line": "  _get_support",
                  "_number": 53,
                  "_offset": 2
                },
                {
                  "_line": "",
                  "_number": 54,
                  "_offset": 2
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "There are additional (internal and private) generic methods that can be useful for cross-checking and for debugging, but might work in all cases when directly called."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A note on "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "shapes"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ": subclasses need not specify them explicitly. In this case, "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "shapes"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " will be automatically deduced from the signatures of the overridden methods ("
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "pdf"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "cdf"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " etc). If, for some reason, you prefer to avoid relying on introspection, you can specify "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "shapes"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " explicitly as an argument to the instance constructor."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "**Frozen Distributions**"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Normally, you must provide shape parameters (and, optionally, location and scale parameters to each call of a method of a distribution."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Alternatively, the object may be called (as a function) to fix the shape, location, and scale parameters returning a \"frozen\" continuous RV object:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "rv = generic(<shape(s)>, loc=0, scale=1)",
                      "_number": 73,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    `rv_frozen` object with the same methods but holding the given shape,",
                      "_number": 74,
                      "_offset": 4
                    },
                    {
                      "_line": "    location, and scale fixed",
                      "_number": 75,
                      "_offset": 4
                    },
                    {
                      "_line": "",
                      "_number": 76,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "rv = generic(<shape(s)>, loc=0, scale=1)"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "rv",
                              "_",
                              "frozen"
                            ],
                            "domain": null,
                            "role": null
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " object with the same methods but holding the given shape, location, and scale fixed "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "**Statistics**"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Statistics are computed using numerical integration by default. For speed you can redefine this using "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "stats"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ":"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": " - take shape parameters and return mu, mu2, g1, g2  - If you can't compute one of these, return it as None  - Can also be defined with a keyword argument "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "moments"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", which is a"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "   string composed of \"m\", \"v\", \"s\", and/or \"k\".    Only the components appearing in string should be computed and    returned in the order \"m\", \"v\", \"s\", or \"k\"  with missing values    returned as None."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Alternatively, you can override "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "munp"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", which takes "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "n"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and shape parameters and returns the n-th non-central moment of the distribution."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Methods",
    "Notes",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
  "item_line": 1402,
  "item_type": "<class 'type'>",
  "aliases": [
    "scipy.stats.rv_continuous"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "To create a new Gaussian distribution, we would do the following:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "stats",
              "",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "rv_continuous",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "class",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "gaussian_gen",
              "",
              "nc"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "rv_continuous",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "Gaussian distribution",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "def",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "_pdf",
              "",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "",
              "bp"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "return",
              "",
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "exp",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "/",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2.0",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "/",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "sqrt",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2.0",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "pi",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "gaussian",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "gaussian_gen",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "name",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "gaussian",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "scipy.stats"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " distributions are *instances*, so here we subclass "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "rv",
                  "_",
                  "continuous"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " and create an instance. With this, we now have a fully functional distribution with all relevant methods automagically generated by the framework."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Note that above we defined a standard normal distribution, with zero mean and unit variance. Shifting and scaling of the distribution can be done by using "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "loc"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " and "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "scale"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " parameters: "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "gaussian.pdf(x,",
                  " ",
                  "loc,",
                  " ",
                  "scale)"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " essentially computes "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "y",
                  " ",
                  "=",
                  " ",
                  "(x",
                  " ",
                  "-",
                  " ",
                  "loc)",
                  " ",
                  "/",
                  " ",
                  "scale"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " and "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "gaussian.",
                  "_",
                  "pdf(y)",
                  " ",
                  "/",
                  " ",
                  "scale"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": "."
              }
            }
          ],
          "inner": []
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "signature": "rv_continuous(momtype=1, a=None, b=None, xtol=1e-14, badvalue=None, name=None, longname=None, shapes=None, extradoc=None, seed=None)",
  "references": null,
  "arbitrary": []
}