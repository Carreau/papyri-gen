{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Return a dataset transformed by a Box-Cox power transformation."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "x",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Input array.  Must be positive 1-dimensional.  Must not be constant."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "lmbda",
            "type_": "{None, scalar}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lmbda"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is not None, do the transformation for that value."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lmbda"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is None, find the lambda that maximizes the log-likelihood function and return it as the second output argument."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "alpha",
            "type_": "{None, float}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "alpha"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is not None, return the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "100",
                          " ",
                          "*",
                          " ",
                          "(1-alpha)%"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " confidence interval for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lmbda"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " as the third output argument. Must be between 0.0 and 1.0."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "boxcox",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Box-Cox power transformed array."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "maxlog",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lmbda"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " parameter is None, the second returned argument is the lambda that maximizes the log-likelihood function."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "(min_ci, max_ci)",
            "type_": "tuple of float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lmbda"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " parameter is None and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "alpha"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is not None, this returned tuple of floats represents the minimum and maximum confidence limits given "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "alpha"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The Box-Cox transform is given by::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    y = (x**lmbda - 1) / lmbda,  for lmbda > 0",
                  "_number": 2,
                  "_offset": 4
                },
                {
                  "_line": "        log(x),                  for lmbda = 0",
                  "_number": 3,
                  "_offset": 4
                },
                {
                  "_line": "",
                  "_number": 4,
                  "_offset": 4
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "boxcox"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " requires the input data to be positive.  Sometimes a Box-Cox transformation provides a shift parameter to achieve this; "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "boxcox"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " does not.  Such a shift parameter is equivalent to adding a positive constant to "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "x"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " before calling "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "boxcox"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The confidence limits returned when "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "alpha"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is provided give the interval where:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. math::",
                  "_number": 13,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 14,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    llf(\\hat{\\lambda}) - llf(\\lambda) < \\frac{1}{2}\\chi^2(1 - \\alpha, 1),",
                  "_number": 15,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 16,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "math",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "llf(\\hat{\\lambda}) - llf(\\lambda) < \\frac{1}{2}\\chi^2(1 - \\alpha, 1), "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "with "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "llf"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " the log-likelihood function and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "\\chi^2"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " the chi-squared function."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "boxcox_llf",
    "boxcox_normmax",
    "boxcox_normplot",
    "builtins.NoneType",
    "builtins.int",
    "builtins.tuple",
    "matplotlib",
    "matplotlib.figure.Figure",
    "matplotlib.figure.Figure.add_subplot",
    "matplotlib.pyplot",
    "matplotlib.pyplot.figure",
    "matplotlib.pyplot.show",
    "probplot",
    "scipy",
    "scipy.stats",
    "scipy.stats._continuous_distns.loggamma_gen",
    "scipy.stats._continuous_distns.norm_gen",
    "scipy.stats._distn_infrastructure.rv_generic.rvs",
    "scipy.stats.morestats.boxcox",
    "scipy.stats.morestats.probplot"
  ],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/stats/morestats.py",
  "item_line": 946,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.stats.boxcox"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "stats",
              "scipy.stats",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "matplotlib",
              "matplotlib",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "pyplot",
              "matplotlib.pyplot",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "as",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "plt",
              "matplotlib.pyplot",
              "nn"
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "We generate some random variates from a non-normal distribution and make a probability plot for it, to show it is non-normal in the tails:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "fig",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "plt",
              "matplotlib.pyplot",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "figure",
              "matplotlib.pyplot.figure",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ax1",
              "builtins.NoneType",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "fig",
              "matplotlib.figure.Figure",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_subplot",
              "matplotlib.figure.Figure.add_subplot",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "211",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "stats",
              "scipy.stats",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "loggamma",
              "scipy.stats._continuous_distns.loggamma_gen",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "rvs",
              "scipy.stats._distn_infrastructure.rv_generic.rvs",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "size",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "500",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "prob",
              "builtins.tuple",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "stats",
              "scipy.stats",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "probplot",
              "scipy.stats.morestats.probplot",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dist",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "stats",
              "scipy.stats",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "norm",
              "scipy.stats._continuous_distns.norm_gen",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "plot",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "ax1",
              "builtins.NoneType",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ax1",
              "builtins.NoneType",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "set_xlabel",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ax1",
              "builtins.NoneType",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "set_title",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "Probplot against normal distribution",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "We now use "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "boxcox"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " to transform the data so it's closest to normal:"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "ax2",
              "builtins.NoneType",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "fig",
              "matplotlib.figure.Figure",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "add_subplot",
              "matplotlib.figure.Figure.add_subplot",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "212",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "xt",
              "builtins.tuple",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "_",
              "builtins.tuple",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "stats",
              "scipy.stats",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "boxcox",
              "scipy.stats.morestats.boxcox",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "builtins.int",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "prob",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "stats",
              "scipy.stats",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "probplot",
              "scipy.stats.morestats.probplot",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "xt",
              "builtins.tuple",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dist",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "stats",
              "scipy.stats",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "norm",
              "scipy.stats._continuous_distns.norm_gen",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "plot",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "ax2",
              "builtins.NoneType",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ax2",
              "builtins.NoneType",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "set_title",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "Probplot after Box-Cox transformation",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "plt",
              "matplotlib.pyplot",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "show",
              "matplotlib.pyplot.show",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "probplot",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "boxcox_normplot",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "boxcox_normmax",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "boxcox_llf",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    }
  ],
  "signature": "boxcox(x, lmbda=None, alpha=None)",
  "references": [
    "G.E.P. Box and D.R. Cox, \"An Analysis of Transformations\", Journal of the",
    "Royal Statistical Society B, 26, 211-252 (1964)."
  ],
  "arbitrary": []
}