{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Computes the Multiscale Graph Correlation (MGC) test statistic."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Specifically, for each point, MGC finds the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "k"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "-nearest neighbors for one property (e.g. cloud density), and the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "l"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "-nearest neighbors for the other property (e.g. grass wetness) [1]_. This pair "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "(k,",
                    " ",
                    "l)"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is called the \"scale\". A priori, however, it is not know which scales will be most informative. So, MGC computes all distance pairs, and then efficiently computes the distance correlations for all scales. The local correlations illustrate which scales are relatively informative about the relationship. The key, therefore, to successfully discover and decipher relationships between disparate data modalities is to adaptively determine which scales are the most informative, and the geometric implication for the most informative scales. Doing so not only provides an estimate of whether the modalities are related, but also provides insight into how the determination was made. This is especially important in high-dimensional data, where simple visualizations do not reveal relationships to the unaided human eye. Characterizations of this implementation in particular have been derived from and benchmarked within in [2]_."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "x, y",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "y"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " have shapes "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(n,",
                          " ",
                          "p)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(n,",
                          " ",
                          "q)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " where "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "n"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the number of samples and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "p"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "q"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are the number of dimensions, then the MGC independence test will be run.  Alternatively, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "y"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can have shapes "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(n,",
                          " ",
                          "n)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if they are distance or similarity matrices, and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "compute",
                          "_",
                          "distance"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " must be sent to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "y"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " have shapes "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(n,",
                          " ",
                          "p)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(m,",
                          " ",
                          "p)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", an unpaired two-sample MGC test will be run."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "compute_distance",
            "type_": "callable, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A function that computes the distance or similarity among the samples within each data matrix. Set to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "y"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are already distance matrices. The default uses the euclidean norm metric. If you are calling a custom function, either create the distance matrix before-hand or create a function of the form "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "compute",
                          "_",
                          "distance(x)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " where "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "x"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the data matrix for which pairwise distances are calculated."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "reps",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The number of replications used to estimate the null when using the permutation test. The default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "1000"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "workers",
            "type_": "int or map-like callable, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "workers"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is an int the population is subdivided into "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "workers"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " sections and evaluated in parallel (uses "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "multiprocessing.Pool",
                          " ",
                          "<multiprocessing>"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "). Supply "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "-1"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to use all cores available to the Process. Alternatively supply a map-like callable, such as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "multiprocessing.Pool.map"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for evaluating the p-value in parallel. This evaluation is carried out as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "workers(func,",
                          " ",
                          "iterable)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Requires that "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "func"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " be pickleable. The default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "1"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "is_twosamp",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "True"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", a two sample test will be run. If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "y"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " have shapes "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(n,",
                          " ",
                          "p)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(m,",
                          " ",
                          "p)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", this optional will be overriden and set to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "True"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Set to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "True"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "y"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " both have shapes "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(n,",
                          " ",
                          "p)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and a two sample test is desired. The default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "False"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "random_state",
            "type_": "int or np.random.RandomState instance, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If already a RandomState instance, use it. If seed is an int, return a new RandomState instance seeded with seed. If None, use np.random.RandomState. Default is None."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "stat",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The sample MGC test statistic within "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "[-1,",
                          " ",
                          "1]"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "pvalue",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The p-value obtained via permutation."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "mgc_dict",
            "type_": "dict",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Contains additional useful additional returns containing the following keys:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "    - mgc_map : ndarray",
                            "_number": 3,
                            "_offset": 4
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "        A 2D representation of the latent geometry of the relationship.",
                            "_number": 4,
                            "_offset": 8
                          },
                          {
                            "_line": "        of the relationship.",
                            "_number": 5,
                            "_offset": 8
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- mgc_map : ndarray"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "A 2D representation of the latent geometry of the relationship. of the relationship."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "    - opt_scale : (int, int)",
                            "_number": 6,
                            "_offset": 4
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "        The estimated optimal scale as a `(x, y)` pair.",
                            "_number": 7,
                            "_offset": 8
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- opt_scale : (int, int)"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "The estimated optimal scale as a "
                                }
                              },
                              {
                                "type": "Directive",
                                "data": {
                                  "value": [
                                    "(x,",
                                    " ",
                                    "y)"
                                  ],
                                  "domain": null,
                                  "role": null
                                }
                              },
                              {
                                "type": "Words",
                                "data": {
                                  "value": " pair."
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "lines": {
                        "_lines": [
                          {
                            "_line": "    - null_dist : list",
                            "_number": 8,
                            "_offset": 4
                          }
                        ]
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": [
                          {
                            "_line": "        The null distribution derived from the permuted matrices",
                            "_number": 9,
                            "_offset": 8
                          }
                        ]
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "- null_dist : list"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "The null distribution derived from the permuted matrices"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A description of the process of MGC and applications on neuroscience data can be found in [1]_. It is performed using the following steps:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "#. Two distance matrices "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "D^X"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "D^Y"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are computed and"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "   modified to be mean zero columnwise. This results in two    "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "n",
                    " ",
                    "\\times",
                    " ",
                    "n"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " distance matrices "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "A"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "B"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " (the    centering and unbiased modification) [3]_."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "#. For all values "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "k"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "l"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " from "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "1,",
                    " ",
                    "...,",
                    " ",
                    "n"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ","
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "   * The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "k"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "-nearest neighbor and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "l"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "-nearest neighbor graphs"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "     are calculated for each property. Here, "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "G",
                    "_",
                    "k",
                    " ",
                    "(i,",
                    " ",
                    "j)"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " indicates      the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "k"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "-smallest values of the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "i"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "-th row of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "A"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "      and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "H",
                    "_",
                    "l",
                    " ",
                    "(i,",
                    " ",
                    "j)"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " indicates the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "l"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " smallested values of      the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "i"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "-th row of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "B"
                  ],
                  "domain": null,
                  "role": "math"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "   * Let "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "\\circ"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " denotes the entry-wise matrix product, then local"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "     correlations are summed and normalized using the following statistic:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. math::",
                  "_number": 19,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 20,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    c^{kl} = \\frac{\\sum_{ij} A G_k B H_l}",
                  "_number": 21,
                  "_offset": 0
                },
                {
                  "_line": "                  {\\sqrt{\\sum_{ij} A^2 G_k \\times \\sum_{ij} B^2 H_l}}",
                  "_number": 22,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 23,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "math",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "c^{kl} = \\frac{\\sum_{ij} A G_k B H_l}               {\\sqrt{\\sum_{ij} A^2 G_k \\times \\sum_{ij} B^2 H_l}} "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. math::",
                  "_number": 29,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 30,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    MGC_n (x, y) = \\max_{(k, l)} R \\left(c^{kl} \\left( x_n, y_n \\right)",
                  "_number": 31,
                  "_offset": 0
                },
                {
                  "_line": "                                                \\right)",
                  "_number": 32,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 33,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "math",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "MGC_n (x, y) = \\max_{(k, l)} R \\left(c^{kl} \\left( x_n, y_n \\right)                                             \\right) "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "#. The MGC test statistic is the smoothed optimal local correlation of",
                      "_number": 24,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "   :math:`\\{ c^{kl} \\}`. Denote the smoothing operation as :math:`R(\\cdot)`",
                      "_number": 25,
                      "_offset": 3
                    },
                    {
                      "_line": "   (which essentially set all isolated large correlations) as 0 and",
                      "_number": 26,
                      "_offset": 3
                    },
                    {
                      "_line": "   connected large correlations the same as before, see [3]_.) MGC is,",
                      "_number": 27,
                      "_offset": 3
                    },
                    {
                      "_line": "",
                      "_number": 28,
                      "_offset": 3
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "#. The MGC test statistic is the smoothed optimal local correlation of"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "\\{",
                              " ",
                              "c^{kl}",
                              " ",
                              "\\}"
                            ],
                            "domain": null,
                            "role": "math"
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". Denote the smoothing operation as "
                          }
                        },
                        {
                          "type": "Directive",
                          "data": {
                            "value": [
                              "R(\\cdot)"
                            ],
                            "domain": null,
                            "role": "math"
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " (which essentially set all isolated large correlations) as 0 and connected large correlations the same as before, see [3]_.) MGC is, "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The test statistic returns a value between "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "(-1,",
                    " ",
                    "1)"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " since it is normalized."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The p-value returned is calculated using a permutation test. This process is completed by first randomly permuting "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "y"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to estimate the null distribution and then calculating the probability of observing a test statistic, under the null, at least as extreme as the observed test statistic."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "MGC requires at least 5 samples to run with reliable results. It can also handle high-dimensional data sets."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In addition, by manipulating the input data matrices, the two-sample testing problem can be reduced to the independence testing problem [4]_. Given sample data "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "U"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "V"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " of sizes "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "p",
                    " ",
                    "\\times",
                    " ",
                    "n"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "p",
                    " ",
                    "\\times",
                    " ",
                    "m"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", data matrix "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "X"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "Y"
                  ],
                  "domain": null,
                  "role": "math"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " can be created as follows:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. math::",
                  "_number": 52,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 53,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    X = [U | V] \\in \\mathcal{R}^{p \\times (n + m)}",
                  "_number": 54,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 55,
                  "_offset": 0
                },
                {
                  "_line": "    Y = [0_{1 \\times n} | 1_{1 \\times m}] \\in \\mathcal{R}^{(n + m)}",
                  "_number": 56,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 57,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "math",
            "args0": [
              ""
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "X = [U | V] \\in \\mathcal{R}^{p \\times (n + m)}  Y = [0_{1 \\times n} | 1_{1 \\times m}] \\in \\mathcal{R}^{(n + m)} "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Then, the MGC statistic can be calculated as normal. This methodology can be extended to similar tests such as distance correlation [4]_."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. versionadded:: 1.4.0",
                  "_number": 61,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "versionadded",
            "args0": [
              " 1.4.0"
            ],
            "inner": null
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    "kendalltau",
    "pearsonr",
    "spearmanr"
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/scipy/stats/stats.py",
  "item_line": 4801,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.stats.multiscale_graphcorr"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "stats",
              "",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "multiscale_graphcorr",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "y",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "stat",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pvalue",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "_",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "multiscale_graphcorr",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "workers",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "%.1f",
              "",
              "si"
            ],
            [
              ", ",
              "",
              "s2"
            ],
            [
              "%.3f",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "stat",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pvalue",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "'1.0, 0.001'",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Alternatively,"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "y",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "mgc",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "multiscale_graphcorr",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "%.1f",
              "",
              "si"
            ],
            [
              ", ",
              "",
              "s2"
            ],
            [
              "%.3f",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "mgc",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "stat",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mgc",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "pvalue",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "'1.0, 0.001'",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "To run an unpaired two-sample test,"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "y",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "79",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "mgc",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "multiscale_graphcorr",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "random_state",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "%.3f",
              "",
              "si"
            ],
            [
              ", ",
              "",
              "s2"
            ],
            [
              "%.2f",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "mgc",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "stat",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mgc",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "pvalue",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "'0.033, 0.02'",
          "ce_status": "execed"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "or, if shape of the inputs are the same,"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "x",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "arange",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "y",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "mgc",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "multiscale_graphcorr",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "is_twosamp",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "%.3f",
              "",
              "si"
            ],
            [
              ", ",
              "",
              "s2"
            ],
            [
              "%.1f",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "mgc",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "stat",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mgc",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "pvalue",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "'-0.008, 1.0'",
          "ce_status": "execed"
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "pearsonr",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Pearson correlation coefficient and p-value for testing non-correlation."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "kendalltau",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Calculates Kendall's tau."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "spearmanr",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Calculates a Spearman rank-order correlation coefficient."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "signature": "multiscale_graphcorr(x, y, compute_distance=<function _euclidean_dist at 0x10ab1eb80>, reps=1000, workers=1, is_twosamp=False, random_state=None)",
  "references": [
    ".. [1] Vogelstein, J. T., Bridgeford, E. W., Wang, Q., Priebe, C. E.,",
    "       Maggioni, M., & Shen, C. (2019). Discovering and deciphering",
    "       relationships across disparate data modalities. ELife.",
    ".. [2] Panda, S., Palaniappan, S., Xiong, J., Swaminathan, A.,",
    "       Ramachandran, S., Bridgeford, E. W., ... Vogelstein, J. T. (2019).",
    "       mgcpy: A Comprehensive High Dimensional Independence Testing Python",
    "       Package. ArXiv:1907.02088 [Cs, Stat].",
    ".. [3] Shen, C., Priebe, C.E., & Vogelstein, J. T. (2019). From distance",
    "       correlation to multiscale graph correlation. Journal of the American",
    "       Statistical Association.",
    ".. [4] Shen, C. & Vogelstein, J. T. (2018). The Exact Equivalence of",
    "       Distance and Kernel Methods for Hypothesis Testing. ArXiv:1806.05514",
    "       [Cs, Stat]."
  ],
  "arbitrary": []
}