{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. note::",
                  "_number": 0,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    If you are looking for overrides for NumPy-specific methods, see the",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "    documentation for :obj:`unumpy`. This page explains how to write",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "    back-ends and multimethods.",
                  "_number": 3,
                  "_offset": 0
                }
              ]
            },
            "directive_name": "note",
            "args0": [
              ""
            ],
            "inner": {
              "children": [
                {
                  "type": "Words",
                  "data": {
                    "value": "If you are looking for overrides for NumPy-specific methods, see the documentation for "
                  }
                },
                {
                  "type": "Directive",
                  "data": {
                    "value": [
                      "unumpy"
                    ],
                    "domain": null,
                    "role": "obj"
                  }
                },
                {
                  "type": "Words",
                  "data": {
                    "value": ". This page explains how to write back-ends and multimethods."
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "uarray"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is built around a back-end protocol and overridable multimethods. It is necessary to define multimethods for back-ends to be able to override them. See the documentation of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "generate",
                    "_",
                    "multimethod"
                  ],
                  "domain": null,
                  "role": "obj"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " on how to write multimethods."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Let's start with the simplest:"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "ua",
                    "_",
                    "domain",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " defines the back-end *domain*. The domain consists of period- separated string consisting of the modules you extend plus the submodule. For example, if a submodule "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "module2.submodule"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " extends "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "module1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " (i.e., it exposes dispatchables marked as types available in "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "module1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "), then the domain string should be "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "\"module1.module2.submodule\""
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "For the purpose of this demonstration, we'll be creating an object and setting its attributes directly. However, note that you can use a module or your own type as a backend as well."
                }
              }
            ]
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> class Backend: pass",
                  "_number": 16,
                  "_offset": 0
                },
                {
                  "_line": ">>> be = Backend()",
                  "_number": 17,
                  "_offset": 0
                },
                {
                  "_line": ">>> be.__ua_domain__ = \"ua_examples\"",
                  "_number": 18,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 19,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "It might be useful at this point to sidetrack to the documentation of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "generate",
                    "_",
                    "multimethod"
                  ],
                  "domain": null,
                  "role": "obj"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to find out how to generate a multimethod overridable by "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "uarray"
                  ],
                  "domain": null,
                  "role": "obj"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". Needless to say, writing a backend and creating multimethods are mostly orthogonal activities, and knowing one doesn't necessarily require knowledge of the other, although it is certainly helpful. We expect core API designers/specifiers to write the multimethods, and implementors to override them. But, as is often the case, similar people write both."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Without further ado, here's an example multimethod:"
                }
              }
            ]
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> import uarray as ua",
                  "_number": 31,
                  "_offset": 0
                },
                {
                  "_line": ">>> from uarray import Dispatchable",
                  "_number": 32,
                  "_offset": 0
                },
                {
                  "_line": ">>> def override_me(a, b):",
                  "_number": 33,
                  "_offset": 0
                },
                {
                  "_line": "...   return Dispatchable(a, int),",
                  "_number": 34,
                  "_offset": 0
                },
                {
                  "_line": ">>> def override_replacer(args, kwargs, dispatchables):",
                  "_number": 35,
                  "_offset": 0
                },
                {
                  "_line": "...     return (dispatchables[0], args[1]), {}",
                  "_number": 36,
                  "_offset": 0
                },
                {
                  "_line": ">>> overridden_me = ua.generate_multimethod(",
                  "_number": 37,
                  "_offset": 0
                },
                {
                  "_line": "...     override_me, override_replacer, \"ua_examples\"",
                  "_number": 38,
                  "_offset": 0
                },
                {
                  "_line": "... )",
                  "_number": 39,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 40,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Next comes the part about overriding the multimethod. This requires the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "ua",
                    "_",
                    "function",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " protocol, and the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "ua",
                    "_",
                    "convert",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " protocol. The "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "ua",
                    "_",
                    "function",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " protocol has the signature "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "(method,",
                    " ",
                    "args,",
                    " ",
                    "kwargs)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " where "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "method"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the passed multimethod, "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "args"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "/"
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "kwargs"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " specify the arguments and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "dispatchables"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the list of converted dispatchables passed in."
                }
              }
            ]
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> def __ua_function__(method, args, kwargs):",
                  "_number": 48,
                  "_offset": 0
                },
                {
                  "_line": "...     return method.__name__, args, kwargs",
                  "_number": 49,
                  "_offset": 0
                },
                {
                  "_line": ">>> be.__ua_function__ = __ua_function__",
                  "_number": 50,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 51,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "The other protocol of interest is the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "ua",
                    "_",
                    "convert",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " protocol. It has the signature "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "(dispatchables,",
                    " ",
                    "coerce)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". When "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "coerce"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "False"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", conversion between the formats should ideally be an "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "O(1)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " operation, but it means that no memory copying should be involved, only views of the existing data."
                }
              }
            ]
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> def __ua_convert__(dispatchables, coerce):",
                  "_number": 57,
                  "_offset": 0
                },
                {
                  "_line": "...     for d in dispatchables:",
                  "_number": 58,
                  "_offset": 0
                },
                {
                  "_line": "...         if d.type is int:",
                  "_number": 59,
                  "_offset": 0
                },
                {
                  "_line": "...             if coerce and d.coercible:",
                  "_number": 60,
                  "_offset": 0
                },
                {
                  "_line": "...                 yield str(d.value)",
                  "_number": 61,
                  "_offset": 0
                },
                {
                  "_line": "...             else:",
                  "_number": 62,
                  "_offset": 0
                },
                {
                  "_line": "...                 yield d.value",
                  "_number": 63,
                  "_offset": 0
                },
                {
                  "_line": ">>> be.__ua_convert__ = __ua_convert__",
                  "_number": 64,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 65,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Now that we have defined the backend, the next thing to do is to call the multimethod."
                }
              }
            ]
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> with ua.set_backend(be):",
                  "_number": 68,
                  "_offset": 0
                },
                {
                  "_line": "...      overridden_me(1, \"2\")",
                  "_number": 69,
                  "_offset": 0
                },
                {
                  "_line": "('override_me', (1, '2'), {})",
                  "_number": 70,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 71,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Note that the marked type has no effect on the actual type of the passed object. We can also coerce the type of the input."
                }
              }
            ]
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> with ua.set_backend(be, coerce=True):",
                  "_number": 75,
                  "_offset": 0
                },
                {
                  "_line": "...     overridden_me(1, \"2\")",
                  "_number": 76,
                  "_offset": 0
                },
                {
                  "_line": "...     overridden_me(1.0, \"2\")",
                  "_number": 77,
                  "_offset": 0
                },
                {
                  "_line": "('override_me', ('1', '2'), {})",
                  "_number": 78,
                  "_offset": 0
                },
                {
                  "_line": "('override_me', ('1.0', '2'), {})",
                  "_number": 79,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 80,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Another feature is that if you remove "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "ua",
                    "_",
                    "convert",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", the arguments are not converted at all and it's up to the backend to handle that."
                }
              }
            ]
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> del be.__ua_convert__",
                  "_number": 84,
                  "_offset": 0
                },
                {
                  "_line": ">>> with ua.set_backend(be):",
                  "_number": 85,
                  "_offset": 0
                },
                {
                  "_line": "...     overridden_me(1, \"2\")",
                  "_number": 86,
                  "_offset": 0
                },
                {
                  "_line": "('override_me', (1, '2'), {})",
                  "_number": 87,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": [
                {
                  "_line": "",
                  "_number": 88,
                  "_offset": 0
                }
              ]
            },
            "ind": {
              "_lines": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "You also have the option to return "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "NotImplemented"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", in which case processing moves on to the next back-end, which, in this case, doesn't exist. The same applies to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "ua",
                    "_",
                    "convert",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ]
          }
        },
        {
          "type": "Example",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> be.__ua_function__ = lambda *a, **kw: NotImplemented",
                  "_number": 93,
                  "_offset": 0
                },
                {
                  "_line": ">>> with ua.set_backend(be):",
                  "_number": 94,
                  "_offset": 0
                },
                {
                  "_line": "...     overridden_me(1, \"2\")",
                  "_number": 95,
                  "_offset": 0
                },
                {
                  "_line": "Traceback (most recent call last):",
                  "_number": 96,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": [
                {
                  "_line": "    ...",
                  "_number": 97,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "uarray.backend.BackendNotImplementedError: ..."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "The last possibility is if we don't have "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "ua",
                    "_",
                    "convert",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", in which case the job is left up to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_",
                    "_",
                    "ua",
                    "_",
                    "function",
                    "_",
                    "_"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", but putting things back into arrays after conversion will not be possible."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": []
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/dev/scipy/scipy/_lib/_uarray/__init__.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "scipy._lib._uarray"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "signature": null,
  "references": null
}