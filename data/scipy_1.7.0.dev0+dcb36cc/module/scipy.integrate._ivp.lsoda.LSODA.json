{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Adams/BDF method with automatic stiffness detection and switching."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This is a wrapper to the Fortran solver from ODEPACK [1]_. It switches automatically between the nonstiff Adams method and the stiff BDF method. The method was originally detailed in [2]_."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "fun",
            "type_": "callable",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Right-hand side of the system. The calling signature is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "fun(t,",
                          " ",
                          "y)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Here "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "t"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is a scalar, and there are two options for the ndarray "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "y"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": It can either have shape (n,); then "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "fun"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " must return array_like with shape (n,). Alternatively it can have shape (n, k); then "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "fun"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " must return an array_like with shape (n, k), i.e. each column corresponds to a single column in "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "y"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". The choice between the two options is determined by "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "vectorized"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " argument (see below). The vectorized implementation allows a faster approximation of the Jacobian by finite differences (required for this solver)."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "t0",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Initial time."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "y0",
            "type_": "array_like, shape (n,)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Initial state."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "t_bound",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Boundary time - the integration won't continue beyond it. It also determines the direction of the integration."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "first_step",
            "type_": "float or None, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Initial step size. Default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " which means that the algorithm should choose."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "min_step",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Minimum allowed step size. Default is 0.0, i.e., the step size is not bounded and determined solely by the solver."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "max_step",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded and determined solely by the solver."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "rtol, atol",
            "type_": "float and array_like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Relative and absolute tolerances. The solver keeps the local error estimates less than "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "atol",
                          " ",
                          "+",
                          " ",
                          "rtol",
                          " ",
                          "*",
                          " ",
                          "abs(y)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Here "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "rtol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " controls a relative accuracy (number of correct digits). But if a component of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "y"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is approximately below "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "atol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", the error only needs to fall within the same "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "atol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " threshold, and the number of correct digits is not guaranteed. If components of y have different scales, it might be beneficial to set different "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "atol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " values for different components by passing array_like with shape (n,) for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "atol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Default values are 1e-3 for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "rtol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and 1e-6 for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "atol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "jac",
            "type_": "None or callable, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Jacobian matrix of the right-hand side of the system with respect to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "y"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". The Jacobian matrix has shape (n, n) and its element (i, j) is equal to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "d",
                          " ",
                          "f",
                          "_",
                          "i",
                          " ",
                          "/",
                          " ",
                          "d",
                          " ",
                          "y",
                          "_",
                          "j"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". The function will be called as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "jac(t,",
                          " ",
                          "y)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If None (default), the Jacobian will be approximated by finite differences. It is generally recommended to provide the Jacobian rather than relying on a finite-difference approximation."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "lband, uband",
            "type_": "int or None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Parameters defining the bandwidth of the Jacobian, i.e., "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "jac[i,",
                          " ",
                          "j]",
                          " ",
                          "!=",
                          " ",
                          "0",
                          " ",
                          "only",
                          " ",
                          "for",
                          " ",
                          "i",
                          " ",
                          "-",
                          " ",
                          "lband",
                          " ",
                          "<=",
                          " ",
                          "j",
                          " ",
                          "<=",
                          " ",
                          "i",
                          " ",
                          "+",
                          " ",
                          "uband"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Setting these requires your jac routine to return the Jacobian in the packed format: the returned array must have "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "n"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " columns and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "uband",
                          " ",
                          "+",
                          " ",
                          "lband",
                          " ",
                          "+",
                          " ",
                          "1"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " rows in which Jacobian diagonals are written. Specifically "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "jac",
                          "_",
                          "packed[uband",
                          " ",
                          "+",
                          " ",
                          "i",
                          " ",
                          "-",
                          " ",
                          "j",
                          " ",
                          ",",
                          " ",
                          "j]",
                          " ",
                          "=",
                          " ",
                          "jac[i,",
                          " ",
                          "j]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". The same format is used in "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "scipy.linalg.solve",
                          "_",
                          "banded"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (check for an illustration). These parameters can be also used with "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "jac=None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to reduce the number of Jacobian elements estimated by finite differences."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "vectorized",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "fun"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is implemented in a vectorized fashion. A vectorized implementation offers no advantages for this solver. Default is False."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "n",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of equations."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "status",
            "type_": "string",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Current status of the solver: 'running', 'finished' or 'failed'."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "t_bound",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Boundary time."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "direction",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Integration direction: +1 or -1."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "t",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Current time."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "y",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Current state."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "t_old",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Previous time. None if no steps were made yet."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "nfev",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of evaluations of the right-hand side."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "njev",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of evaluations of the Jacobian."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Attributes",
    "References"
  ],
  "item_file": "/Users/bussonniermatthias/dev/scipy/scipy/integrate/_ivp/lsoda.py",
  "item_line": 7,
  "item_type": "<class 'type'>",
  "aliases": [
    "scipy.integrate.LSODA"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "signature": "LSODA(fun, t0, y0, t_bound, first_step=None, min_step=0.0, max_step=inf, rtol=0.001, atol=1e-06, jac=None, lband=None, uband=None, vectorized=False, **extraneous)",
  "references": [
    ".. [1] A. C. Hindmarsh, \"ODEPACK, A Systematized Collection of ODE",
    "       Solvers,\" IMACS Transactions on Scientific Computation, Vol 1.,",
    "       pp. 55-64, 1983.",
    ".. [2] L. Petzold, \"Automatic selection of methods for solving stiff and",
    "       nonstiff systems of ordinary differential equations\", SIAM Journal",
    "       on Scientific and Statistical Computing, Vol. 4, No. 1, pp. 136-148,",
    "       1983."
  ]
}