{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Scalar function and its derivatives."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This class defines a scalar function F: R^n->R and methods for computing or approximating its first and second derivatives."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "fun",
            "type_": "callable",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "evaluates the scalar function. Must be of the form "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "fun(x,",
                          " ",
                          "*",
                          "args)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", where "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the argument in the form of a 1-D array and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "args"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is a tuple of any additional fixed parameters needed to completely specify the function. Should return a scalar."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "x0",
            "type_": "array-like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Provides an initial set of variables for evaluating fun. Array of real elements of size (n,), where 'n' is the number of independent variables."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "args",
            "type_": "tuple, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Any additional fixed parameters needed to completely specify the scalar function."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "grad",
            "type_": "{callable, '2-point', '3-point', 'cs'}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Method for computing the gradient vector. If it is a callable, it should be a function that returns the gradient vector:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    `"
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "grad(x,",
                          " ",
                          "*",
                          "args)",
                          " ",
                          "->",
                          " ",
                          "array",
                          "_",
                          "like,",
                          " ",
                          "shape",
                          " ",
                          "(n,)"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "`"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "where "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is an array with shape (n,) and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "args"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is a tuple with the fixed parameters. Alternatively, the keywords  {'2-point', '3-point', 'cs'} can be used to select a finite difference scheme for numerical estimation of the gradient with a relative step size. These finite difference schemes obey any specified "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "bounds"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "hess",
            "type_": "{callable, '2-point', '3-point', 'cs', HessianUpdateStrategy}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Method for computing the Hessian matrix. If it is callable, it should return the  Hessian matrix:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    `"
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "hess(x,",
                          " ",
                          "*",
                          "args)",
                          " ",
                          "->",
                          " ",
                          "{LinearOperator,",
                          " ",
                          "spmatrix,",
                          " ",
                          "array},",
                          " ",
                          "(n,",
                          " ",
                          "n)"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "`"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "where x is a (n,) ndarray and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "args"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is a tuple with the fixed parameters. Alternatively, the keywords {'2-point', '3-point', 'cs'} select a finite difference scheme for numerical estimation. Or, objects implementing "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "HessianUpdateStrategy"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " interface can be used to approximate the Hessian. Whenever the gradient is estimated via finite-differences, the Hessian cannot be estimated with options {'2-point', '3-point', 'cs'} and needs to be estimated using one of the quasi-Newton strategies."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "finite_diff_rel_step",
            "type_": "None or array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Relative step size to use. The absolute step size is computed as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "h",
                          " ",
                          "=",
                          " ",
                          "finite",
                          "_",
                          "diff",
                          "_",
                          "rel",
                          "_",
                          "step",
                          " ",
                          "*",
                          " ",
                          "sign(x0)",
                          " ",
                          "*",
                          " ",
                          "max(1,",
                          " ",
                          "abs(x0))"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", possibly adjusted to fit into the bounds. For "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "method='3-point'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the sign of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "h"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is ignored. If None then finite_diff_rel_step is selected automatically,"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "finite_diff_bounds",
            "type_": "tuple of array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Lower and upper bounds on independent variables. Defaults to no bounds, (-np.inf, np.inf). Each bound must match the size of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "x0"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or be a scalar, in the latter case the bound will be the same for all variables. Use it to limit the range of function evaluation."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "epsilon",
            "type_": "None or array_like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Absolute step size to use, possibly adjusted to fit into the bounds. For "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "method='3-point'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the sign of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "epsilon"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is ignored. By default relative steps are used, only if "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "epsilon",
                          " ",
                          "is",
                          " ",
                          "not",
                          " ",
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are absolute steps used."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This class implements a memoization logic. There are methods "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "fun"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "grad"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", hess` and corresponding attributes "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "f"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "g"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "H"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". The following things should be considered:"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "    1. Use only public methods "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "fun"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "grad"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "hess"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ".     2. After one of the methods is called, the corresponding attribute"
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "       will be set. However, a subsequent call with a different argument        of *any* of the methods may overwrite the attribute."
                }
              }
            ]
          }
        }
      ]
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Notes"
  ],
  "item_file": "/Users/bussonniermatthias/dev/scipy/scipy/optimize/_differentiable_functions.py",
  "item_line": 11,
  "item_type": "<class 'type'>",
  "aliases": [
    "scipy.optimize._differentiable_functions.ScalarFunction"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "signature": "ScalarFunction(fun, x0, args, grad, hess, finite_diff_rel_step, finite_diff_bounds, epsilon=None)",
  "references": null
}