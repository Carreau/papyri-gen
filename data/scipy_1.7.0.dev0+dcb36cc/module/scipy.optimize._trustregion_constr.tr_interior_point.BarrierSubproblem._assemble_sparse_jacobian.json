{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Assemble sparse Jacobian given its components."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Given "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "J",
                    "_",
                    "eq"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "J",
                    "_",
                    "ineq"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "s"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " returns:"
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "    jacobian = [ J_eq,     0     ]",
                      "_number": 1,
                      "_offset": 4
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "               [ J_ineq, diag(s) ]",
                      "_number": 2,
                      "_offset": 4
                    },
                    {
                      "_line": "",
                      "_number": 3,
                      "_offset": 4
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "jacobian = [ J_eq,     0     ]"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "[ J_ineq, diag(s) ] "
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "It is equivalent to:",
                      "_number": 4,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    sps.bmat([[ J_eq,   None    ],",
                      "_number": 5,
                      "_offset": 0
                    },
                    {
                      "_line": "              [ J_ineq, diag(s) ]], \"csr\")",
                      "_number": 6,
                      "_offset": 0
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "It is equivalent to:"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "sps.bmat([[ J_eq,   None    ],           [ J_ineq, diag(s) ]], \"csr\")"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "but significantly more efficient for this given structure."
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": []
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/Users/bussonniermatthias/dev/scipy/scipy/optimize/_trustregion_constr/tr_interior_point.py",
  "item_line": 165,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem._assemble_sparse_jacobian"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "signature": "_assemble_sparse_jacobian(self, J_eq, J_ineq, s)",
  "references": null
}