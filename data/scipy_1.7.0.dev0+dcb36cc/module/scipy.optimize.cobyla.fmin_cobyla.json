{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Minimize a function using the Constrained Optimization By Linear Approximation (COBYLA) method. This method wraps a FORTRAN implementation of the algorithm."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": []
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "func",
            "type_": "callable",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Function to minimize. In the form func(x, \\*args)."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "x0",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Initial guess."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "cons",
            "type_": "sequence",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Constraint functions; must all be "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          ">=0"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (a single function if only 1 constraint). Each function takes the parameters "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "x"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " as its first argument, and it can return either a single number or an array or list of numbers."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "args",
            "type_": "tuple, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Extra arguments to pass to function."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "consargs",
            "type_": "tuple, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Extra arguments to pass to constraint functions (default of None means use same extra arguments as those passed to func). Use "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "()"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for no extra arguments."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "rhobeg",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Reasonable initial changes to the variables."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "rhoend",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Final accuracy in the optimization (not precisely guaranteed). This is a lower bound on the size of the trust region."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "disp",
            "type_": "{0, 1, 2, 3}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Controls the frequency of output; 0 implies no output."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "maxfun",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum number of function evaluations."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "catol",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Absolute tolerance for constraint violations."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "x",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The argument that minimises "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "f"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This algorithm is based on linear approximations to the objective function and each constraint. We briefly describe the algorithm."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Suppose the function is being minimized over k variables. At the jth iteration the algorithm has k+1 points v_1, ..., v_(k+1), an approximate solution x_j, and a radius RHO_j. (i.e., linear plus a constant) approximations to the objective function and constraint functions such that their function values agree with the linear approximation on the k+1 points v_1,.., v_(k+1). This gives a linear program to solve (where the linear approximations of the constraint functions are constrained to be non-negative)."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "However, the linear approximations are likely only good approximations near the current simplex, so the linear program is given the further requirement that the solution, which will become x_(j+1), must be within RHO_j from x_j. RHO_j only decreases, never increases. The initial RHO_j is rhobeg and the final RHO_j is rhoend. In this way COBYLA's iterations behave like a trust region algorithm."
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Additionally, the linear program may be inconsistent, or the approximation may give poor improvement. For details about how these issues are resolved, as well as how the points v_i are updated, refer to the source code or the references below."
                }
              }
            ]
          }
        }
      ]
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [
    "minimize"
  ],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/dev/scipy/scipy/optimize/cobyla.py",
  "item_line": 37,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.optimize.fmin_cobyla"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Minimize the objective function f(x,y) = x*y subject to the constraints x**2 + y**2 < 1 and y > 0::"
              }
            }
          ]
        }
      },
      {
        "type": "DefList",
        "data": {
          "children": [
            {
              "lines": {
                "_lines": [
                  {
                    "_line": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__",
                    "_number": 0,
                    "_offset": 0
                  }
                ]
              },
              "wh": {
                "_lines": []
              },
              "ind": {
                "_lines": [
                  {
                    "_line": "    >>> def objective(x):",
                    "_number": 0,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...     return x[0]*x[1]",
                    "_number": 1,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...",
                    "_number": 2,
                    "_offset": 0
                  },
                  {
                    "_line": "    >>> def constr1(x):",
                    "_number": 3,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...     return 1 - (x[0]**2 + x[1]**2)",
                    "_number": 4,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...",
                    "_number": 5,
                    "_offset": 0
                  },
                  {
                    "_line": "    >>> def constr2(x):",
                    "_number": 6,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...     return x[1]",
                    "_number": 7,
                    "_offset": 0
                  },
                  {
                    "_line": "    ...",
                    "_number": 8,
                    "_offset": 0
                  },
                  {
                    "_line": "    >>> from scipy.optimize import fmin_cobyla",
                    "_number": 9,
                    "_offset": 0
                  },
                  {
                    "_line": "    >>> fmin_cobyla(objective, [0.0, 0.1], [constr1, constr2], rhoend=1e-7)",
                    "_number": 10,
                    "_offset": 0
                  },
                  {
                    "_line": "    array([-0.70710685,  0.70710671])",
                    "_number": 11,
                    "_offset": 0
                  }
                ]
              },
              "dt": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ":: workaround numpyoc summary/ext summary bug in take2::Line.__init__"
                    }
                  }
                ]
              },
              "dd": {
                "children": [
                  {
                    "type": "Words",
                    "data": {
                      "value": ">>> def objective(x): ...     return x[0]*x[1] ... >>> def constr1(x): ...     return 1 - (x[0]**2 + x[1]**2) ... >>> def constr2(x): ...     return x[1] ... >>> from scipy.optimize import fmin_cobyla >>> fmin_cobyla(objective, [0.0, 0.1], [constr1, constr2], rhoend=1e-7) array([-0.70710685,  0.70710671])"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "The exact solution is (-sqrt(2)/2, sqrt(2)/2)."
              }
            }
          ]
        }
      }
    ]
  },
  "see_also": [
    {
      "name": {
        "name": "minimize",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Interface to minimization algorithms for multivariate functions. See the 'COBYLA' "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "method"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " in particular."
              }
            }
          ]
        }
      ],
      "type": null
    }
  ],
  "signature": "fmin_cobyla(func, x0, cons, args=(), consargs=None, rhobeg=1.0, rhoend=0.0001, maxfun=1000, disp=None, catol=0.0002)",
  "references": [
    "Powell M.J.D. (1994), \"A direct search optimization method that models",
    "the objective and constraint functions by linear interpolation.\", in",
    "Advances in Optimization and Numerical Analysis, eds. S. Gomez and",
    "J-P Hennart, Kluwer Academic (Dordrecht), pp. 51-67",
    "",
    "Powell M.J.D. (1998), \"Direct search algorithms for optimization",
    "calculations\", Acta Numerica 7, 287-336",
    "",
    "Powell M.J.D. (2007), \"A view of algorithms for optimization without",
    "derivatives\", Cambridge University Technical Report DAMTP 2007/NA03"
  ]
}