{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Creates a ScalarFunction object for use with scalar minimizers (BFGS/LBFGSB/SLSQP/TNC/CG/etc)."
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": []
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "fun",
            "type_": "callable",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The objective function to be minimized."
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    `"
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "fun(x,",
                          " ",
                          "*",
                          "args)",
                          " ",
                          "->",
                          " ",
                          "float"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "`"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "where "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "x"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is an 1-D array with shape (n,) and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "args"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is a tuple of the fixed parameters needed to completely specify the function."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "x0",
            "type_": "ndarray, shape (n,)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Initial guess. Array of real elements of size (n,), where 'n' is the number of independent variables."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "jac",
            "type_": "{callable,  '2-point', '3-point', 'cs', None}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Method for computing the gradient vector. If it is a callable, it should be a function that returns the gradient vector:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    `"
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "jac(x,",
                          " ",
                          "*",
                          "args)",
                          " ",
                          "->",
                          " ",
                          "array",
                          "_",
                          "like,",
                          " ",
                          "shape",
                          " ",
                          "(n,)"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "`"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If one of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "{'2-point',",
                          " ",
                          "'3-point',",
                          " ",
                          "'cs'}"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is selected then the gradient is calculated with a relative step for finite differences. If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "None"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", then two-point finite differences with an absolute step is used."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "args",
            "type_": "tuple, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Extra arguments passed to the objective function and its derivatives ("
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "fun"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "jac"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " functions)."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "bounds",
            "type_": "sequence, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Bounds on variables. 'new-style' bounds are required."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "eps",
            "type_": "float or ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "jac",
                          " ",
                          "is",
                          " ",
                          "None"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the absolute step size used for numerical approximation of the jacobian via forward differences."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "finite_diff_rel_step",
            "type_": "None or array_like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "jac",
                          " ",
                          "in",
                          " ",
                          "['2-point',",
                          " ",
                          "'3-point',",
                          " ",
                          "'cs']"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the relative step size to use for numerical approximation of the jacobian. The absolute step size is computed as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "h",
                          " ",
                          "=",
                          " ",
                          "rel",
                          "_",
                          "step",
                          " ",
                          "*",
                          " ",
                          "sign(x0)",
                          " ",
                          "*",
                          " ",
                          "max(1,",
                          " ",
                          "abs(x0))"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", possibly adjusted to fit into the bounds. For "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "method='3-point'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the sign of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "h"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is ignored. If None (default) then step is selected automatically."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "hess",
            "type_": "{callable,  '2-point', '3-point', 'cs', None}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Computes the Hessian matrix. If it is callable, it should return the Hessian matrix:"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "    `"
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "hess(x,",
                          " ",
                          "*",
                          "args)",
                          " ",
                          "->",
                          " ",
                          "{LinearOperator,",
                          " ",
                          "spmatrix,",
                          " ",
                          "array},",
                          " ",
                          "(n,",
                          " ",
                          "n)"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "`"
                      }
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Alternatively, the keywords {'2-point', '3-point', 'cs'} select a finite difference scheme for numerical estimation. Whenever the gradient is estimated via finite-differences, the Hessian cannot be estimated with options {'2-point', '3-point', 'cs'} and needs to be estimated using one of the quasi-Newton strategies."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "sf",
            "type_": "ScalarFunction",
            "desc": []
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": []
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns"
  ],
  "item_file": "/Users/bussonniermatthias/dev/scipy/scipy/optimize/optimize.py",
  "item_line": 173,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.optimize._trustregion._prepare_scalar_function"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "signature": "_prepare_scalar_function(fun, x0, jac=None, args=(), bounds=None, epsilon=None, finite_diff_rel_step=None, hess=None)",
  "references": null
}