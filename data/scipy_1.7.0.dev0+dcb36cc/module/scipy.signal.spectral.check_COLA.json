{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Check whether the Constant OverLap Add (COLA) constraint is met"
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": []
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "window",
            "type_": "str or tuple or array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Desired window to use. If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "window"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is a string or tuple, it is passed to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "get",
                          "_",
                          "window"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to generate the window values, which are DFT-even by default. See "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "get",
                          "_",
                          "window"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for a list of windows and required parameters. If "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "window"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is array_like it will be used directly as the window and its length must be nperseg."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "nperseg",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Length of each segment."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "noverlap",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of points to overlap between segments."
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "tol",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The allowed variance of a bin's weighted sum from the median bin sum."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "verdict",
            "type_": "bool",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "True"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if chosen combination satisfies COLA within "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "tol"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "False"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " otherwise"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": []
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "In order to enable inversion of an STFT via the inverse STFT in "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "istft"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", it is sufficient that the signal windowing obeys the constraint of \"Constant OverLap Add\" (COLA). This ensures that every point in the input data is equally weighted, thereby avoiding aliasing and allowing full reconstruction."
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "Some examples of windows that satisfy COLA:",
                      "_number": 6,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    - Rectangular window at overlap of 0, 1/2, 2/3, 3/4, ...",
                      "_number": 7,
                      "_offset": 0
                    },
                    {
                      "_line": "    - Bartlett window at overlap of 1/2, 3/4, 5/6, ...",
                      "_number": 8,
                      "_offset": 0
                    },
                    {
                      "_line": "    - Hann window at 1/2, 2/3, 3/4, ...",
                      "_number": 9,
                      "_offset": 0
                    },
                    {
                      "_line": "    - Any Blackman family window at 2/3 overlap",
                      "_number": 10,
                      "_offset": 0
                    },
                    {
                      "_line": "    - Any window with ``noverlap = nperseg-1``",
                      "_number": 11,
                      "_offset": 0
                    },
                    {
                      "_line": "",
                      "_number": 12,
                      "_offset": 0
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Some examples of windows that satisfy COLA:"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- Rectangular window at overlap of 0, 1/2, 2/3, 3/4, ... - Bartlett window at overlap of 1/2, 3/4, 5/6, ... - Hann window at 1/2, 2/3, 3/4, ... - Any Blackman family window at 2/3 overlap - Any window with "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "noverlap",
                          " ",
                          "=",
                          " ",
                          "nperseg-1"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " "
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "A very comprehensive list of other windows may be found in [2]_, wherein the COLA condition is satisfied when the \"Amplitude Flatness\" is unity."
                }
              }
            ]
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ".. versionadded:: 0.19.0",
                  "_number": 17,
                  "_offset": 0
                }
              ]
            },
            "wh": {
              "_lines": []
            },
            "ind": {
              "_lines": []
            },
            "directive_name": "versionadded",
            "args0": [
              " 0.19.0"
            ],
            "inner": null
          }
        }
      ]
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [
    "check_NOLA",
    "istft",
    "stft"
  ],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "item_file": "/Users/bussonniermatthias/dev/scipy/scipy/signal/spectral.py",
  "item_line": 770,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.signal.check_COLA"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "from",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              "",
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "signal",
              "",
              ""
            ]
          ],
          "out": "",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Confirm COLA condition for rectangular window of 75% (3/4) overlap:"
              }
            }
          ]
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "check_COLA",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "windows",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "boxcar",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "75",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "True",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "COLA is not true for 25% (1/4) overlap, though:"
              }
            }
          ]
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "check_COLA",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "windows",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "boxcar",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "25",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "False",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "\"Symmetrical\" Hann window (for filter design) is not COLA:"
              }
            }
          ]
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "check_COLA",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "windows",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "hann",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "120",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "sym",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "120",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "60",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "False",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "\"Periodic\" or \"DFT-even\" Hann window (for FFT analysis) is COLA for overlap of 1/2, 2/3, 3/4, etc.:"
              }
            }
          ]
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "check_COLA",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "windows",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "hann",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "120",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "sym",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "False",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "120",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "60",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "True",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "check_COLA",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "windows",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "hann",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "120",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "sym",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "False",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "120",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "80",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "True",
          "ce_status": "compiled"
        }
      },
      {
        "type": "Code",
        "data": {
          "entries": [
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "check_COLA",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "signal",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "windows",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "hann",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "120",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "sym",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "False",
              "",
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "120",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "90",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "True",
          "ce_status": "compiled"
        }
      }
    ]
  },
  "see_also": [
    {
      "name": {
        "name": "check_NOLA",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Check whether the Nonzero Overlap Add (NOLA) constraint is met"
              }
            }
          ]
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "stft",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Short Time Fourier Transform"
              }
            }
          ]
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "istft",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "children": [
            {
              "type": "Words",
              "data": {
                "value": "Inverse Short Time Fourier Transform"
              }
            }
          ]
        }
      ],
      "type": null
    }
  ],
  "signature": "check_COLA(window, nperseg, noverlap, tol=1e-10)",
  "references": [
    ".. [1] Julius O. Smith III, \"Spectral Audio Signal Processing\", W3K",
    "       Publishing, 2011,ISBN 978-0-9745607-3-1.",
    ".. [2] G. Heinzel, A. Ruediger and R. Schilling, \"Spectrum and",
    "       spectral density estimation by the Discrete Fourier transform",
    "       (DFT), including a comprehensive list of window functions and",
    "       some new at-top windows\", 2002,",
    "       http://hdl.handle.net/11858/00-001M-0000-0013-557A-5"
  ]
}