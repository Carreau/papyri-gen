{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Row-based list of lists sparse matrix"
                }
              }
            ]
          }
        }
      ]
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "This is a structure for constructing sparse matrices incrementally. Note that inserting a single item can take linear time in the worst case; to construct a matrix efficiently, make sure the items are pre-sorted by index, per row."
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "This can be instantiated in several ways:",
                      "_number": 5,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    lil_matrix(D)",
                      "_number": 6,
                      "_offset": 0
                    },
                    {
                      "_line": "        with a dense matrix or rank-2 ndarray D",
                      "_number": 7,
                      "_offset": 0
                    },
                    {
                      "_line": "",
                      "_number": 8,
                      "_offset": 0
                    },
                    {
                      "_line": "    lil_matrix(S)",
                      "_number": 9,
                      "_offset": 0
                    },
                    {
                      "_line": "        with another sparse matrix S (equivalent to S.tolil())",
                      "_number": 10,
                      "_offset": 0
                    },
                    {
                      "_line": "",
                      "_number": 11,
                      "_offset": 0
                    },
                    {
                      "_line": "    lil_matrix((M, N), [dtype])",
                      "_number": 12,
                      "_offset": 0
                    },
                    {
                      "_line": "        to construct an empty matrix with shape (M, N)",
                      "_number": 13,
                      "_offset": 0
                    },
                    {
                      "_line": "        dtype is optional, defaulting to dtype='d'.",
                      "_number": 14,
                      "_offset": 0
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This can be instantiated in several ways:"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "lil_matrix(D)     with a dense matrix or rank-2 ndarray D  lil_matrix(S)     with another sparse matrix S (equivalent to S.tolil())  lil_matrix((M, N), [dtype])     to construct an empty matrix with shape (M, N)     dtype is optional, defaulting to dtype='d'."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Parameters": {
      "children": []
    },
    "Returns": {
      "children": []
    },
    "Yields": {
      "children": []
    },
    "Receives": {
      "children": []
    },
    "Raises": {
      "children": []
    },
    "Warns": {
      "children": []
    },
    "Other Parameters": {
      "children": []
    },
    "Attributes": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "dtype",
            "type_": "dtype",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Data type of the matrix"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "shape",
            "type_": "2-tuple",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Shape of the matrix"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "ndim",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of dimensions (this is always 2)"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "nnz",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of stored values, including explicit zeros"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "data",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "LIL format data array of the matrix"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "rows",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "LIL format row index array of the matrix"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Methods": {
      "children": []
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "children": [
              {
                "type": "Words",
                "data": {
                  "value": "Sparse matrices can be used in arithmetic operations: they support addition, subtraction, multiplication, division, and matrix power."
                }
              }
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "Advantages of the LIL format",
                      "_number": 3,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    - supports flexible slicing",
                      "_number": 4,
                      "_offset": 0
                    },
                    {
                      "_line": "    - changes to the matrix sparsity structure are efficient",
                      "_number": 5,
                      "_offset": 0
                    },
                    {
                      "_line": "",
                      "_number": 6,
                      "_offset": 0
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Advantages of the LIL format"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- supports flexible slicing - changes to the matrix sparsity structure are efficient "
                      }
                    }
                  ]
                }
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "Disadvantages of the LIL format",
                      "_number": 7,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    - arithmetic operations LIL + LIL are slow (consider CSR or CSC)",
                      "_number": 8,
                      "_offset": 0
                    },
                    {
                      "_line": "    - slow column slicing (consider CSC)",
                      "_number": 9,
                      "_offset": 0
                    },
                    {
                      "_line": "    - slow matrix vector products (consider CSR or CSC)",
                      "_number": 10,
                      "_offset": 0
                    },
                    {
                      "_line": "",
                      "_number": 11,
                      "_offset": 0
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Disadvantages of the LIL format"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- arithmetic operations LIL + LIL are slow (consider CSR or CSC) - slow column slicing (consider CSC) - slow matrix vector products (consider CSR or CSC) "
                      }
                    }
                  ]
                }
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "Intended Usage",
                      "_number": 12,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    - LIL is a convenient format for constructing sparse matrices",
                      "_number": 13,
                      "_offset": 0
                    },
                    {
                      "_line": "    - once a matrix has been constructed, convert to CSR or",
                      "_number": 14,
                      "_offset": 0
                    },
                    {
                      "_line": "      CSC format for fast arithmetic and matrix vector operations",
                      "_number": 15,
                      "_offset": 0
                    },
                    {
                      "_line": "    - consider using the COO format when constructing large matrices",
                      "_number": 16,
                      "_offset": 0
                    },
                    {
                      "_line": "",
                      "_number": 17,
                      "_offset": 0
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Intended Usage"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- LIL is a convenient format for constructing sparse matrices - once a matrix has been constructed, convert to CSR or   CSC format for fast arithmetic and matrix vector operations - consider using the COO format when constructing large matrices "
                      }
                    }
                  ]
                }
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "Data Structure",
                      "_number": 18,
                      "_offset": 0
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "    - An array (``self.rows``) of rows, each of which is a sorted",
                      "_number": 19,
                      "_offset": 0
                    },
                    {
                      "_line": "      list of column indices of non-zero elements.",
                      "_number": 20,
                      "_offset": 0
                    },
                    {
                      "_line": "    - The corresponding nonzero values are stored in similar",
                      "_number": 21,
                      "_offset": 0
                    },
                    {
                      "_line": "      fashion in ``self.data``.",
                      "_number": 22,
                      "_offset": 0
                    }
                  ]
                },
                "dt": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Data Structure"
                      }
                    }
                  ]
                },
                "dd": {
                  "children": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "- An array ("
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "self.rows"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ") of rows, each of which is a sorted   list of column indices of non-zero elements. - The corresponding nonzero values are stored in similar   fashion in "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "self.data"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "Warnings": {
      "children": []
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Attributes",
    "Notes"
  ],
  "item_file": "/Users/bussonniermatthias/dev/scipy/scipy/sparse/lil.py",
  "item_line": 20,
  "item_type": "<class 'type'>",
  "aliases": [
    "scipy.sparse.lil_matrix"
  ],
  "example_section_data": {
    "children": []
  },
  "see_also": [],
  "signature": "lil_matrix(arg1, shape=None, dtype=None, copy=False)",
  "references": null
}