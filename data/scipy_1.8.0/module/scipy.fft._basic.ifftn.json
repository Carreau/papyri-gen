{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This function computes the inverse of the N-D discrete Fourier Transform over any number of axes in an M-D array by means of the Fast Fourier Transform (FFT).  In other words, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ifftn(fftn(x)) == x"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to within numerical accuracy."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The input, analogously to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.fft._basic.ifft",
                    "version": "1.8.0"
                  },
                  "value": "ifft"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", should be ordered in the same way as is returned by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.fft._basic.fftn",
                    "version": "1.8.0"
                  },
                  "value": "fftn"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", i.e., it should have the term for zero frequency in all axes in the low-order corner, the positive frequency terms in the first half of all axes, the term for the Nyquist frequency in the middle of all axes and the negative frequency terms in the second half of all axes, in order of decreasingly negative frequency."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Zero-padding, analogously with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.fft._basic.ifft",
                    "version": "1.8.0"
                  },
                  "value": "ifft"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", is performed by appending zeros to the input along the specified dimension. Although this is the common approach, it might lead to surprising results. If another form of zero padding is desired, it must be performed before "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.fft._basic.ifftn",
                    "version": "1.8.0"
                  },
                  "value": "ifftn"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is called."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Input array, can be complex."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x",
            "type_": "array_like"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Shape (length of each transformed axis) of the output ("
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "s[0]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " refers to axis 0, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "s[1]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " to axis 1, etc.). This corresponds to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "n"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "ifft(x, n)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Along any axis, if the given shape is smaller than that of the input, the input is cropped. If it is larger, the input is padded with zeros. if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "s",
                          "version": null
                        },
                        "value": "s"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is not given, the shape of the input along the axes specified by "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "axes",
                          "version": null
                        },
                        "value": "axes"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is used. See notes for issue on "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.fft._basic.ifft",
                          "version": "1.8.0"
                        },
                        "value": "ifft"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " zero padding."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "s",
            "type_": "sequence of ints, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Axes over which to compute the IFFT.  If not given, the last "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "len(s)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " axes are used, or all axes if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "s",
                          "version": null
                        },
                        "value": "s"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is also not specified."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "axes",
            "type_": "sequence of ints, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Normalization mode (see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.fft",
                          "version": "1.8.0"
                        },
                        "value": "fft"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "). Default is \"backward\"."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "norm",
            "type_": "{\"backward\", \"ortho\", \"forward\"}, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True, the contents of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x",
                          "version": null
                        },
                        "value": "x"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " can be destroyed; the default is False. See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fft"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for more details."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "overwrite_x",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Maximum number of workers to use for parallel computation. If negative, the value wraps around from "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "os.cpu_count()"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "~scipy.fft.fft"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for more details."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "workers",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "This argument is reserved for passing in a precomputed plan provided by downstream FFT vendors. It is currently not used in SciPy."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "1.5.0 "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "versionadded",
                  "title": "TODO"
                },
                "type": "Admonition"
              }
            ],
            "param": "plan",
            "type_": "object, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "s",
                          "version": null
                        },
                        "value": "s"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "axes",
                          "version": null
                        },
                        "value": "axes"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " have different length."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "ValueError"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If an element of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "axes",
                          "version": null
                        },
                        "value": "axes"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is larger than than the number of axes of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x",
                          "version": null
                        },
                        "value": "x"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "IndexError"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The truncated or zero-padded input, transformed along the axes indicated by "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "axes",
                          "version": null
                        },
                        "value": "axes"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", or by a combination of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "s",
                          "version": null
                        },
                        "value": "s"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x",
                          "version": null
                        },
                        "value": "x"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", as explained in the parameters section above."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "out",
            "type_": "complex ndarray"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Compute the N-D inverse discrete Fourier Transform."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.sp_fft.ifftn"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "fft",
              "scipy.fft",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "eye",
              "numpy.eye",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fft",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "ifftn",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fft",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fftn",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "axes",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "axes",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([[1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], # may vary\n       [0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j],\n       [0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],\n       [0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j]])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Create and plot an image with band-limited frequency content:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "matplotlib",
              "matplotlib",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "pyplot",
              "matplotlib.pyplot",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "as",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "plt",
              "matplotlib.pyplot",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "rng",
              "numpy.random._generator.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "numpy.random",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "default_rng",
              "numpy.random._generator.default_rng",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "n",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "zeros",
              "numpy.zeros",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "200",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "200",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "complex",
              "builtins.complex",
              "nb"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "n",
              "numpy.ndarray",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "60",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "80",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "20",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "40",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "exp",
              "numpy.exp",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "j",
              "builtins.complex",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "rng",
              "numpy.random._generator.Generator",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "uniform",
              "builtins.Generator.uniform",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "pi",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "20",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "20",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "im",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fft",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "ifftn",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "n",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "real",
              null,
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "plt",
              "matplotlib.pyplot",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "imshow",
              "matplotlib.pyplot.imshow",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "im",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "<matplotlib.image.AxesImage object at 0x...>"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "plt",
              "matplotlib.pyplot",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "show",
              "matplotlib.pyplot.show",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "value": "fig-scipy.fft._basic.ifftn-0.png"
        },
        "type": "Fig"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/fft/_basic.py",
  "item_line": 719,
  "item_type": "<class 'uarray._Function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.Generator.uniform",
    "builtins.complex",
    "builtins.float",
    "fftn",
    "ifft",
    "ifft2",
    "ifftshift",
    "matplotlib",
    "matplotlib.pyplot",
    "matplotlib.pyplot.imshow",
    "matplotlib.pyplot.show",
    "numpy",
    "numpy.exp",
    "numpy.eye",
    "numpy.ndarray",
    "numpy.random",
    "numpy.random._generator.Generator",
    "numpy.random._generator.default_rng",
    "numpy.zeros",
    "scipy",
    "scipy.fft"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "The forward N-D FFT, of which "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "ifftn"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " is the inverse."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "fftn",
        "ref": "scipy.fft._basic.fftn"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "The 1-D inverse FFT."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "ifft",
        "ref": "scipy.fft._basic.ifft"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "The 2-D inverse FFT."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "ifft2",
        "ref": "scipy.fft._basic.ifft2"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Undoes "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "fftshift"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", shifts zero-frequency terms to beginning of array."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": null,
        "name": "ifftshift",
        "ref": null
      },
      "type": null
    }
  ],
  "signature": {
    "value": null
  }
}