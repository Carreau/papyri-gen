{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For a single dimension array "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dct(x, norm='ortho')"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is equal to MATLAB "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "dct(x)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "correspondence with the direct Fourier transform. To recover it you must specify ``orthogonalize=False``. "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "warning",
            "title": "For ``type in {1, 2, 3}``, ``norm=\"ortho\"`` breaks the direct"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=\"ortho\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " both the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.fft._realtransforms.dct",
                    "version": "1.8.0"
                  },
                  "value": "dct"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.fft._realtransforms.idct",
                    "version": "1.8.0"
                  },
                  "value": "idct"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " are scaled by the same overall factor in both directions. By default, the transform is also orthogonalized which for types 1, 2 and 3 means the transform definition is modified to give orthogonality of the DCT matrix (see below)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=\"backward\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", there is no scaling on "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.fft._realtransforms.dct",
                    "version": "1.8.0"
                  },
                  "value": "dct"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " and the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.fft._realtransforms.idct",
                    "version": "1.8.0"
                  },
                  "value": "idct"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is scaled by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "1/N"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "N"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is the \"logical\" size of the DCT. For "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=\"forward\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "1/N"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " normalization is applied to the forward "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.fft._realtransforms.dct",
                    "version": "1.8.0"
                  },
                  "value": "dct"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " instead and the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.fft._realtransforms.idct",
                    "version": "1.8.0"
                  },
                  "value": "idct"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " is unnormalized."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "There are, theoretically, 8 types of the DCT, only the first 4 types are implemented in SciPy.'The' DCT generally refers to DCT type 2, and 'the' Inverse DCT generally refers to DCT type 3."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "content": {
                    "value": "Type I"
                  }
                },
                "type": "Strong"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "There are several definitions of the DCT-I; we use the following (for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=\"backward\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "y_k = x_0 + ( - 1)^k x_ { N - 1} + 2 \\sum_ { n=1}^ { N - 2} x_n \\cos\\left ( \\frac { \\pi k n} { N - 1} \\right) "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "orthogonalize=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x[0]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x[N-1]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are multiplied by a scaling factor of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\sqrt{2}"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "y[0]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "y[N-1]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are divided by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\sqrt{2}"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ". When combined with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=\"ortho\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", this makes the corresponding matrix of coefficients orthonormal ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "O @ O.T = np.eye(N)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "The DCT - I is only supported for input size > 1. "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "note",
            "title": ""
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "content": {
                    "value": "Type II"
                  }
                },
                "type": "Strong"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "There are several definitions of the DCT-II; we use the following (for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=\"backward\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "y_k = 2 \\sum_ { n=0}^ { N - 1} x_n \\cos\\left ( \\frac { \\pi k ( 2n+1)} { 2N} \\right) "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "orthogonalize=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "y[0]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is divided by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\sqrt{2}"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " which, when combined with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=\"ortho\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", makes the corresponding matrix of coefficients orthonormal ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "O @ O.T = np.eye(N)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "content": {
                    "value": "Type III"
                  }
                },
                "type": "Strong"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "There are several definitions, we use the following (for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=\"backward\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "y_k = x_0 + 2 \\sum_ { n=1}^ { N - 1} x_n \\cos\\left ( \\frac { \\pi ( 2k+1)n} { 2N}\\right) "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "orthogonalize=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x[0]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " terms are multiplied by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\sqrt{2}"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " which, when combined with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=\"ortho\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", makes the corresponding matrix of coefficients orthonormal ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "O @ O.T = np.eye(N)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The (unnormalized) DCT-III is the inverse of the (unnormalized) DCT-II, up to a factor "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "2N"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ". The orthonormalized DCT-III is exactly the inverse of the orthonormalized DCT-II."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "content": {
                    "value": "Type IV"
                  }
                },
                "type": "Strong"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "There are several definitions of the DCT-IV; we use the following (for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "norm=\"backward\""
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ")"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "y_k = 2 \\sum_ { n=0}^ { N - 1} x_n \\cos\\left ( \\frac { \\pi ( 2k+1) ( 2n+1)} { 4N} \\right) "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": [
                    "orthogonalize"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " has no effect here, as the DCT-IV matrix is already orthogonal up to a scale factor of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "2N"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The input array."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x",
            "type_": "array_like"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Type of the DCT (see Notes). Default type is 2."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "type",
            "type_": "{1, 2, 3, 4}, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Length of the transform.  If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "n < x.shape[axis]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x",
                          "version": null
                        },
                        "value": "x"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is truncated.  If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "n > x.shape[axis]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x",
                          "version": null
                        },
                        "value": "x"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is zero-padded. The default results in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "n = x.shape[axis]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "n",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Axis along which the dct is computed; the default is over the last axis (i.e., "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "axis=-1"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ")."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "axis",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Normalization mode (see Notes). Default is \"backward\"."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "norm",
            "type_": "{\"backward\", \"ortho\", \"forward\"}, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True, the contents of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x",
                          "version": null
                        },
                        "value": "x"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " can be destroyed; the default is False."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "overwrite_x",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Maximum number of workers to use for parallel computation. If negative, the value wraps around from "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "os.cpu_count()"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "~scipy.fft.fft"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for more details."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "workers",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether to use the orthogonalized DCT variant (see Notes). Defaults to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " when "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "norm==\"ortho\""
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "False"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " otherwise."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "1.8.0 "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "versionadded",
                  "title": "TODO"
                },
                "type": "Admonition"
              }
            ],
            "param": "orthogonalize",
            "type_": "bool, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The transformed input array."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "y",
            "type_": "ndarray of real"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Return the Discrete Cosine Transform of arbitrary type sequence x."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.sp_fft.dct"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The Type 1 DCT is equivalent to the FFT (though faster) for real, even-symmetrical inputs. The output is also real and even-symmetrical. Half of the FFT input is used to generate half of the FFT output:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "fft",
              "scipy.fft",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "fft",
              "builtins._Function",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dct",
              "builtins._Function",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "fft",
              "builtins._Function",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "4.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3.",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "real",
              null,
              ""
            ]
          ],
          "out": "array([ 30.,  -8.,   6.,  -2.,   6.,  -8.])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "dct",
              "builtins._Function",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "4.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10.",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([ 30.,  -8.,   6.,  -2.])"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/fft/_realtransforms.py",
  "item_line": 264,
  "item_type": "<class 'uarray._Function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins._Function",
    "idct",
    "numpy",
    "numpy.array",
    "scipy",
    "scipy.fft"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Inverse DCT"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "idct",
        "ref": "scipy.fft._realtransforms.idct"
      },
      "type": null
    }
  ],
  "signature": {
    "value": null
  }
}