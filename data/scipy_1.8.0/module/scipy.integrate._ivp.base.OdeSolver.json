{
  "aliases": [
    "scipy.signal._ltisys.integrate.OdeSolver"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Number of equations."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "n",
                "type_": "int"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Current status of the solver: 'running', 'finished' or 'failed'."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "status",
                "type_": "string"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Boundary time."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "t_bound",
                "type_": "float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Integration direction: +1 or -1."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "direction",
                "type_": "float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Current time."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "t",
                "type_": "float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Current state."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "y",
                "type_": "ndarray"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Previous time. None if no steps were made yet."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "t_old",
                "type_": "float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Size of the last successful step. None if no steps were made yet."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "step_size",
                "type_": "float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Number of the system's rhs evaluations."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "nfev",
                "type_": "int"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Number of the Jacobian evaluations."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "njev",
                "type_": "int"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Number of LU decompositions."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "nlu",
                "type_": "int"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "In order to implement a new solver you need to follow the guidelines:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "children": [
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "A constructor must accept parameters presented in the base class        (listed below) along with any other parameters specific to a solver."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "A constructor must accept arbitrary extraneous arguments        "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "**extraneous"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", but warn that these arguments are irrelevant        using "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "anchor": null,
                                  "exists": true,
                                  "kind": "module",
                                  "reference": {
                                    "kind": "module",
                                    "module": "scipy",
                                    "path": "scipy.integrate._ivp.common.warn_extraneous",
                                    "version": "1.8.0"
                                  },
                                  "value": "common.warn_extraneous"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": " function. Do not pass these        arguments to the base class."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "A solver must implement a private method "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "_step_impl(self)"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " which        propagates a solver one step further. It must return tuple        "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "(success, message)"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": ", where "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "success"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is a boolean indicating        whether a step was successful, and "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "message"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " is a string        containing description of a failure if a step failed or None        otherwise."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "A solver must implement a private method "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "_dense_output_impl(self)"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": ",        which returns a "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "anchor": null,
                                  "exists": true,
                                  "kind": "module",
                                  "reference": {
                                    "kind": "module",
                                    "module": "scipy",
                                    "path": "scipy.integrate._ivp.base.DenseOutput",
                                    "version": "1.8.0"
                                  },
                                  "value": "DenseOutput"
                                },
                                "type": "Link"
                              },
                              {
                                "data": {
                                  "value": " object covering the last successful        step."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "A solver must have attributes listed below in Attributes section.        Note that "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "t_old"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " and "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "step_size"
                                  ]
                                },
                                "type": "Verbatim"
                              },
                              {
                                "data": {
                                  "value": " are updated automatically."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "Use "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "fun(self, t, y)"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " method for the system rhs evaluation, this        way the number of function evaluations ("
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "nfev"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": ") will be tracked        automatically."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "For convenience, a base class provides "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "fun_single(self, t, y)"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " and        "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "fun_vectorized(self, t, y)"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " for evaluating the rhs in        non-vectorized and vectorized fashions respectively (regardless of        how "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "fun"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " from the constructor is implemented). These calls don't        increment "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "nfev"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": "."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "If a solver uses a Jacobian matrix and LU decompositions, it should        track the number of Jacobian evaluations ("
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "njev"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": ") and the number of        LU decompositions ("
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "nlu"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": ")."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    },
                    {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "data": {
                                  "value": "By convention, the function evaluations used to compute a finite        difference approximation of the Jacobian should not be counted in        "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "nfev"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": ", thus use "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "fun_single(self, t, y)"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " or        "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "domain": null,
                                  "role": null,
                                  "value": "fun_vectorized(self, t, y)"
                                },
                                "type": "Directive"
                              },
                              {
                                "data": {
                                  "value": " when computing a finite difference        approximation of the Jacobian."
                                },
                                "type": "Words"
                              }
                            ]
                          },
                          "type": "Paragraph"
                        }
                      ]
                    }
                  ]
                },
                "type": "EnumeratedList"
              }
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Right-hand side of the system. The calling signature is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fun(t, y)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Here "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "t"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is a scalar and there are two options for ndarray "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "y"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". It can either have shape (n,), then "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fun"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " must return array_like with shape (n,). Or, alternatively, it can have shape (n, n_points), then "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "fun"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " must return array_like with shape (n, n_points) (each column corresponds to a single column in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "y"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "). The choice between the two options is determined by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "vectorized"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " argument (see below)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "fun",
                "type_": "callable"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Initial time."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "t0",
                "type_": "float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Initial state."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "y0",
                "type_": "array_like, shape (n,)"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Boundary time --- the integration won't continue beyond it. It also determines the direction of the integration."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "t_bound",
                "type_": "float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Whether "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "fun"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " is implemented in a vectorized fashion."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "vectorized",
                "type_": "bool"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Whether integration in a complex domain should be supported. Generally determined by a derived solver class capabilities. Default is False."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "support_complex",
                "type_": "bool, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Base class for ODE solvers."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/scipy/integrate/_ivp/base.py",
  "item_line": 25,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Attributes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}