{
  "_content": {
    "Attributes": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Number of equations."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "n",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Current status of the solver: 'running', 'finished' or 'failed'."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "status",
            "type_": "string"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Boundary time."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t_bound",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Integration direction: +1 or -1."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "direction",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Current time."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Current state."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "y",
            "type_": "ndarray"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Previous time. None if no steps were made yet."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t_old",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Size of the last successful step. None if no steps were made yet."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "step_size",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Number of the system's rhs evaluations."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "nfev",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Number of the Jacobian evaluations."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "njev",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Number of LU decompositions."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "nlu",
            "type_": "int"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "In order to implement a new solver you need to follow the guidelines:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              "1. A constructor must accept parameters presented in the base class",
              "   (listed below) along with any other parameters specific to a solver.",
              "2. A constructor must accept arbitrary extraneous arguments",
              "   ``**extraneous``, but warn that these arguments are irrelevant",
              "   using `common.warn_extraneous` function. Do not pass these",
              "   arguments to the base class.",
              "3. A solver must implement a private method `_step_impl(self)` which",
              "   propagates a solver one step further. It must return tuple",
              "   ``(success, message)``, where ``success`` is a boolean indicating",
              "   whether a step was successful, and ``message`` is a string",
              "   containing description of a failure if a step failed or None",
              "   otherwise.",
              "4. A solver must implement a private method `_dense_output_impl(self)`,",
              "   which returns a `DenseOutput` object covering the last successful",
              "   step.",
              "5. A solver must have attributes listed below in Attributes section.",
              "   Note that ``t_old`` and ``step_size`` are updated automatically.",
              "6. Use `fun(self, t, y)` method for the system rhs evaluation, this",
              "   way the number of function evaluations (`nfev`) will be tracked",
              "   automatically.",
              "7. For convenience, a base class provides `fun_single(self, t, y)` and",
              "   `fun_vectorized(self, t, y)` for evaluating the rhs in",
              "   non-vectorized and vectorized fashions respectively (regardless of",
              "   how `fun` from the constructor is implemented). These calls don't",
              "   increment `nfev`.",
              "8. If a solver uses a Jacobian matrix and LU decompositions, it should",
              "   track the number of Jacobian evaluations (`njev`) and the number of",
              "   LU decompositions (`nlu`).",
              "9. By convention, the function evaluations used to compute a finite",
              "   difference approximation of the Jacobian should not be counted in",
              "   `nfev`, thus use `fun_single(self, t, y)` or",
              "   `fun_vectorized(self, t, y)` when computing a finite difference",
              "   approximation of the Jacobian."
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Right-hand side of the system. The calling signature is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fun(t, y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Here "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "t"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is a scalar and there are two options for ndarray "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "y"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". It can either have shape (n,), then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fun"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " must return array_like with shape (n,). Or, alternatively, it can have shape (n, n_points), then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fun"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " must return array_like with shape (n, n_points) (each column corresponds to a single column in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "y"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "). The choice between the two options is determined by "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "vectorized",
                          "version": null
                        },
                        "value": "vectorized"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " argument (see below)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "fun",
            "type_": "callable"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Initial time."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t0",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Initial state."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "y0",
            "type_": "array_like, shape (n,)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Boundary time --- the integration won't continue beyond it. It also determines the direction of the integration."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t_bound",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "fun",
                          "version": null
                        },
                        "value": "fun"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is implemented in a vectorized fashion."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "vectorized",
            "type_": "bool"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether integration in a complex domain should be supported. Generally determined by a derived solver class capabilities. Default is False."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "support_complex",
            "type_": "bool, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Base class for ODE solvers."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._ltisys.integrate.OdeSolver"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/scipy/integrate/_ivp/base.py",
  "item_line": 25,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Attributes"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}