{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This function numerically integrates a system of ordinary differential equations given an initial value::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "dy / dt = f(t, y)\ny(t0) = y0"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Here t is a 1-D independent variable (time), y(t) is an N-D vector-valued function (state), and an N-D vector-valued function f(t, y) determines the differential equations. The goal is to find y(t) approximately satisfying the differential equations, given an initial value y(t0)=y0."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Some of the solvers support integration in the complex domain, but note that for stiff ODE solvers, the right-hand side must be complex-differentiable (satisfy Cauchy-Riemann equations ). To solve a problem in the complex domain, pass y0 with a complex data type. Another option always available is to rewrite your problem for real and imaginary parts separately."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Right-hand side of the system. The calling signature is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fun(t, y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Here "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "t",
                          "version": null
                        },
                        "value": "t"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is a scalar, and there are two options for the ndarray "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "y",
                          "version": null
                        },
                        "value": "y"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ": It can either have shape (n,); then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "fun",
                          "version": null
                        },
                        "value": "fun"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " must return array_like with shape (n,). Alternatively, it can have shape (n, k); then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "fun",
                          "version": null
                        },
                        "value": "fun"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " must return an array_like with shape (n, k), i.e., each column corresponds to a single column in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "y",
                          "version": null
                        },
                        "value": "y"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". The choice between the two options is determined by "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "vectorized",
                          "version": null
                        },
                        "value": "vectorized"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " argument (see below). The vectorized implementation allows a faster approximation of the Jacobian by finite differences (required for stiff solvers)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "fun",
            "type_": "callable"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Interval of integration (t0, tf). The solver starts with t=t0 and integrates until it reaches t=tf."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t_span",
            "type_": "2-tuple of floats"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Initial state. For problems in the complex domain, pass "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "y0",
                          "version": null
                        },
                        "value": "y0"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " with a complex data type (even if the initial value is purely real)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "y0",
            "type_": "array_like, shape (n,)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Integration method to use:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": [
                    "* 'RK45' (default): Explicit Runge-Kutta method of order 5(4) [1]_.",
                    "  The error is controlled assuming accuracy of the fourth-order",
                    "  method, but steps are taken using the fifth-order accurate",
                    "  formula (local extrapolation is done). A quartic interpolation",
                    "  polynomial is used for the dense output [2]_. Can be applied in",
                    "  the complex domain.",
                    "* 'RK23': Explicit Runge-Kutta method of order 3(2) [3]_. The error",
                    "  is controlled assuming accuracy of the second-order method, but",
                    "  steps are taken using the third-order accurate formula (local",
                    "  extrapolation is done). A cubic Hermite polynomial is used for the",
                    "  dense output. Can be applied in the complex domain.",
                    "* 'DOP853': Explicit Runge-Kutta method of order 8 [13]_.",
                    "  Python implementation of the \"DOP853\" algorithm originally",
                    "  written in Fortran [14]_. A 7-th order interpolation polynomial",
                    "  accurate to 7-th order is used for the dense output.",
                    "  Can be applied in the complex domain.",
                    "* 'Radau': Implicit Runge-Kutta method of the Radau IIA family of",
                    "  order 5 [4]_. The error is controlled with a third-order accurate",
                    "  embedded formula. A cubic polynomial which satisfies the",
                    "  collocation conditions is used for the dense output.",
                    "* 'BDF': Implicit multi-step variable-order (1 to 5) method based",
                    "  on a backward differentiation formula for the derivative",
                    "  approximation [5]_. The implementation follows the one described",
                    "  in [6]_. A quasi-constant step scheme is used and accuracy is",
                    "  enhanced using the NDF modification. Can be applied in the",
                    "  complex domain.",
                    "* 'LSODA': Adams/BDF method with automatic stiffness detection and",
                    "  switching [7]_, [8]_. This is a wrapper of the Fortran solver",
                    "  from ODEPACK."
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Explicit Runge-Kutta methods ('RK23', 'RK45', 'DOP853') should be used for non-stiff problems and implicit methods ('Radau', 'BDF') for stiff problems . Among Runge-Kutta methods, 'DOP853' is recommended for solving with high precision (low values of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "rtol",
                          "version": null
                        },
                        "value": "rtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ")."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If not sure, first try to run 'RK45'. If it makes unusually many iterations, diverges, or fails, your problem is likely to be stiff and you should use 'Radau' or 'BDF'. 'LSODA' can also be a good universal choice, but it might be somewhat less convenient to work with as it wraps old Fortran code."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "You can also pass an arbitrary class derived from "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.integrate._ivp.base.OdeSolver",
                          "version": "1.8.0"
                        },
                        "value": "OdeSolver"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " which implements the solver."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "method",
            "type_": "string or `OdeSolver`, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Times at which to store the computed solution, must be sorted and lie within "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "t_span",
                          "version": null
                        },
                        "value": "t_span"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". If None (default), use points selected by the solver."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t_eval",
            "type_": "array_like or None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether to compute a continuous solution. Default is False."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "dense_output",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Events to track. If None (default), no events will be tracked. Each event occurs at the zeros of a continuous function of time and state. Each function must have the signature "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "event(t, y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and return a float. The solver will find an accurate value of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "t",
                          "version": null
                        },
                        "value": "t"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " at which "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "event(t, y(t)) = 0"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " using a root-finding algorithm. By default, all zeros will be found. The solver looks for a sign change over each step, so if multiple zero crossings occur within one step, events may be missed. Additionally each "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "event"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " function might have the following attributes:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": [
                    "terminal: bool, optional",
                    "    Whether to terminate integration if this event occurs.",
                    "    Implicitly False if not assigned.",
                    "direction: float, optional",
                    "    Direction of a zero crossing. If `direction` is positive,",
                    "    `event` will only trigger when going from negative to positive,",
                    "    and vice versa if `direction` is negative. If 0, then either",
                    "    direction will trigger event. Implicitly 0 if not assigned."
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "You can assign attributes like "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "event.terminal = True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " to any function in Python."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "events",
            "type_": "callable, or list of callables, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "fun",
                          "version": null
                        },
                        "value": "fun"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is implemented in a vectorized fashion. Default is False."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "vectorized",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Additional arguments to pass to the user-defined functions.  If given, the additional arguments are passed to all user-defined functions. So if, for example, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "fun",
                          "version": null
                        },
                        "value": "fun"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " has the signature "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fun(t, y, a, b, c)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "jac",
                          "version": null
                        },
                        "value": "jac"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " (if given) and any event functions must have the same signature, and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "args",
                          "version": null
                        },
                        "value": "args"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " must be a tuple of length 3."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "args",
            "type_": "tuple, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Options passed to a chosen solver. All options available for already implemented solvers are listed below."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "options",
            "type_": ""
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Initial step size. Default is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " which means that the algorithm should choose."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "first_step",
            "type_": "float or None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded and determined solely by the solver."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "max_step",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Relative and absolute tolerances. The solver keeps the local error estimates less than "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "atol + rtol * abs(y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Here "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "rtol",
                          "version": null
                        },
                        "value": "rtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " controls a relative accuracy (number of correct digits), while "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " controls absolute accuracy (number of correct decimal places). To achieve the desired "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "rtol",
                          "version": null
                        },
                        "value": "rtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", set "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " to be lower than the lowest value that can be expected from "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "rtol * abs(y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " so that "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "rtol",
                          "version": null
                        },
                        "value": "rtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " dominates the allowable error. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is larger than "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "rtol * abs(y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " the number of correct digits is not guaranteed. Conversely, to achieve the desired "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " set "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "rtol",
                          "version": null
                        },
                        "value": "rtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " such that "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "rtol * abs(y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is always lower than "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". If components of y have different scales, it might be beneficial to set different "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " values for different components by passing array_like with shape (n,) for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". Default values are 1e-3 for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "rtol",
                          "version": null
                        },
                        "value": "rtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and 1e-6 for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "rtol, atol",
            "type_": "float or array_like, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Jacobian matrix of the right-hand side of the system with respect to y, required by the 'Radau', 'BDF' and 'LSODA' method. The Jacobian matrix has shape (n, n) and its element (i, j) is equal to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "d f_i / d y_j"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ".  There are three ways to define the Jacobian:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": [
                    "* If array_like or sparse_matrix, the Jacobian is assumed to",
                    "  be constant. Not supported by 'LSODA'.",
                    "* If callable, the Jacobian is assumed to depend on both",
                    "  t and y; it will be called as ``jac(t, y)``, as necessary.",
                    "  For 'Radau' and 'BDF' methods, the return value might be a",
                    "  sparse matrix.",
                    "* If None (default), the Jacobian will be approximated by",
                    "  finite differences."
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "It is generally recommended to provide the Jacobian rather than relying on a finite-difference approximation."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "jac",
            "type_": "array_like, sparse_matrix, callable or None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Defines a sparsity structure of the Jacobian matrix for a finite- difference approximation. Its shape must be (n, n). This argument is ignored if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "jac",
                          "version": null
                        },
                        "value": "jac"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is not "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". If the Jacobian has only few non-zero elements in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": {
                          "value": "each"
                        }
                      },
                      "type": "Emph"
                    },
                    {
                      "data": {
                        "value": " row, providing the sparsity structure will greatly speed up the computations . A zero entry means that a corresponding element in the Jacobian is always zero. If None (default), the Jacobian is assumed to be dense. Not supported by 'LSODA', see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "lband",
                          "version": null
                        },
                        "value": "lband"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "uband",
                          "version": null
                        },
                        "value": "uband"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " instead."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "jac_sparsity",
            "type_": "array_like, sparse matrix or None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Parameters defining the bandwidth of the Jacobian for the 'LSODA' method, i.e., "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "jac[i, j] != 0 only for i - lband <= j <= i + uband"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Default is None. Setting these requires your jac routine to return the Jacobian in the packed format: the returned array must have "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "n"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " columns and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "uband + lband + 1"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " rows in which Jacobian diagonals are written. Specifically "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "jac_packed[uband + i - j , j] = jac[i, j]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". The same format is used in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "scipy",
                          "path": "scipy.linalg._basic.solve_banded",
                          "version": "*"
                        },
                        "value": "scipy.linalg.solve_banded"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " (check for an illustration).  These parameters can be also used with "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "jac=None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " to reduce the number of Jacobian elements estimated by finite differences."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "lband, uband",
            "type_": "int or None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The minimum allowed step size for 'LSODA' method. By default "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "min_step",
                          "version": null
                        },
                        "value": "min_step"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is zero."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "min_step",
            "type_": "float, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [],
            "param": "",
            "type_": "Bunch object with the following fields defined:"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Time points."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t",
            "type_": "ndarray, shape (n_points,)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Values of the solution at "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "t",
                          "version": null
                        },
                        "value": "t"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "y",
            "type_": "ndarray, shape (n, n_points)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Found solution as "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.integrate._ivp.common.OdeSolution",
                          "version": "1.8.0"
                        },
                        "value": "OdeSolution"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " instance; None if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "dense_output",
                          "version": null
                        },
                        "value": "dense_output"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " was set to False."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "sol",
            "type_": "`OdeSolution` or None"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Contains for each event type a list of arrays at which an event of that type event was detected. None if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "events",
                          "version": null
                        },
                        "value": "events"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " was None."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t_events",
            "type_": "list of ndarray or None"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "For each value of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "t_events",
                          "version": null
                        },
                        "value": "t_events"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", the corresponding value of the solution. None if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "events",
                          "version": null
                        },
                        "value": "events"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " was None."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "y_events",
            "type_": "list of ndarray or None"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Number of evaluations of the right-hand side."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "nfev",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Number of evaluations of the Jacobian."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "njev",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Number of LU decompositions."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "nlu",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Reason for algorithm termination:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": [
                    "* -1: Integration step failed.",
                    "*  0: The solver successfully reached the end of `tspan`.",
                    "*  1: A termination event occurred."
                  ]
                },
                "type": "BlockQuote"
              }
            ],
            "param": "status",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Human-readable description of the termination reason."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "message",
            "type_": "string"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "True if the solver reached the interval end or a termination event occurred ("
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "status >= 0"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ")."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "success",
            "type_": "bool"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Solve an initial value problem for a system of ODEs."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._ltisys.integrate.solve_ivp"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Basic exponential decay showing automatically chosen time points."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "integrate",
              "scipy.integrate",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "solve_ivp",
              "scipy.integrate._ivp.ivp.solve_ivp",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "exponential_decay",
              "__main__.exponential_decay",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "t",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "solve_ivp",
              "scipy.integrate._ivp.ivp.solve_ivp",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "exponential_decay",
              "__main__.exponential_decay",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "8",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "t",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[ 0.          0.11487653  1.26364188  3.06061781  4.81611105  6.57445806\n  8.33328988 10.        ]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[[2.         1.88836035 1.06327177 0.43319312 0.18017253 0.07483045\n  0.03107158 0.01350781]\n [4.         3.7767207  2.12654355 0.86638624 0.36034507 0.14966091\n  0.06214316 0.02701561]\n [8.         7.5534414  4.25308709 1.73277247 0.72069014 0.29932181\n  0.12428631 0.05403123]]"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Specifying points where the solution is desired."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "solve_ivp",
              "scipy.integrate._ivp.ivp.solve_ivp",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "exponential_decay",
              "__main__.exponential_decay",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "8",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                ",
              "",
              ""
            ],
            [
              "t_eval",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "t",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[ 0  1  2  4 10]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[[2.         1.21305369 0.73534021 0.27066736 0.01350938]\n [4.         2.42610739 1.47068043 0.54133472 0.02701876]\n [8.         4.85221478 2.94136085 1.08266944 0.05403753]]"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Cannon fired upward with terminal event upon impact. The "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "terminal"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " and "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "direction"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " fields of an event are applied by monkey patching a function. Here "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "y[0]"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " is position and "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "y[1]"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " is velocity. The projectile starts at position 0 with velocity +10. Note that the integration never reaches t=100 because the event is terminal."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "upward_cannon",
              "__main__.upward_cannon",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "t",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "hit_ground",
              "__main__.hit_ground",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "t",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "hit_ground",
              "__main__.hit_ground",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "terminal",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "hit_ground",
              "__main__.hit_ground",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "direction",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "solve_ivp",
              "scipy.integrate._ivp.ivp.solve_ivp",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "upward_cannon",
              "__main__.upward_cannon",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "events",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "hit_ground",
              "__main__.hit_ground",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "t_events",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[array([40.])]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "t",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[0.00000000e+00 9.99900010e-05 1.09989001e-03 1.10988901e-02\n 1.11088891e-01 1.11098890e+00 1.11099890e+01 4.00000000e+01]"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Use "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "dense_output",
                  "version": null
                },
                "value": "dense_output"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " and "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "events",
                  "version": null
                },
                "value": "events"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " to find position, which is 100, at the apex of the cannonball's trajectory. Apex is not defined as terminal, so both apex and hit_ground are found. There is no information at t=20, so the sol attribute is used to evaluate the solution. The sol attribute is returned by setting "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "dense_output=True"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ". Alternatively, the "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "y_events",
                  "version": null
                },
                "value": "y_events"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " attribute can be used to access the solution at the time of the event."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "apex",
              "__main__.apex",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "t",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "solve_ivp",
              "scipy.integrate._ivp.ivp.solve_ivp",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "upward_cannon",
              "__main__.upward_cannon",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                ",
              "",
              ""
            ],
            [
              "events",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "hit_ground",
              "__main__.hit_ground",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "apex",
              "__main__.apex",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dense_output",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "t_events",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[array([40.]), array([20.])]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "t",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[0.00000000e+00 9.99900010e-05 1.09989001e-03 1.10988901e-02\n 1.11088891e-01 1.11098890e+00 1.11099890e+01 4.00000000e+01]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "sol",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "t_events",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[100.   0.]"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "y_events",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "[array([[-5.68434189e-14, -1.00000000e+01]]), array([[1.00000000e+02, 1.77635684e-15]])]"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "As an example of a system with additional parameters, we'll implement the Lotka-Volterra equations ."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lotkavolterra",
              "__main__.lotkavolterra",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "t",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "z",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "c",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "d",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "z",
              null,
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "a",
              null,
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              null,
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "c",
              null,
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "y",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "d",
              null,
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "y",
              null,
              ""
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": "..."
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "We pass in the parameter values a=1.5, b=1, c=3 and d=1 with the "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "args",
                  "version": null
                },
                "value": "args"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " argument."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "solve_ivp",
              "scipy.integrate._ivp.ivp.solve_ivp",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "lotkavolterra",
              "__main__.lotkavolterra",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "15",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "args",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1.5",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                ",
              "",
              ""
            ],
            [
              "dense_output",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Compute a dense solution and plot it."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "t",
              "builtins.tuple",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "linspace",
              "numpy.linspace",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "15",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "300",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "z",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "sol",
              "builtins.int",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "sol",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "t",
              "builtins.tuple",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "matplotlib",
              "matplotlib",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "pyplot",
              "matplotlib.pyplot",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "as",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "plt",
              "matplotlib.pyplot",
              "nn"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "plt",
              "matplotlib.pyplot",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "plot",
              "matplotlib.pyplot.plot",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "t",
              "builtins.tuple",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "z",
              "numpy.ndarray",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "T",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "plt",
              "matplotlib.pyplot",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "xlabel",
              "matplotlib.pyplot.xlabel",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "t",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "plt",
              "matplotlib.pyplot",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "legend",
              "matplotlib.pyplot.legend",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "x",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "y",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "shadow",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "plt",
              "matplotlib.pyplot",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "title",
              "matplotlib.pyplot.title",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "Lotka-Volterra System",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "plt",
              "matplotlib.pyplot",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "show",
              "matplotlib.pyplot.show",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "value": "fig-scipy.integrate._ivp.ivp.solve_ivp-0.png"
        },
        "type": "Fig"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/integrate/_ivp/ivp.py",
  "item_line": 156,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "References",
    "Examples"
  ],
  "references": null,
  "refs": [
    "__main__.apex",
    "__main__.exponential_decay",
    "__main__.hit_ground",
    "__main__.lotkavolterra",
    "__main__.upward_cannon",
    "builtins.int",
    "builtins.print",
    "builtins.tuple",
    "matplotlib",
    "matplotlib.pyplot",
    "matplotlib.pyplot.legend",
    "matplotlib.pyplot.plot",
    "matplotlib.pyplot.show",
    "matplotlib.pyplot.title",
    "matplotlib.pyplot.xlabel",
    "numpy",
    "numpy.linspace",
    "numpy.ndarray",
    "scipy",
    "scipy.integrate",
    "scipy.integrate._ivp.ivp.solve_ivp"
  ],
  "see_also": [],
  "signature": {
    "value": "solve_ivp(fun, t_span, y0, method='RK45', t_eval=None, dense_output=False, events=None, vectorized=False, args=None, **options)"
  }
}