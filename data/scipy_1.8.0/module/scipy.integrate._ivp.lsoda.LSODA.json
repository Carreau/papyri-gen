{
  "_content": {
    "Attributes": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Number of equations."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "n",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Current status of the solver: 'running', 'finished' or 'failed'."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "status",
            "type_": "string"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Boundary time."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t_bound",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Integration direction: +1 or -1."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "direction",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Current time."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Current state."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "y",
            "type_": "ndarray"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Previous time. None if no steps were made yet."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t_old",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Number of evaluations of the right-hand side."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "nfev",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Number of evaluations of the Jacobian."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "njev",
            "type_": "int"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This is a wrapper to the Fortran solver from ODEPACK . It switches automatically between the nonstiff Adams method and the stiff BDF method. The method was originally detailed in ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Right-hand side of the system. The calling signature is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fun(t, y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Here "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "t"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is a scalar, and there are two options for the ndarray "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "y"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ": It can either have shape (n,); then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fun"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " must return array_like with shape (n,). Alternatively it can have shape (n, k); then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fun"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " must return an array_like with shape (n, k), i.e. each column corresponds to a single column in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "y"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". The choice between the two options is determined by "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "vectorized",
                          "version": null
                        },
                        "value": "vectorized"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " argument (see below). The vectorized implementation allows a faster approximation of the Jacobian by finite differences (required for this solver)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "fun",
            "type_": "callable"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Initial time."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t0",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Initial state."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "y0",
            "type_": "array_like, shape (n,)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Boundary time - the integration won't continue beyond it. It also determines the direction of the integration."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "t_bound",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Initial step size. Default is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " which means that the algorithm should choose."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "first_step",
            "type_": "float or None, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Minimum allowed step size. Default is 0.0, i.e., the step size is not bounded and determined solely by the solver."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "min_step",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded and determined solely by the solver."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "max_step",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Relative and absolute tolerances. The solver keeps the local error estimates less than "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "atol + rtol * abs(y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Here "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "rtol",
                          "version": null
                        },
                        "value": "rtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " controls a relative accuracy (number of correct digits), while "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " controls absolute accuracy (number of correct decimal places). To achieve the desired "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "rtol",
                          "version": null
                        },
                        "value": "rtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", set "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " to be lower than the lowest value that can be expected from "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "rtol * abs(y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " so that "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "rtol",
                          "version": null
                        },
                        "value": "rtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " dominates the allowable error. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is larger than "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "rtol * abs(y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " the number of correct digits is not guaranteed. Conversely, to achieve the desired "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " set "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "rtol",
                          "version": null
                        },
                        "value": "rtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " such that "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "rtol * abs(y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is always lower than "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". If components of y have different scales, it might be beneficial to set different "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " values for different components by passing array_like with shape (n,) for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". Default values are 1e-3 for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "rtol",
                          "version": null
                        },
                        "value": "rtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and 1e-6 for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "rtol, atol",
            "type_": "float and array_like, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Jacobian matrix of the right-hand side of the system with respect to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "y"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". The Jacobian matrix has shape (n, n) and its element (i, j) is equal to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "d f_i / d y_j"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". The function will be called as "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "jac(t, y)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". If None (default), the Jacobian will be approximated by finite differences. It is generally recommended to provide the Jacobian rather than relying on a finite-difference approximation."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "jac",
            "type_": "None or callable, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Parameters defining the bandwidth of the Jacobian, i.e., "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "jac[i, j] != 0 only for i - lband <= j <= i + uband"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Setting these requires your jac routine to return the Jacobian in the packed format: the returned array must have "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "n"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " columns and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "uband + lband + 1"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " rows in which Jacobian diagonals are written. Specifically "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "jac_packed[uband + i - j , j] = jac[i, j]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". The same format is used in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "scipy",
                          "path": "scipy.linalg._basic.solve_banded",
                          "version": "*"
                        },
                        "value": "scipy.linalg.solve_banded"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " (check for an illustration). These parameters can be also used with "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "jac=None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " to reduce the number of Jacobian elements estimated by finite differences."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "lband, uband",
            "type_": "int or None"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "fun",
                          "version": null
                        },
                        "value": "fun"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is implemented in a vectorized fashion. A vectorized implementation offers no advantages for this solver. Default is False."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "vectorized",
            "type_": "bool, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Adams/BDF method with automatic stiffness detection and switching."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._ltisys.integrate.LSODA"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/scipy/integrate/_ivp/lsoda.py",
  "item_line": 7,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Attributes",
    "References"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}