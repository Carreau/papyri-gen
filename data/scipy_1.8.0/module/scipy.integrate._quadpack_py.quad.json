{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Integrate func from "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "a",
                    "version": null
                  },
                  "value": "a"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "b",
                    "version": null
                  },
                  "value": "b"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " (possibly infinite interval) using a technique from the Fortran library QUADPACK."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "content": {
                    "value": "Extra information for quad() inputs and outputs"
                  }
                },
                "type": "Strong"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If full_output is non-zero, then the third output argument (infodict) is a dictionary with entries as tabulated below. For infinite limits, the range is transformed to (0,1) and the optional outputs are given with respect to this transformed range. Let M be the input argument limit and let K be infodict['last']. The entries are:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "The number of function evaluations."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'neval'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "The number, K, of subintervals produced in the subdivision process."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'last'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 array of length M, the first K elements of which are the     left end points of the subintervals in the partition of the     integration range."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'alist'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 array of length M, the first K elements of which are the     right end points of the subintervals."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'blist'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 array of length M, the first K elements of which are the     integral approximations on the subintervals."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'rlist'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 array of length M, the first K elements of which are the     moduli of the absolute error estimates on the subintervals."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'elist'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 integer array of length M, the first L elements of     which are pointers to the error estimates over the subintervals     with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "L=K"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "K<=M/2+2"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "L=M+1-K"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " otherwise. Let I be the     sequence "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "infodict['iord']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and let E be the sequence     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "infodict['elist']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ".  Then "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "E[I[1]], ..., E[I[L]]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " forms a     decreasing sequence."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'iord'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If the input argument points is provided (i.e., it is not None), the following additional outputs are placed in the output dictionary. Assume the points sequence is of length P."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 array of length P+2 containing the integration limits     and the break points of the intervals in ascending order.     This is an array giving the subintervals over which integration     will occur."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'pts'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 integer array of length M (=limit), containing the     subdivision levels of the subintervals, i.e., if (aa,bb) is a     subinterval of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(pts[1], pts[2])"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " where "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "pts[0]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "pts[2]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     are adjacent elements of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "infodict['pts']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", then (aa,bb) has level l     if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "|bb-aa| = |pts[2]-pts[1]| * 2**(-l)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'level'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 integer array of length P+2. After the first integration     over the intervals (pts[1], pts[2]), the error estimates over some     of the intervals may have been increased artificially in order to     put their subdivision forward. This array has ones in slots     corresponding to the subintervals for which this happens."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'ndin'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "content": {
                    "value": "Weighting the integrand"
                  }
                },
                "type": "Strong"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The input variables, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "weight"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "wvar"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", are used to weight the integrand by a select list of functions. Different integration methods are used to compute the integral with these weighting functions, and these do not support specifying break points. The possible values of weight and the corresponding weighting functions are."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "==========  ===================================   ===================== "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "weight"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "  Weight function used                  "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "wvar"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " ==========  ===================================   ===================== 'cos'       cos(w*x)                              wvar = w 'sin'       sin(w*x)                              wvar = w 'alg'       g(x) = ((x-a)**alpha)*((b-x)**beta)   wvar = (alpha, beta) 'alg-loga'  g(x)*log(x-a)                         wvar = (alpha, beta) 'alg-logb'  g(x)*log(b-x)                         wvar = (alpha, beta) 'alg-log'   g(x)*log(x-a)*log(b-x)                wvar = (alpha, beta) 'cauchy'    1/(x-c)                               wvar = c ==========  ===================================   ====================="
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "wvar holds the parameter w, (alpha, beta), or c depending on the weight selected. In these expressions, a and b are the integration limits."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For the 'cos' and 'sin' weighting, additional inputs and outputs are available."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For finite integration limits, the integration is performed using a Clenshaw-Curtis method which uses Chebyshev moments. For repeated calculations, these moments are saved in the output dictionary:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "The maximum level of Chebyshev moments that have been computed,     i.e., if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "M_c"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "infodict['momcom']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " then the moments have been     computed for intervals of length "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "|b-a| * 2**(-l)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ",     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "l=0,1,...,M_c"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'momcom'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 integer array of length M(=limit), containing the     subdivision levels of the subintervals, i.e., an element of this     array is equal to l if the corresponding subinterval is     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "|b-a|* 2**(-l)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'nnlog'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-2 array of shape (25, maxp1) containing the computed     Chebyshev moments. These can be passed on to an integration     over the same interval by passing this array as the second     element of the sequence wopts and passing infodict['momcom'] as     the first element."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'chebmo'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If one of the integration limits is infinite, then a Fourier integral is computed (assuming w neq 0). If full_output is 1 and a numerical error is encountered, besides the error message attached to the output tuple, a dictionary is also appended to the output tuple which translates the error codes in the array "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "info['ierlst']"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to English messages. The output information dictionary contains the following entries instead of 'last', 'alist', 'blist', 'rlist', and 'elist':"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "The number of subintervals needed for the integration (call it "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "K_f"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ")."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'lst'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 array of length M_f=limlst, whose first "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "K_f"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " elements     contain the integral contribution over the interval     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "(a+(k-1)c, a+kc)"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " where "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "c = (2*floor(|w|) + 1) * pi / |w|"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "     and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "k=1,2,...,K_f"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'rslst'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 array of length "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "M_f"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " containing the error estimate     corresponding to the interval in the same position in     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "infodict['rslist']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'erlst'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "A rank-1 integer array of length "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "M_f"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " containing an error flag     corresponding to the interval in the same position in     "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "infodict['rslist']"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ".  See the explanation dictionary (last entry     in the output tuple) for the meaning of the codes."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "inline": [
                    {
                      "data": {
                        "value": "'ierlst'"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                }
              }
            ]
          },
          "type": "DefList"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Absolute error tolerance. Default is 1.49e-8. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.integrate._quadpack_py.quad",
                          "version": "1.8.0"
                        },
                        "value": "quad"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " tries to obtain an accuracy of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "abs(i-result) <= max(epsabs, epsrel*abs(i))"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " where "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "i"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " = integral of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "func",
                          "version": null
                        },
                        "value": "func"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " from "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "a",
                          "version": null
                        },
                        "value": "a"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "b",
                          "version": null
                        },
                        "value": "b"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "result"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is the numerical approximation. See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "epsrel",
                          "version": null
                        },
                        "value": "epsrel"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " below."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "epsabs",
            "type_": "float or int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Relative error tolerance. Default is 1.49e-8. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "epsabs <= 0"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "epsrel",
                          "version": null
                        },
                        "value": "epsrel"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " must be greater than both 5e-29 and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "50 * (machine epsilon)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "epsabs",
                          "version": null
                        },
                        "value": "epsabs"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " above."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "epsrel",
            "type_": "float or int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "An upper bound on the number of subintervals used in the adaptive algorithm."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "limit",
            "type_": "float or int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A sequence of break points in the bounded integration interval where local difficulties of the integrand may occur (e.g., singularities, discontinuities). The sequence does not have to be sorted. Note that this option cannot be used in conjunction with "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "weight"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "points",
            "type_": "(sequence of floats,ints), optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "String indicating weighting function. Full explanation for this and the remaining arguments can be found below."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "weight",
            "type_": "float or int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Variables for use with weighting functions."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "wvar",
            "type_": "optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Optional input for reusing Chebyshev moments."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "wopts",
            "type_": "optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "An upper bound on the number of Chebyshev moments."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "maxp1",
            "type_": "float or int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Upper bound on the number of cycles (>=3) for use with a sinusoidal weighting and an infinite end-point."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "limlst",
            "type_": "int, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A Python function or method to integrate. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "func",
                          "version": null
                        },
                        "value": "func"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " takes many arguments, it is integrated along the axis corresponding to the first argument."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If the user desires improved integration performance, then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.optimize._bglu_dense._consider_refactor.<locals>.f",
                          "version": "1.8.0"
                        },
                        "value": "f"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " may be a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "scipy",
                          "path": "scipy._lib._ccallback.LowLevelCallable",
                          "version": "*"
                        },
                        "value": "scipy.LowLevelCallable"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " with one of the signatures::      "
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": "double func(double x)\ndouble func(double x, void *user_data)\ndouble func(int n, double *xx)\ndouble func(int n, double *xx, void *user_data)"
                },
                "type": "BlockVerbatim"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "user_data"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is the data contained in the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "scipy",
                          "path": "scipy._lib._ccallback.LowLevelCallable",
                          "version": "*"
                        },
                        "value": "scipy.LowLevelCallable"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". In the call forms with "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "xx"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ",  "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "n"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is the length of the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "xx"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " array which contains "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "xx[0] == x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and the rest of the items are numbers contained in the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "args"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " argument of quad."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "In addition, certain ctypes call signatures are supported for backward compatibility, but those should not be used in new code."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "func",
            "type_": "{function, scipy.LowLevelCallable}"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Lower limit of integration (use -numpy.inf for -infinity)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "a",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Upper limit of integration (use numpy.inf for +infinity)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "b",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Extra arguments to pass to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "func",
                          "version": null
                        },
                        "value": "func"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "args",
            "type_": "tuple, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Non-zero to return a dictionary of integration information. If non-zero, warning messages are also suppressed and the message is appended to the output tuple."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "full_output",
            "type_": "int, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The integral of func from "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "a",
                          "version": null
                        },
                        "value": "a"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "b",
                          "version": null
                        },
                        "value": "b"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "y",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "An estimate of the absolute error in the result."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "abserr",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A dictionary containing additional information. Run scipy.integrate.quad_explain() for more information."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "infodict",
            "type_": "dict"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A convergence message."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "message"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Appended only with 'cos' or 'sin' weighting and infinite integration limits, it contains an explanation of the codes in infodict['ierlst']"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "explain"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Compute a definite integral."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._ltisys.integrate.quad"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Calculate "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "\\int^4_0 x^2 dx"
                ]
              },
              "type": "Math"
            },
            {
              "data": {
                "value": " and compare with an analytic result"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "integrate",
              "scipy.integrate",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x2",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "integrate",
              "scipy.integrate",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quad",
              "scipy.integrate._quadpack_py.quad",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x2",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "(21.333333333333332, 2.3684757858670003e-13)"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "/",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3.",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# analytical result",
              "",
              "c1"
            ]
          ],
          "out": "21.3333333333"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Calculate "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "\\int^\\infty_0 e^{-x} dx"
                ]
              },
              "type": "Math"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "invexp",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "exp",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "integrate",
              "scipy.integrate",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quad",
              "scipy.integrate._quadpack_py.quad",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "invexp",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "inf",
              "builtins.float",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "(1.0, 5.842605999138044e-11)"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "f",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "a",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "a",
              null,
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "err",
              "builtins.str",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "integrate",
              "scipy.integrate",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quad",
              "scipy.integrate._quadpack_py.quad",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "f",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "args",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "y",
              "builtins.float",
              ""
            ]
          ],
          "out": "0.5"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "y",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "err",
              "builtins.str",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "integrate",
              "scipy.integrate",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quad",
              "scipy.integrate._quadpack_py.quad",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "f",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "args",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "y",
              "builtins.float",
              ""
            ]
          ],
          "out": "1.5"
        },
        "type": "Code"
      },
      {
        "data": {
          "value": [
            "from scipy import integrate",
            "import ctypes",
            "lib = ctypes.CDLL('/home/.../testlib.*') #use absolute path",
            "lib.func.restype = ctypes.c_double",
            "lib.func.argtypes = (ctypes.c_int,ctypes.c_double)",
            "integrate.quad(lib.func,0,1,(1))",
            "#(1.3333333333333333, 1.4802973661668752e-14)",
            "print((1.0**3/3.0 + 1.0) - (0.0**3/3.0 + 0.0)) #Analytic result",
            "# 1.3333333333333333"
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Be aware that pulse shapes and other sharp features as compared to the size of the integration interval may not be integrated correctly using this method. A simplified example of this limitation is integrating a y-axis reflected step function with many zero values within the integrals bounds."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "y",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "if",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "<",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "else",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "integrate",
              "scipy.integrate",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quad",
              "scipy.integrate._quadpack_py.quad",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "(1.0, 1.1102230246251565e-14)"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "integrate",
              "scipy.integrate",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quad",
              "scipy.integrate._quadpack_py.quad",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "100",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "(1.0000000002199108, 1.0189464580163188e-08)"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "integrate",
              "scipy.integrate",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "quad",
              "scipy.integrate._quadpack_py.quad",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "y",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10000",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "(0.0, 0.0)"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/integrate/_quadpack_py.py",
  "item_line": 49,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.float",
    "builtins.print",
    "builtins.str",
    "dblquad",
    "fixed_quad",
    "nquad",
    "numpy",
    "numpy.ufunc",
    "ode",
    "odeint",
    "quadrature",
    "romb",
    "scipy",
    "scipy.integrate",
    "scipy.integrate._quadpack_py.quad",
    "scipy.special",
    "simpson",
    "tplquad"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "double integral"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "dblquad",
        "ref": "scipy.integrate._quadpack_py.dblquad"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "triple integral"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "tplquad",
        "ref": "scipy.integrate._quadpack_py.tplquad"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "n-dimensional integrals (uses "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "quad"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " recursively)"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "nquad",
        "ref": "scipy.integrate._quadpack_py.nquad"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "fixed-order Gaussian quadrature"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "fixed_quad",
        "ref": "scipy.integrate._quadrature.fixed_quad"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "adaptive Gaussian quadrature"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "quadrature",
        "ref": "scipy.integrate._quadrature.quadrature"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "ODE integrator"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": null,
        "name": "odeint",
        "ref": null
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "ODE integrator"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "ode",
        "ref": "scipy.integrate._ode.ode"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "integrator for sampled data"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "simpson",
        "ref": "scipy.integrate._quadrature.simpson"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "integrator for sampled data"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "romb",
        "ref": "scipy.integrate._quadrature.romb"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "for coefficients and roots of orthogonal polynomials"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "scipy.special",
        "ref": "scipy.special"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "quad(func, a, b, args=(), full_output=0, epsabs=1.49e-08, epsrel=1.49e-08, limit=50, points=None, weight=None, wvar=None, wopts=None, maxp1=50, limlst=50)"
  }
}