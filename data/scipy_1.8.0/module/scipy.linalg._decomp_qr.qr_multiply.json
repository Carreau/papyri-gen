{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Calculate the decomposition "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "A = Q R"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " where Q is unitary/orthogonal and R upper triangular. Multiply Q with a vector or a matrix c."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This is an interface to the LAPACK routines "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "?GEQRF"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "?ORMQR"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "?UNMQR"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "?GEQP3"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "0.11.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Input array"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "a",
            "type_": "(M, N), array_like"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Input array to be multiplied by "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "q"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "c",
            "type_": "array_like"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": [
                          "Q @ c"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is returned if mode is 'left', "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "c @ Q"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is returned if mode is 'right'. The shape of c must be appropriate for the matrix multiplications, if mode is 'left', "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "min(a.shape) == c.shape[0]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", if mode is 'right', "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a.shape[0] == c.shape[1]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "mode",
            "type_": "{'left', 'right'}, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether or not factorization should include pivoting for rank-revealing qr decomposition, see the documentation of qr."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "pivoting",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether Q should be complex-conjugated. This might be faster than explicit conjugation."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "conjugate",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether data in a is overwritten (may improve performance)"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "overwrite_a",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Whether data in c is overwritten (may improve performance). If this is used, c must be big enough to keep the result, i.e. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "c.shape[0]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " = "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a.shape[0]"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " if mode is 'left'."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "overwrite_c",
            "type_": "bool, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Raised if QR decomposition fails."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "",
            "type_": "LinAlgError"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The product of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "Q"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "c"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "CQ",
            "type_": "ndarray"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "R array of the resulting QR factorization where "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "K = min(M, N)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "R",
            "type_": "(K, N), ndarray"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Integer pivot array. Only returned when "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "pivoting=True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "P",
            "type_": "(N,) ndarray"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Calculate the QR decomposition and multiply Q with a matrix."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._lti_conversion.linalg.qr_multiply"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "linalg",
              "scipy.linalg",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "qr_multiply",
              "scipy.linalg._decomp_qr.qr_multiply",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "qr",
              "scipy.linalg._decomp_qr.qr",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "A",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "qc",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "r1",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "piv1",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "qr_multiply",
              "scipy.linalg._decomp_qr.qr_multiply",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "A",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "eye",
              "numpy.eye",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pivoting",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "qc",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([[-1.,  1., -1.],\n       [-1., -1.,  1.],\n       [-1., -1., -1.],\n       [-1.,  1.,  1.]])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "r1",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([[-6., -3., -5.            ],\n       [ 0., -1., -1.11022302e-16],\n       [ 0.,  0., -1.            ]])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "piv1",
              "builtins.int",
              ""
            ]
          ],
          "out": "array([1, 0, 2], dtype=int32)"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "q2",
              "builtins.tuple",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "r2",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "piv2",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "qr",
              "scipy.linalg._decomp_qr.qr",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "A",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "mode",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "economic",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pivoting",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "allclose",
              "numpy.allclose",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "q2",
              "builtins.tuple",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "qc",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "zeros",
              "numpy.zeros",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "True"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/linalg/_decomp_qr.py",
  "item_line": 177,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Notes",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.int",
    "builtins.tuple",
    "numpy",
    "numpy.allclose",
    "numpy.array",
    "numpy.eye",
    "numpy.ndarray",
    "numpy.zeros",
    "scipy",
    "scipy.linalg",
    "scipy.linalg._decomp_qr.qr",
    "scipy.linalg._decomp_qr.qr_multiply"
  ],
  "see_also": [],
  "signature": {
    "value": "qr_multiply(a, c, mode='right', pivoting=False, conjugate=False, overwrite_a=False, overwrite_c=False)"
  }
}