{
  "aliases": [
    "scipy.signal._lti_conversion.linalg"
  ],
  "arbitrary": [
    {
      "children": [
        {
          "data": {
            "argument": "scipy.linalg",
            "content": "",
            "name": "currentmodule",
            "options": []
          },
          "type": "BlockDirective"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Linear algebra functions."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": ".. eventually, we should replace the numpy.linalg HTML link with just `numpy.linalg`"
          },
          "type": "Comment"
        },
        {
          "data": {
            "argument": "",
            "content": "`numpy.linalg <https://www.numpy.org/devdocs/reference/routines.linalg.html>`__\nfor more linear algebra functions. Note that\nalthough `scipy.linalg` imports most of them, identically named\nfunctions from `scipy.linalg` may offer more or slightly differing\nfunctionality.",
            "name": "seealso",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Linear algebra (:mod:`scipy.linalg`)"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    inv - Find the inverse of a square matrix\n    solve - Solve a linear system of equations\n    solve_banded - Solve a banded linear system\n    solveh_banded - Solve a Hermitian or symmetric banded system\n    solve_circulant - Solve a circulant system\n    solve_triangular - Solve a triangular matrix\n    solve_toeplitz - Solve a toeplitz matrix\n    matmul_toeplitz - Multiply a Toeplitz matrix with an array.\n    det - Find the determinant of a square matrix\n    norm - Matrix and vector norm\n    lstsq - Solve a linear least-squares problem\n    pinv - Pseudo-inverse (Moore-Penrose) using lstsq\n    pinv2 - Pseudo-inverse using svd\n    pinvh - Pseudo-inverse of hermitian matrix\n    kron - Kronecker product of two arrays\n    khatri_rao - Khatri-Rao product of two arrays\n    tril - Construct a lower-triangular matrix from a given matrix\n    triu - Construct an upper-triangular matrix from a given matrix\n    orthogonal_procrustes - Solve an orthogonal Procrustes problem\n    matrix_balance - Balance matrix entries with a similarity transformation\n    subspace_angles - Compute the subspace angles between two matrices\n    bandwidth - Return the lower and upper bandwidth of an array\n    issymmetric - Check if a square 2D array is symmetric\n    ishermitian - Check if a square 2D array is Hermitian\n    LinAlgError\n    LinAlgWarning"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Basics"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    eig - Find the eigenvalues and eigenvectors of a square matrix\n    eigvals - Find just the eigenvalues of a square matrix\n    eigh - Find the e-vals and e-vectors of a Hermitian or symmetric matrix\n    eigvalsh - Find just the eigenvalues of a Hermitian or symmetric matrix\n    eig_banded - Find the eigenvalues and eigenvectors of a banded matrix\n    eigvals_banded - Find just the eigenvalues of a banded matrix\n    eigh_tridiagonal - Find the eigenvalues and eigenvectors of a tridiagonal matrix\n    eigvalsh_tridiagonal - Find just the eigenvalues of a tridiagonal matrix"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Eigenvalue Problems"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    lu - LU decomposition of a matrix\n    lu_factor - LU decomposition returning unordered matrix and pivots\n    lu_solve - Solve Ax=b using back substitution with output of lu_factor\n    svd - Singular value decomposition of a matrix\n    svdvals - Singular values of a matrix\n    diagsvd - Construct matrix of singular values from output of svd\n    orth - Construct orthonormal basis for the range of A using svd\n    null_space - Construct orthonormal basis for the null space of A using svd\n    ldl - LDL.T decomposition of a Hermitian or a symmetric matrix.\n    cholesky - Cholesky decomposition of a matrix\n    cholesky_banded - Cholesky decomp. of a sym. or Hermitian banded matrix\n    cho_factor - Cholesky decomposition for use in solving a linear system\n    cho_solve - Solve previously factored linear system\n    cho_solve_banded - Solve previously factored banded linear system\n    polar - Compute the polar decomposition.\n    qr - QR decomposition of a matrix\n    qr_multiply - QR decomposition and multiplication by Q\n    qr_update - Rank k QR update\n    qr_delete - QR downdate on row or column deletion\n    qr_insert - QR update on row or column insertion\n    rq - RQ decomposition of a matrix\n    qz - QZ decomposition of a pair of matrices\n    ordqz - QZ decomposition of a pair of matrices with reordering\n    schur - Schur decomposition of a matrix\n    rsf2csf - Real to complex Schur form\n    hessenberg - Hessenberg form of a matrix\n    cdf2rdf - Complex diagonal form to real diagonal block form\n    cossin - Cosine sine decomposition of a unitary or orthogonal matrix"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "argument": "",
            "content": "`scipy.linalg.interpolative` -- Interpolative matrix decompositions",
            "name": "seealso",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Decompositions"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    expm - Matrix exponential\n    logm - Matrix logarithm\n    cosm - Matrix cosine\n    sinm - Matrix sine\n    tanm - Matrix tangent\n    coshm - Matrix hyperbolic cosine\n    sinhm - Matrix hyperbolic sine\n    tanhm - Matrix hyperbolic tangent\n    signm - Matrix sign\n    sqrtm - Matrix square root\n    funm - Evaluating an arbitrary matrix function\n    expm_frechet - Frechet derivative of the matrix exponential\n    expm_cond - Relative condition number of expm in the Frobenius norm\n    fractional_matrix_power - Fractional matrix power"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Matrix Functions"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    solve_sylvester - Solve the Sylvester matrix equation\n    solve_continuous_are - Solve the continuous-time algebraic Riccati equation\n    solve_discrete_are - Solve the discrete-time algebraic Riccati equation\n    solve_continuous_lyapunov - Solve the continuous-time Lyapunov equation\n    solve_discrete_lyapunov - Solve the discrete-time Lyapunov equation"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Matrix Equation Solvers"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    clarkson_woodruff_transform - Applies the Clarkson Woodruff Sketch (a.k.a CountMin Sketch)"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Sketches and Random Projections"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    block_diag - Construct a block diagonal matrix from submatrices\n    circulant - Circulant matrix\n    companion - Companion matrix\n    convolution_matrix - Convolution matrix\n    dft - Discrete Fourier transform matrix\n    fiedler - Fiedler matrix\n    fiedler_companion - Fiedler companion matrix\n    hadamard - Hadamard matrix of order 2**n\n    hankel - Hankel matrix\n    helmert - Helmert matrix\n    hilbert - Hilbert matrix\n    invhilbert - Inverse Hilbert matrix\n    leslie - Leslie matrix\n    pascal - Pascal matrix\n    invpascal - Inverse Pascal matrix\n    toeplitz - Toeplitz matrix\n    tri - Construct a matrix filled with ones at and below a given diagonal"
          },
          "type": "BlockVerbatim"
        }
      ],
      "title": "Special Matrices"
    },
    {
      "children": [
        {
          "data": {
            "value": ".. autosummary:: \n    :toctree:generated/\n    get_blas_funcs\n    get_lapack_funcs\n    find_best_blas_type"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "argument": "",
            "content": "`scipy.linalg.blas` -- Low-level BLAS functions\n\n`scipy.linalg.lapack` -- Low-level LAPACK functions\n\n`scipy.linalg.cython_blas` -- Low-level BLAS functions for Cython\n\n`scipy.linalg.cython_lapack` -- Low-level LAPACK functions for Cython",
            "name": "seealso",
            "options": []
          },
          "type": "BlockDirective"
        }
      ],
      "title": "Low-level routines"
    }
  ],
  "content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "To remove in the future \u2013\u2013 scipy.linalg"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/scipy/linalg/__init__.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": null
  }
}