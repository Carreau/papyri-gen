{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Basin-hopping is a two-phase method that combines a global stepping algorithm with local minimization at each step. Designed to mimic the natural process of energy minimization of clusters of atoms, it works well for similar problems with \"funnel-like, but rugged\" energy landscapes ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "As the step-taking, step acceptance, and minimization methods are all customizable, this function can also be used to implement other two-phase methods."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Basin-hopping is a stochastic algorithm which attempts to find the global minimum of a smooth scalar function of one or more variables    . The algorithm in its current form was described by David Wales and Jonathan Doye  http://www-wales.ch.cam.ac.uk/."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The algorithm is iterative with each cycle composed of the following features"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "random perturbation of the coordinates"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "local minimization"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "accept or reject the new coordinates based on the minimized function    value"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The acceptance test used here is the Metropolis criterion of standard Monte Carlo algorithms, although there are many other possibilities ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This global minimization method has been shown to be extremely efficient for a wide variety of problems in physics and chemistry. It is particularly useful when the function has many minima separated by large barriers. See the Cambridge Cluster Database http://www-wales.ch.cam.ac.uk/CCD.html for databases of molecular systems that have been optimized primarily using basin-hopping. This database includes minimization problems exceeding 300 degrees of freedom."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "See the free software program GMIN (http://www-wales.ch.cam.ac.uk/GMIN) for a Fortran implementation of basin-hopping. This implementation has many different variations of the procedure described above, including more advanced step taking algorithms and alternate acceptance criterion."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For stochastic global optimization there is no way to determine if the true global minimum has actually been found. Instead, as a consistency check, the algorithm can be run from a number of different random starting points to ensure the lowest minimum found in each example has converged to the global minimum. For this reason, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "basinhopping"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will by default simply run for the number of iterations "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "niter"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and return the lowest minimum found. It is left to the user to ensure that this is in fact the global minimum."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Choosing "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "stepsize"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ":  This is a crucial parameter in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "basinhopping"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and depends on the problem being solved. The step is chosen uniformly in the region from x0-stepsize to x0+stepsize, in each dimension. Ideally, it should be comparable to the typical separation (in argument values) between local minima of the function being optimized. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "basinhopping"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will, by default, adjust "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "stepsize"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " to find an optimal value, but this may take many iterations. You will get quicker results if you set a sensible initial value for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "stepsize"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Choosing "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "T"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ": The parameter "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "T"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is the \"temperature\" used in the Metropolis criterion. Basinhopping steps are always accepted if "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "func(xnew) < func(xold)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". Otherwise, they are accepted with probability::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "exp( -(func(xnew) - func(xold)) / T )"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "So, for best results, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "T"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " should to be comparable to the typical difference (in function values) between local minima. (The height of \"walls\" between local minima is irrelevant.)"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "T"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is 0, the algorithm becomes Monotonic Basin-Hopping, in which all steps that increase energy are rejected."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "0.12.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Function to be optimized.  "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "args"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " can be passed as an optional item in the dict "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "minimizer_kwargs"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "func",
            "type_": "callable ``f(x, *args)``"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Initial guess."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x0",
            "type_": "array_like"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The number of basin-hopping iterations. There will be a total of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "niter + 1"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " runs of the local minimizer."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "niter",
            "type_": "integer, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The \"temperature\" parameter for the accept or reject criterion. Higher \"temperatures\" mean that larger jumps in function value will be accepted.  For best results "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "T"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " should be comparable to the separation (in function value) between local minima."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "T",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Maximum step size for use in the random displacement."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "stepsize",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Extra keyword arguments to be passed to the local minimizer "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "scipy.optimize.minimize()"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " Some important options could be:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": [
                    "method : str",
                    "    The minimization method (e.g. ``\"L-BFGS-B\"``)",
                    "args : tuple",
                    "    Extra arguments passed to the objective function (``func``) and",
                    "    its derivatives (Jacobian, Hessian)."
                  ]
                },
                "type": "BlockQuote"
              }
            ],
            "param": "minimizer_kwargs",
            "type_": "dict, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Replace the default step-taking routine with this routine. The default step-taking routine is a random displacement of the coordinates, but other step-taking algorithms may be better for some systems. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "take_step"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " can optionally have the attribute "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "take_step.stepsize"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". If this attribute exists, then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "basinhopping"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " will adjust "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "take_step.stepsize"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " in order to try to optimize the global minimum search."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "take_step",
            "type_": "callable ``take_step(x)``, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Define a test which will be used to judge whether or not to accept the step.  This will be used in addition to the Metropolis test based on \"temperature\" "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "T"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ".  The acceptable return values are True, False, or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "\"force accept\""
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". If any of the tests return False then the step is rejected. If the latter, then this will override any other tests in order to accept the step. This can be used, for example, to forcefully escape from a local minimum that "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "basinhopping"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is trapped in."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "accept_test",
            "type_": "callable, ``accept_test(f_new=f_new, x_new=x_new, f_old=fold, x_old=x_old)``, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A callback function which will be called for all minima found. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "f"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " are the coordinates and function value of the trial minimum, and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "accept"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is whether or not that minimum was accepted. This can be used, for example, to save the lowest N minima found. Also, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "callback"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " can be used to specify a user defined stop criterion by optionally returning True to stop the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "basinhopping"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " routine."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "callback",
            "type_": "callable, ``callback(x, f, accept)``, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "interval for how often to update the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "stepsize"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "interval",
            "type_": "integer, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Set to True to print status messages"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "disp",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Stop the run if the global minimum candidate remains the same for this number of iterations."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "niter_success",
            "type_": "integer, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "value": [
                    "`numpy.random.RandomState`}, optional"
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "seed",
                          "version": null
                        },
                        "value": "seed"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is None (or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "np.random"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "), the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "numpy",
                          "path": "numpy.random.mtrand.RandomState",
                          "version": "*"
                        },
                        "value": "numpy.random.RandomState"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " singleton is used. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "seed",
                          "version": null
                        },
                        "value": "seed"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is an int, a new "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "RandomState"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " instance is used, seeded with "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "seed",
                          "version": null
                        },
                        "value": "seed"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "seed",
                          "version": null
                        },
                        "value": "seed"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is already a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "Generator"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "RandomState"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " instance then that instance is used. Specify "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "seed",
                          "version": null
                        },
                        "value": "seed"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " for repeatable minimizations. The random numbers generated with this seed only affect the default Metropolis "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "accept_test",
                          "version": null
                        },
                        "value": "accept_test"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and the default "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "take_step",
                          "version": null
                        },
                        "value": "take_step"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". If you supply your own "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "take_step",
                          "version": null
                        },
                        "value": "take_step"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "accept_test",
                          "version": null
                        },
                        "value": "accept_test"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", and these functions use random number generation, then those functions are responsible for the state of their random number generator."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "seed",
            "type_": "{None, int, `numpy.random.Generator`,"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The target acceptance rate that is used to adjust the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "stepsize",
                          "version": null
                        },
                        "value": "stepsize"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". If the current acceptance rate is greater than the target, then the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "stepsize",
                          "version": null
                        },
                        "value": "stepsize"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is increased. Otherwise, it is decreased. Range is (0, 1). Default is 0.5."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "1.8.0 "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "versionadded",
                  "title": "TODO"
                },
                "type": "Admonition"
              }
            ],
            "param": "target_accept_rate",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "stepsize",
                          "version": null
                        },
                        "value": "stepsize"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is multiplied or divided by this stepwise factor upon each update. Range is (0, 1). Default is 0.9."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "1.8.0 "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "versionadded",
                  "title": "TODO"
                },
                "type": "Admonition"
              }
            ],
            "param": "stepwise_factor",
            "type_": "float, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The optimization result represented as a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "OptimizeResult"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " object. Important attributes are: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " the solution array, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fun"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " the value of the function at the solution, and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "message"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " which describes the cause of the termination. The "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "OptimizeResult"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " object returned by the selected minimizer at the lowest minimum is also contained within this object and can be accessed through the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "lowest_optimization_result"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " attribute.  See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.optimize._optimize.OptimizeResult",
                          "version": "1.8.0"
                        },
                        "value": "OptimizeResult"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " for a description of other attributes."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "res",
            "type_": "OptimizeResult"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Find the global minimum of a function using the basin-hopping algorithm."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.optimize.basinhopping"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The following example is a 1-D minimization problem, with many local minima superimposed on a parabola."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "optimize",
              "scipy.optimize",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "scipy.optimize._basinhopping.basinhopping",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "func",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "cos",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "14.5",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.3",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.2",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x0",
              "builtins.list",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1.",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Basinhopping, internally, uses a local minimization algorithm. We will use the parameter "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "minimizer_kwargs"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " to tell basinhopping which algorithm to use and how to set up that minimizer. This parameter will be passed to "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "scipy.optimize.minimize()"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": "."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "method",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "BFGS",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "}",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "scipy.optimize._basinhopping.basinhopping",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x0",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                   ",
              "",
              ""
            ],
            [
              "niter",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "200",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "global minimum: x = ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              ", f(x0) = ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fun",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "global minimum: x = -0.1951, f(x0) = -1.0009"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Next consider a 2-D minimization problem. Also, this time, we will use gradient information to significantly speed up the search."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "func2d",
              "__main__.func2d",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "f",
              "builtins.float",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "cos",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "14.5",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.3",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.2",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                                                           ",
              "",
              ""
            ],
            [
              "0.2",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "df",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "zeros",
              "numpy.zeros",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "df",
              "numpy.ndarray",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "14.5",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "sin",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "14.5",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.3",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2.",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.2",
              "",
              "mf"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "df",
              "numpy.ndarray",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2.",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.2",
              "",
              "mf"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "f",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "df",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "We'll also use a different local minimization algorithm. Also, we must tell the minimizer that our function returns both energy and gradient (Jacobian)."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "method",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "L-BFGS-B",
              "",
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "jac",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              "}",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x0",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1.0",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1.0",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "scipy.optimize._basinhopping.basinhopping",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func2d",
              "__main__.func2d",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x0",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                   ",
              "",
              ""
            ],
            [
              "niter",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "200",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "global minimum: x = [",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              ", ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              "], f(x0) = ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                                                          ",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                                                          ",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fun",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "global minimum: x = [-0.1951, -0.1000], f(x0) = -1.0109"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Here is an example using a custom step-taking routine. Imagine you want the first coordinate to take larger steps than the rest of the coordinates. This can be implemented like so:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "class",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "MyTakeStep",
              "__main__.MyTakeStep",
              "nc"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "   ",
              "",
              ""
            ],
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "__init__",
              "__main__.MyTakeStep.__init__",
              "fm"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyTakeStep",
              "bp"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "stepsize",
              "builtins.float",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "       ",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyTakeStep",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "stepsize",
              "builtins.float",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "stepsize",
              "builtins.float",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "       ",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyTakeStep",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "rng",
              "numpy.random._generator.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "numpy.random",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "default_rng",
              "numpy.random._generator.default_rng",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "   ",
              "",
              ""
            ],
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "__call__",
              "__main__.MyTakeStep.__call__",
              "fm"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyTakeStep",
              "bp"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "       ",
              "",
              ""
            ],
            [
              "s",
              "builtins.float",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyTakeStep",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "stepsize",
              "builtins.float",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "       ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyTakeStep",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "rng",
              "numpy.random._generator.Generator",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "uniform",
              "builtins.Generator.uniform",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "2.",
              "",
              "mf"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "s",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2.",
              "",
              "mf"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "s",
              "builtins.float",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "       ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyTakeStep",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "rng",
              "numpy.random._generator.Generator",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "uniform",
              "builtins.Generator.uniform",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "s",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "s",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "shape",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "       ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Since "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "MyTakeStep.stepsize"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " exists basinhopping will adjust the magnitude of "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "stepsize"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " to optimize the search. We'll use the same 2-D function as before"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "mytakestep",
              "__main__.MyTakeStep",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "MyTakeStep",
              "__main__.MyTakeStep",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "scipy.optimize._basinhopping.basinhopping",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func2d",
              "__main__.func2d",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x0",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                   ",
              "",
              ""
            ],
            [
              "niter",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "200",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "take_step",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "mytakestep",
              "__main__.MyTakeStep",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "global minimum: x = [",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              ", ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              "], f(x0) = ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                                                          ",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                                                          ",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fun",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "global minimum: x = [-0.1951, -0.1000], f(x0) = -1.0109"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Now, let's do an example using a custom callback function which prints the value of every minimum found"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "print_fun",
              "__main__.print_fun",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "f",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "accepted",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "at minimum ",
              "",
              "s2"
            ],
            [
              "%.4f",
              "",
              "si"
            ],
            [
              " accepted ",
              "",
              "s2"
            ],
            [
              "%d",
              "",
              "si"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "%",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "f",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "int",
              "builtins.int",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "accepted",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "We'll run it for only 10 basinhopping steps this time."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "rng",
              "numpy.random._generator.Generator",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "numpy.random",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "default_rng",
              "numpy.random._generator.default_rng",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "scipy.optimize._basinhopping.basinhopping",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func2d",
              "__main__.func2d",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x0",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                   ",
              "",
              ""
            ],
            [
              "niter",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "callback",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "print_fun",
              "__main__.print_fun",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "seed",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "rng",
              "numpy.random._generator.Generator",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "at minimum 0.4159 accepted 1\nat minimum -0.4317 accepted 1\nat minimum -1.0109 accepted 1\nat minimum -0.9073 accepted 1\nat minimum -0.4317 accepted 0\nat minimum -0.1021 accepted 1\nat minimum -0.7425 accepted 1\nat minimum -0.9073 accepted 1\nat minimum -0.4317 accepted 0\nat minimum -0.7425 accepted 1\nat minimum -0.9073 accepted 1"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The minimum at -1.0109 is actually the global minimum, found already on the 8th iteration."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Now let's implement bounds on the problem using a custom "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "accept_test"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ":"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "class",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "MyBounds",
              "__main__.MyBounds",
              "nc"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "__init__",
              "__main__.MyBounds.__init__",
              "fm"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyBounds",
              "bp"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "xmax",
              "builtins.list",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1.1",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "1.1",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "xmin",
              "builtins.list",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1.1",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1.1",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyBounds",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "xmax",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "xmax",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyBounds",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "xmin",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "xmin",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "__call__",
              "__main__.MyBounds.__call__",
              "fm"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyBounds",
              "bp"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "kwargs",
              "builtins.dict",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "kwargs",
              "builtins.dict",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "x_new",
              null,
              "s2"
            ],
            [
              "\"",
              "",
              "s2"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "tmax",
              "builtins.bool",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bool",
              "builtins.bool",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "all",
              "numpy.all",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "<",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyBounds",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "xmax",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "tmin",
              "builtins.bool",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bool",
              "builtins.bool",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "all",
              "numpy.all",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              ">",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "self",
              "__main__.MyBounds",
              "bp"
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "xmin",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "        ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "tmax",
              "builtins.bool",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "and",
              null,
              "ow"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "tmin",
              "builtins.bool",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "mybounds",
              "__main__.MyBounds",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "MyBounds",
              "__main__.MyBounds",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "basinhopping",
              "scipy.optimize._basinhopping.basinhopping",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func2d",
              "__main__.func2d",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x0",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "minimizer_kwargs",
              "builtins.dict",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "                   ",
              "",
              ""
            ],
            [
              "niter",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "accept_test",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "mybounds",
              "__main__.MyBounds",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/optimize/_basinhopping.py",
  "item_line": 351,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "refs": [
    "__main__.MyBounds",
    "__main__.MyBounds.__call__",
    "__main__.MyBounds.__init__",
    "__main__.MyTakeStep",
    "__main__.MyTakeStep.__call__",
    "__main__.MyTakeStep.__init__",
    "__main__.func2d",
    "__main__.print_fun",
    "builtins.Generator.uniform",
    "builtins.bool",
    "builtins.dict",
    "builtins.float",
    "builtins.int",
    "builtins.list",
    "builtins.print",
    "minimize",
    "numpy",
    "numpy.all",
    "numpy.array",
    "numpy.ndarray",
    "numpy.random",
    "numpy.random._generator.Generator",
    "numpy.random._generator.default_rng",
    "numpy.ufunc",
    "numpy.zeros",
    "scipy",
    "scipy.optimize",
    "scipy.optimize._basinhopping.basinhopping",
    "scipy.optimize._optimize.OptimizeResult"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "The local minimization function called once for each basinhopping step. "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "minimizer_kwargs"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " is passed to this routine."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": null,
        "name": "minimize",
        "ref": null
      },
      "type": null
    }
  ],
  "signature": {
    "value": "basinhopping(func, x0, niter=100, T=1.0, stepsize=0.5, minimizer_kwargs=None, take_step=None, accept_test=None, callback=None, interval=50, disp=False, niter_success=None, seed=None, *, target_accept_rate=0.5, stepwise_factor=0.9)"
  }
}