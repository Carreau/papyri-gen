{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This function implements the Dual Annealing optimization. This stochastic approach derived from  combines the generalization of CSA (Classical Simulated Annealing) and FSA (Fast Simulated Annealing)   coupled to a strategy for applying a local search on accepted locations . An alternative implementation of this same algorithm is described in  and benchmarks are presented in . This approach introduces an advanced method to refine the solution found by the generalized annealing process. This algorithm uses a distorted Cauchy-Lorentz visiting distribution, with its shape controlled by the parameter "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "q_{v}"
                  ]
                },
                "type": "Math"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "g_ { q_ { v}} ( \\Delta x ( t)) \\propto \\frac { \\ \\left [ T_ { q_ { v}} ( t) \\right]^ { - \\frac { D} { 3 - q_ { v}}}} { \\ \\left [ { 1+ ( q_ { v} - 1)\\frac { ( \\Delta x ( t))^ { 2}} { \\ \\left [ T_ { q_ { v}} ( t)\\right]^ { \\frac { 2} { 3 - q_ { v}}}}}\\right]^ { \\ \\frac { 1} { q_ { v} - 1}+\\frac { D - 1} { 2}}} "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "t"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " is the artificial time. This visiting distribution is used to generate a trial jump distance "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\Delta x(t)"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " of variable "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x(t)"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " under artificial temperature "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "T_{q_{v}}(t)"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "From the starting point, after calling the visiting distribution function, the acceptance probability is computed as follows:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "p_ { q_ { a}} = \\min { \\ { 1,\\left [ 1 - ( 1 - q_ { a}) \\beta \\Delta E \\right]^ { \\ \\frac { 1} { 1 - q_ { a}}}\\}} "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "q_{a}"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " is a acceptance parameter. For "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "q_{a}<1"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ", zero acceptance probability is assigned to the cases where"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "[ 1 - ( 1 - q_ { a}) \\beta \\Delta E] < 0 "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The artificial temperature "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "T_{q_{v}}(t)"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " is decreased according to"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "T_ { q_ { v}} ( t) = T_ { q_ { v}} ( 1) \\frac { 2^ { q_ { v} - 1} - 1} { \\left ( \\ 1 + t\\right)^ { q_ { v} - 1} - 1} "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "q_{v}"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " is the visiting parameter."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.2.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The objective function to be minimized. Must be in the form "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "f(x, *args)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", where "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is the argument in the form of a 1-D array and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "args"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is a  tuple of any additional fixed parameters needed to completely specify the function."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "func",
            "type_": "callable"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Bounds for variables.  "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(min, max)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " pairs for each element in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", defining bounds for the objective function parameter."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "bounds",
            "type_": "sequence, shape (n, 2)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Any additional fixed parameters needed to completely specify the objective function."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "args",
            "type_": "tuple, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The maximum number of global search iterations. Default value is 1000."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "maxiter",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Extra keyword arguments to be passed to the local minimizer ("
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "minimize"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "). Some important options could be: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "method"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for the minimizer method to use and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "args"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for objective function additional arguments."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "minimizer_kwargs",
            "type_": "dict, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The initial temperature, use higher values to facilitates a wider search of the energy landscape, allowing dual_annealing to escape local minima that it is trapped in. Default value is 5230. Range is (0.01, 5.e4]."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "initial_temp",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "During the annealing process, temperature is decreasing, when it reaches "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "initial_temp * restart_temp_ratio"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", the reannealing process is triggered. Default value of the ratio is 2e-5. Range is (0, 1)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "restart_temp_ratio",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Parameter for visiting distribution. Default value is 2.62. Higher values give the visiting distribution a heavier tail, this makes the algorithm jump to a more distant region. The value range is (1, 3]."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "visit",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Parameter for acceptance distribution. It is used to control the probability of acceptance. The lower the acceptance parameter, the smaller the probability of acceptance. Default value is -5.0 with a range (-1e4, -5]."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "accept",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Soft limit for the number of objective function calls. If the algorithm is in the middle of a local search, this number will be exceeded, the algorithm will stop just after the local search is done. Default value is 1e7."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "maxfun",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "value": [
                    "`numpy.random.RandomState`}, optional"
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "seed",
                          "version": null
                        },
                        "value": "seed"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is None (or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "np.random"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": "), the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "numpy",
                          "path": "numpy.random.mtrand.RandomState",
                          "version": "*"
                        },
                        "value": "numpy.random.RandomState"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " singleton is used. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "seed",
                          "version": null
                        },
                        "value": "seed"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is an int, a new "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "RandomState"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " instance is used, seeded with "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "seed",
                          "version": null
                        },
                        "value": "seed"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "seed",
                          "version": null
                        },
                        "value": "seed"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is already a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "Generator"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "RandomState"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " instance then that instance is used. Specify "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "seed",
                          "version": null
                        },
                        "value": "seed"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " for repeatable minimizations. The random numbers generated with this seed only affect the visiting distribution function and new coordinates generation."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "seed",
            "type_": "{None, int, `numpy.random.Generator`,"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "no_local_search",
                          "version": null
                        },
                        "value": "no_local_search"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is set to True, a traditional Generalized Simulated Annealing will be performed with no local search strategy applied."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "no_local_search",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A callback function with signature "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "callback(x, f, context)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", which will be called for all minima found. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "f"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " are the coordinates and function value of the latest minimum found, and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "context"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " has value in [0, 1, 2], with the following meaning:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": [
                    "- 0: minimum detected in the annealing process.",
                    "- 1: detection occurred in the local search process.",
                    "- 2: detection done in the dual annealing process."
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If the callback implementation returns True, the algorithm will stop."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "callback",
            "type_": "callable, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Coordinates of a single N-D starting point."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x0",
            "type_": "ndarray, shape(n,), optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Backwards compatible flag for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "minimizer_kwargs",
                          "version": null
                        },
                        "value": "minimizer_kwargs"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", only one of these should be supplied."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "local_search_options",
            "type_": "dict, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The optimization result represented as a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.optimize._optimize.OptimizeResult",
                          "version": "1.8.0"
                        },
                        "value": "OptimizeResult"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " object. Important attributes are: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " the solution array, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fun"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " the value of the function at the solution, and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "message"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " which describes the cause of the termination. See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.optimize._optimize.OptimizeResult",
                          "version": "1.8.0"
                        },
                        "value": "OptimizeResult"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " for a description of other attributes."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "res",
            "type_": "OptimizeResult"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Find the global minimum of a function using Dual Annealing."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.optimize.dual_annealing"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The following example is a 10-D problem, with many local minima. The function involved is called Rastrigin (https://en.wikipedia.org/wiki/Rastrigin_function)"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "optimize",
              "scipy.optimize",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dual_annealing",
              "scipy.optimize._dual_annealing.dual_annealing",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "func",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lambda",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "sum",
              "numpy.sum",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "cos",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "pi",
              "builtins.float",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "size",
              "numpy.size",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "lw",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "5.12",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "up",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "5.12",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "10",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dual_annealing",
              "scipy.optimize._dual_annealing.dual_annealing",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bounds",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "list",
              "builtins.list",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "zip",
              "builtins.zip",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "lw",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "up",
              "builtins.list",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ]
          ],
          "out": "array([-4.26437714e-09, -3.91699361e-09, -1.86149218e-09, -3.97165720e-09,\n       -6.29151648e-09, -6.53145322e-09, -3.93616815e-09, -6.55623025e-09,\n       -6.05775280e-09, -5.00668935e-09]) # random"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "ret",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "fun",
              null,
              ""
            ]
          ],
          "out": "0.000000"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/optimize/_dual_annealing.py",
  "item_line": 436,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.float",
    "builtins.list",
    "builtins.zip",
    "numpy",
    "numpy.size",
    "numpy.sum",
    "numpy.ufunc",
    "scipy",
    "scipy.optimize",
    "scipy.optimize._dual_annealing.dual_annealing",
    "scipy.optimize._optimize.OptimizeResult"
  ],
  "see_also": [],
  "signature": {
    "value": "dual_annealing(func, bounds, args=(), maxiter=1000, minimizer_kwargs=None, initial_temp=5230.0, restart_temp_ratio=2e-05, visit=2.62, accept=-5.0, maxfun=10000000.0, seed=None, no_local_search=False, callback=None, x0=None, local_search_options=None)"
  }
}