{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Assume problems of the form:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": [
              "MIN c.T @ x",
              "s.t. lhs <= A @ x <= rhs",
              "     lb <= x <= ub"
            ]
          },
          "type": "BlockQuote"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "options['write_solution_to_file']"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " but "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "options['solution_file']"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is unset or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "''"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", then the solution will be printed to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "stdout"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If any iteration limit is reached, no solution will be available."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": [
                    "OptimizeWarning"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will be raised if any option value set by the user is found to be incorrect."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Array of objective value coefficients."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "c",
            "type_": "1-D array, (n,)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "CSC format index array."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "astart",
            "type_": "1-D array"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "CSC format index array."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "aindex",
            "type_": "1-D array"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Data array of the matrix."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "avalue",
            "type_": "1-D array"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Array of left hand side values of the inequality constraints. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "lhs=None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", then an array of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "-inf"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is assumed."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "lhs",
            "type_": "1-D array (or None), (m,)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Array of right hand side values of the inequality constraints."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "rhs",
            "type_": "1-D array, (m,)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Lower bounds on solution variables x.  If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "lb=None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", then an array of all "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "0"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " is assumed."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "lb",
            "type_": "1-D array (or None), (n,)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Upper bounds on solution variables x.  If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "ub=None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", then an array of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "inf"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is assumed."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "ub",
            "type_": "1-D array (or None), (n,)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A dictionary of solver options with the following fields:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": [
                    "- allowed_simplex_cost_scale_factor : int",
                    "    Undocumented advanced option.",
                    "",
                    "- allowed_simplex_matrix_scale_factor : int",
                    "    Undocumented advanced option.",
                    "",
                    "- dual_feasibility_tolerance : double",
                    "    Dual feasibility tolerance for simplex.",
                    "    ``min(dual_feasibility_tolerance,",
                    "    primal_feasibility_tolerance)`` will be used for",
                    "    ipm feasibility tolerance.",
                    "",
                    "- dual_objective_value_upper_bound : double",
                    "    Upper bound on objective value for dual simplex:",
                    "    algorithm terminates if reached",
                    "",
                    "- dual_simplex_cleanup_strategy : int",
                    "    Undocumented advanced option.",
                    "",
                    "- dual_simplex_cost_perturbation_multiplier : double",
                    "    Undocumented advanced option.",
                    "",
                    "- dual_steepest_edge_weight_log_error_threshhold : double",
                    "    Undocumented advanced option.",
                    "",
                    "- infinite_bound : double",
                    "    Limit on abs(constraint bound): values larger than",
                    "    this will be treated as infinite",
                    "",
                    "- infinite_cost : double",
                    "    Limit on cost coefficient: values larger than this",
                    "    will be treated as infinite.",
                    "",
                    "- ipm_iteration_limit : int",
                    "    Iteration limit for interior-point solver.",
                    "",
                    "- ipm_optimality_tolerance : double",
                    "    Optimality tolerance for IPM.",
                    "",
                    "- keep_n_rows : int {-1, 0, 1}",
                    "    Undocumented advanced option.",
                    "",
                    "        - ``-1``: ``KEEP_N_ROWS_DELETE_ROWS``",
                    "        - ``0``: ``KEEP_N_ROWS_DELETE_ENTRIES``",
                    "        - ``1``: ``KEEP_N_ROWS_KEEP_ROWS``",
                    "",
                    "- large_matrix_value : double",
                    "    Upper limit on abs(matrix entries): values larger than",
                    "    this will be treated as infinite",
                    "",
                    "- less_infeasible_DSE_check : bool",
                    "    Undocumented advanced option.",
                    "",
                    "- less_infeasible_DSE_choose_row : bool",
                    "    Undocumented advanced option.",
                    "",
                    "- max_threads : int",
                    "    Maximum number of threads in parallel execution.",
                    "",
                    "- message_level : int {0, 1, 2, 4, 7}",
                    "    Verbosity level, corresponds to:",
                    "",
                    "        - ``0``: ``ML_NONE``",
                    "            All messaging to stdout is supressed.",
                    "",
                    "        - ``1``: ``ML_VERBOSE``",
                    "            Includes a once-per-iteration report on simplex/ipm",
                    "            progress and information about each nonzero row and",
                    "            column.",
                    "",
                    "        - ``2``: ``ML_DETAILED``",
                    "            Includes technical information about progress and",
                    "            events in applying the simplex method.",
                    "",
                    "        - ``4``: ``ML_MINIMAL``",
                    "            Once-per-solve information about progress as well as a",
                    "            once-per-basis-matrix-reinversion report on progress in",
                    "            simplex or a once-per-iteration report on progress in IPX.",
                    "",
                    "    ``message_level`` behaves like a bitmask, i.e., any",
                    "    combination of levels is possible using the bit-or",
                    "    operator.",
                    "",
                    "- min_threads : int",
                    "    Minimum number of threads in parallel execution.",
                    "",
                    "- mps_parser_type_free : bool",
                    "    Use free format MPS parsing.",
                    "",
                    "- parallel : bool",
                    "    Run the solver in serial (False) or parallel (True).",
                    "",
                    "- presolve : bool",
                    "    Run the presolve or not (or if ``None``, then choose).",
                    "",
                    "- primal_feasibility_tolerance : double",
                    "    Primal feasibility tolerance.",
                    "    ``min(dual_feasibility_tolerance,",
                    "    primal_feasibility_tolerance)`` will be used for",
                    "    ipm feasibility tolerance.",
                    "",
                    "- run_as_hsol : bool",
                    "    Undocumented advanced option.",
                    "",
                    "- run_crossover : bool",
                    "    Advanced option. Toggles running the crossover routine",
                    "    for IPX.",
                    "",
                    "- sense : int {1, -1}",
                    "    ``sense=1`` corresponds to the MIN problem, ``sense=-1``",
                    "    corresponds to the MAX problem. TODO: NOT IMPLEMENTED",
                    "",
                    "- simplex_crash_strategy : int {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}",
                    "    Strategy for simplex crash: off / LTSSF / Bixby (0/1/2).",
                    "    Default is ``0``.  Corresponds to the following:",
                    "",
                    "        - ``0``: ``SIMPLEX_CRASH_STRATEGY_OFF``",
                    "        - ``1``: ``SIMPLEX_CRASH_STRATEGY_LTSSF_K``",
                    "        - ``2``: ``SIMPLEX_CRASH_STRATEGY_BIXBY``",
                    "        - ``3``: ``SIMPLEX_CRASH_STRATEGY_LTSSF_PRI``",
                    "        - ``4``: ``SIMPLEX_CRASH_STRATEGY_LTSF_K``",
                    "        - ``5``: ``SIMPLEX_CRASH_STRATEGY_LTSF_PRI``",
                    "        - ``6``: ``SIMPLEX_CRASH_STRATEGY_LTSF``",
                    "        - ``7``: ``SIMPLEX_CRASH_STRATEGY_BIXBY_NO_NONZERO_COL_COSTS``",
                    "        - ``8``: ``SIMPLEX_CRASH_STRATEGY_BASIC``",
                    "        - ``9``: ``SIMPLE_CRASH_STRATEGY_TEST_SING``",
                    "",
                    "- simplex_dualise_strategy : int",
                    "    Undocumented advanced option.",
                    "",
                    "- simplex_dual_edge_weight_strategy : int {0, 1, 2, 3, 4}",
                    "    Strategy for simplex dual edge weights:",
                    "    Dantzig / Devex / Steepest Edge. Corresponds",
                    "    to the following:",
                    "",
                    "        - ``0``: ``SIMPLEX_DUAL_EDGE_WEIGHT_STRATEGY_DANTZIG``",
                    "        - ``1``: ``SIMPLEX_DUAL_EDGE_WEIGHT_STRATEGY_DEVEX``",
                    "        - ``2``: ``SIMPLEX_DUAL_EDGE_WEIGHT_STRATEGY_STEEPEST_EDGE_TO_DEVEX_SWITCH``",
                    "        - ``3``: ``SIMPLEX_DUAL_EDGE_WEIGHT_STRATEGY_STEEPEST_EDGE``",
                    "        - ``4``: ``SIMPLEX_DUAL_EDGE_WEIGHT_STRATEGY_STEEPEST_EDGE_UNIT_INITIAL``",
                    "",
                    "- simplex_initial_condition_check : bool",
                    "    Undocumented advanced option.",
                    "",
                    "- simplex_initial_condition_tolerance : double",
                    "    Undocumented advanced option.",
                    "",
                    "- simplex_iteration_limit : int",
                    "    Iteration limit for simplex solver.",
                    "",
                    "- simplex_permute_strategy : int",
                    "    Undocumented advanced option.",
                    "",
                    "- simplex_price_strategy : int",
                    "    Undocumented advanced option.",
                    "",
                    "- simplex_primal_edge_weight_strategy : int {0, 1}",
                    "    Strategy for simplex primal edge weights:",
                    "    Dantzig / Devex.  Corresponds to the following:",
                    "",
                    "        - ``0``: ``SIMPLEX_PRIMAL_EDGE_WEIGHT_STRATEGY_DANTZIG``",
                    "        - ``1``: ``SIMPLEX_PRIMAL_EDGE_WEIGHT_STRATEGY_DEVEX``",
                    "",
                    "- simplex_scale_strategy : int {0, 1, 2, 3, 4, 5}",
                    "    Strategy for scaling before simplex solver:",
                    "    off / on (0/1)",
                    "",
                    "        - ``0``:  ``SIMPLEX_SCALE_STRATEGY_OFF``",
                    "        - ``1``: ``SIMPLEX_SCALE_STRATEGY_HIGHS``",
                    "        - ``2``: ``SIMPLEX_SCALE_STRATEGY_HIGHS_FORCED``",
                    "        - ``3``: ``SIMPLEX_SCALE_STRATEGY_HIGHS_015``",
                    "        - ``4``: ``SIMPLEX_SCALE_STRATEGY_HIGHS_0157``",
                    "        - ``5``: ``SIMPLEX_SCALE_STRATEGY_HSOL``",
                    "",
                    "- simplex_strategy : int {0, 1, 2, 3, 4}",
                    "    Strategy for simplex solver. Default: 1. Corresponds",
                    "    to the following:",
                    "",
                    "        - ``0``: ``SIMPLEX_STRATEGY_MIN``",
                    "        - ``1``: ``SIMPLEX_STRATEGY_DUAL``",
                    "        - ``2``: ``SIMPLEX_STRATEGY_DUAL_TASKS``",
                    "        - ``3``: ``SIMPLEX_STRATEGY_DUAL_MULTI``",
                    "        - ``4``: ``SIMPLEX_STRATEGY_PRIMAL``",
                    "",
                    "- simplex_update_limit : int",
                    "    Limit on the number of simplex UPDATE operations.",
                    "",
                    "- small_matrix_value : double",
                    "    Lower limit on abs(matrix entries): values smaller",
                    "    than this will be treated as zero.",
                    "",
                    "- solution_file : str",
                    "    Solution file",
                    "",
                    "- solver : str {'simplex', 'ipm'}",
                    "    Choose which solver to use.  If ``solver='simplex'``",
                    "    and ``parallel=True`` then PAMI will be used.",
                    "",
                    "- start_crossover_tolerance : double",
                    "    Tolerance to be satisfied before IPM crossover will",
                    "    start.",
                    "",
                    "- time_limit : double",
                    "    Max number of seconds to run the solver for.",
                    "",
                    "- use_original_HFactor_logic : bool",
                    "    Undocumented advanced option.",
                    "",
                    "- write_solution_to_file : bool",
                    "    Write the primal and dual solution to a file",
                    "",
                    "- write_solution_pretty : bool",
                    "    Write the primal and dual solution in a pretty",
                    "    (human-readable) format"
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "See  for a list of all non-advanced options."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "options",
            "type_": "dict"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If model_status is one of OPTIMAL, REACHED_DUAL_OBJECTIVE_VALUE_UPPER_BOUND, REACHED_TIME_LIMIT, REACHED_ITERATION_LIMIT:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": [
                    "- ``status`` : int",
                    "    Model status code.",
                    "",
                    "- ``message`` : str",
                    "    Message corresponding to model status code.",
                    "",
                    "- ``x`` : list",
                    "    Solution variables.",
                    "",
                    "- ``slack`` : list",
                    "    Slack variables.",
                    "",
                    "- ``lambda`` : list",
                    "    Lagrange multipliers assoicated with the constraints",
                    "    Ax = b.",
                    "",
                    "- ``s`` : list",
                    "    Lagrange multipliers associated with the constraints",
                    "    x >= 0.",
                    "",
                    "- ``fun``",
                    "    Final objective value.",
                    "",
                    "- ``simplex_nit`` : int",
                    "    Number of iterations accomplished by the simplex",
                    "    solver.",
                    "",
                    "- ``ipm_nit`` : int",
                    "    Number of iterations accomplished by the interior-",
                    "    point solver."
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If model_status is not one of the above:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": [
                    "- ``status`` : int",
                    "    Model status code.",
                    "",
                    "- ``message`` : str",
                    "    Message corresponding to model status code."
                  ]
                },
                "type": "BlockQuote"
              }
            ],
            "param": "res",
            "type_": "dict"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Solve linear programs using HiGHS ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.optimize._linprog_highs._highs_wrapper"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'builtin_function_or_method'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References"
  ],
  "references": null,
  "refs": [],
  "see_also": [],
  "signature": {
    "value": null
  }
}