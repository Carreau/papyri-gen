{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Linear programming solves problems of the following form:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "\\min_x \\ & c^T x \\\\ \\mbox { such that} \\ & A_ { ub} x \\leq b_ { ub},\\\\ & A_ { eq} x = b_ { eq},\\\\ & l \\leq x \\leq u , "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " is a vector of decision variables; "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "c"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "b_{ub}"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "b_{eq}"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "l"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "u"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " are vectors; and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "A_{ub}"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "A_{eq}"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " are matrices."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Alternatively, that's:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "minimize::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "c @ x"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "such that::      "
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "A_ub @ x <= b_ub\nA_eq @ x == b_eq\nlb <= x <= ub"
          },
          "type": "BlockVerbatim"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Note that by default "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "lb = 0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "ub = None"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " unless specified with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "bounds"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This section describes the available solvers that can be selected by the 'method' parameter."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "'highs-ds'"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "'highs-ipm'"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " are interfaces to the HiGHS simplex and interior-point method solvers , respectively. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "'highs'"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " chooses between the two automatically. These are the fastest linear programming solvers in SciPy, especially for large, sparse problems; which of these two is faster is problem-dependent. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "'interior-point'"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is the default as it was the fastest and most robust method before the recent addition of the HiGHS solvers. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "'revised simplex'"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is more accurate than interior-point for the problems it solves. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "'simplex'"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " is the legacy method and is included for backwards compatibility and educational purposes."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "highs-ds"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is a wrapper of the C++ high performance dual revised simplex implementation (HSOL) , . Method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "highs-ipm"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " is a wrapper of a C++ implementation of an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "i"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": "\\ nterior-\\ "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "p"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": "\\ oint "
                },
                "type": "Words"
              },
              {
                "data": {
                  "content": {
                    "value": "m"
                  }
                },
                "type": "Strong"
              },
              {
                "data": {
                  "value": "\\ ethod ; it features a crossover routine, so it is as accurate as a simplex solver. Method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "highs"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " chooses between the two automatically. For new code involving "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.optimize._linprog.linprog",
                    "version": "1.8.0"
                  },
                  "value": "linprog"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", we recommend explicitly choosing one of these three method values."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.6.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "interior-point"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " uses the primal-dual path following algorithm as outlined in . This algorithm supports sparse constraint matrices and is typically faster than the simplex methods, especially for large, sparse problems. Note, however, that the solution returned may be slightly less accurate than those of the simplex methods and will not, in general, correspond with a vertex of the polytope defined by the constraints."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.0.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "revised simplex"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " uses the revised simplex method as described in , except that a factorization  of the basis matrix, rather than its inverse, is efficiently maintained and used to solve the linear systems at each iteration of the algorithm."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "1.3.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "simplex"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " uses a traditional, full-tableau implementation of Dantzig's simplex algorithm ,  ("
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "not"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " the Nelder-Mead simplex). This algorithm is included for backwards compatibility and educational purposes."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "0.15.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Before applying "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "interior-point"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "revised simplex"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "simplex"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": ", a presolve procedure based on  attempts to identify trivial infeasibilities, trivial unboundedness, and potential problem simplifications. Specifically, it checks for:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "rows of zeros in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "A_eq"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "A_ub"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", representing trivial constraints;"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "columns of zeros in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "A_eq"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "and"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "A_ub"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", representing unconstrained   variables;"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "column singletons in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "A_eq"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", representing fixed variables; and"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "column singletons in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "A_ub"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", representing simple bounds."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If presolve reveals that the problem is unbounded (e.g. an unconstrained and unbounded variable has negative cost) or infeasible (e.g., a row of zeros in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "A_eq"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " corresponds with a nonzero in "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "b_eq"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "), the solver terminates with the appropriate status code. Note that presolve terminates as soon as any sign of unboundedness is detected; consequently, a problem may be reported as unbounded when in reality the problem is infeasible (but infeasibility has not been detected yet). Therefore, if it is important to know whether the problem is actually infeasible, solve the problem again with option "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "presolve=False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "If neither infeasibility nor unboundedness are detected in a single pass of the presolve, bounds are tightened where possible and fixed variables are removed from the problem. Then, linearly dependent rows of the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "A_eq"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " matrix are removed, (unless they represent an infeasibility) to avoid numerical difficulties in the primary solve routine. Note that rows that are nearly linearly dependent (within a prescribed tolerance) may also be removed, which can change the optimal solution in rare cases. If this is a concern, eliminate redundancy from your problem formulation and run with option "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "rr=False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "presolve=False"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Several potential improvements can be made here: additional presolve checks outlined in  should be implemented, the presolve routine should be run multiple times (until no further simplifications can be made), and more of the efficiency improvements from  should be implemented in the redundancy removal routines."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "After presolve, the problem is transformed to standard form by converting the (tightened) simple bounds to upper bound constraints, introducing non-negative slack variables for inequality constraints, and expressing unbounded variables as the difference between two non-negative variables. Optionally, the problem is automatically scaled via equilibration . The selected algorithm solves the standard form problem, and a postprocessing routine converts the result to a solution to the original problem."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The coefficients of the linear objective function to be minimized."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "c",
            "type_": "1-D array"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The inequality constraint matrix. Each row of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "A_ub"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " specifies the coefficients of a linear inequality constraint on "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "A_ub",
            "type_": "2-D array, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The inequality constraint vector. Each element represents an upper bound on the corresponding value of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "A_ub @ x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "b_ub",
            "type_": "1-D array, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The equality constraint matrix. Each row of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "A_eq"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " specifies the coefficients of a linear equality constraint on "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "A_eq",
            "type_": "2-D array, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The equality constraint vector. Each element of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "A_eq @ x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " must equal the corresponding element of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "b_eq"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "b_eq",
            "type_": "1-D array, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A sequence of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(min, max)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " pairs for each element in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", defining the minimum and maximum values of that decision variable. Use "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " to indicate that there is no bound. By default, bounds are "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(0, None)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " (all decision variables are non-negative). If a single tuple "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(min, max)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is provided, then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "min"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "max"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " will serve as bounds for all decision variables."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "bounds",
            "type_": "sequence, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The algorithm used to solve the standard form problem. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "'highs-ds' <optimize.linprog-highs-ds>"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "'highs-ipm' <optimize.linprog-highs-ipm>"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "'highs' <optimize.linprog-highs>"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "'interior-point' <optimize.linprog-interior-point>"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " (default), "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "'revised simplex' <optimize.linprog-revised_simplex>"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "'simplex' <optimize.linprog-simplex>"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " (legacy) are supported."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "method",
            "type_": "str, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If a callback function is provided, it will be called at least once per iteration of the algorithm. The callback function must accept a single "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "api",
                          "module": "scipy",
                          "path": "scipy.optimize._optimize.OptimizeResult",
                          "version": "*"
                        },
                        "value": "scipy.optimize.OptimizeResult"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " consisting of the following fields:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "x"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "x"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "fun"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "fun"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "success"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "success"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "slack"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "slack"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "con"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "con"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "phase"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "phase"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "status"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "status"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    }
                  ]
                },
                "type": "DefList"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Callback functions are not currently supported by the HiGHS methods."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "callback",
            "type_": "callable, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A dictionary of solver options. All methods accept the following options:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "maxiter"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "maxiter"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "disp"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "disp"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "presolve"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "presolve"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    }
                  ]
                },
                "type": "DefList"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "All methods except the HiGHS solvers also accept:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "tol"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "tol"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "autoscale"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "autoscale"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "rr"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "rr"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "rr_method"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": "rr_method"
                            },
                            "type": "Words"
                          }
                        ],
                        "inner": []
                      }
                    }
                  ]
                },
                "type": "DefList"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "For method-specific options, see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "show_options('linprog') <show_options>"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "options",
            "type_": "dict, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Guess values of the decision variables, which will be refined by the optimization algorithm. This argument is currently used only by the 'revised simplex' method, and can only be used if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x0",
                          "version": null
                        },
                        "value": "x0"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " represents a basic feasible solution."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x0",
            "type_": "1-D array, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "scipy.optimize.OptimizeResult"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " consisting of the fields:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "res",
            "type_": "OptimizeResult"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Linear programming: minimize a linear objective function subject to linear equality and inequality constraints."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.optimize.linprog"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Consider the following problem:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "value": ""
        },
        "type": "BlockMath"
      },
      {
        "data": {
          "value": [
            "\\min_{x_0, x_1} \\ -x_0 + 4x_1 & \\\\",
            "\\mbox{such that} \\ -3x_0 + x_1 & \\leq 6,\\\\",
            "-x_0 - 2x_1 & \\geq -4,\\\\",
            "x_1 & \\geq -3."
          ]
        },
        "type": "BlockQuote"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The problem is not presented in the form accepted by "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "scipy",
                  "path": "scipy.optimize._linprog.linprog",
                  "version": "1.8.0"
                },
                "value": "linprog"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": ". This is easily remedied by converting the \"greater than\" inequality constraint to a \"less than\" inequality constraint by multiplying both sides by a factor of "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "-1"
                ]
              },
              "type": "Math"
            },
            {
              "data": {
                "value": ". Note also that the last constraint is really the simple bound "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "-3 \\leq x_1 \\leq \\infty"
                ]
              },
              "type": "Math"
            },
            {
              "data": {
                "value": ". Finally, since there are no bounds on "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "x_0"
                ]
              },
              "type": "Math"
            },
            {
              "data": {
                "value": ", we must explicitly specify the bounds "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "-\\infty \\leq x_0 \\leq \\infty"
                ]
              },
              "type": "Math"
            },
            {
              "data": {
                "value": ", as the default is for variables to be non-negative. After collecting coeffecients into arrays and tuples, the input for this problem is:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "c",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "A",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "b",
              "builtins.list",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "6",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x0_bounds",
              "builtins.tuple",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "None",
              null,
              "kc"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "None",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x1_bounds",
              "builtins.tuple",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "None",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "optimize",
              "scipy.optimize",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "linprog",
              "scipy.optimize._linprog.linprog",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "res",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "linprog",
              "scipy.optimize._linprog.linprog",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "c",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "A_ub",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "A",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b_ub",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "b",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bounds",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "x0_bounds",
              "builtins.tuple",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x1_bounds",
              "builtins.tuple",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Note that the default method for "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "scipy",
                  "path": "scipy.optimize._linprog.linprog",
                  "version": "1.8.0"
                },
                "value": "linprog"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " is 'interior-point', which is approximate by nature."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "res",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "     con: array([], dtype=float64)\n     fun: -21.99999984082494 # may vary\n message: 'Optimization terminated successfully.'\n     nit: 6 # may vary\n   slack: array([3.89999997e+01, 8.46872439e-08] # may vary\n  status: 0\n success: True\n       x: array([ 9.99999989, -2.99999999]) # may vary"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "If you need greater accuracy, try 'revised simplex'."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "res",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "linprog",
              "scipy.optimize._linprog.linprog",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "c",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "A_ub",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "A",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b_ub",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "b",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bounds",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "x0_bounds",
              "builtins.tuple",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x1_bounds",
              "builtins.tuple",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "method",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "revised simplex",
              "",
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "res",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "     con: array([], dtype=float64)\n     fun: -22.0 # may vary\n message: 'Optimization terminated successfully.'\n     nit: 1 # may vary\n   slack: array([39.,  0.]) # may vary\n  status: 0\n success: True\n       x: array([10., -3.]) # may vary"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "You can use the "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "options"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " parameter, e.g., to restrict the maximum number of iterations."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "res",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "linprog",
              "scipy.optimize._linprog.linprog",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "c",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "A_ub",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "A",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b_ub",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "b",
              "builtins.list",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bounds",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "x0_bounds",
              "builtins.tuple",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x1_bounds",
              "builtins.tuple",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "              ",
              "",
              ""
            ],
            [
              "options",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "{",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "maxiter",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "}",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "res",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "    con: array([], dtype=float64)\n    fun: -21.35207150630407 # may vary\nmessage: 'The iteration limit was reached before the algorithm converged.'\n    nit: 4\n  slack: array([37.19406046,  0.5727398 ])\n status: 1\nsuccess: False\n      x: array([ 9.4021973 , -2.98746855])"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/optimize/_linprog.py",
  "item_line": 169,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.list",
    "builtins.print",
    "builtins.tuple",
    "scipy",
    "scipy.optimize",
    "scipy.optimize._linprog.linprog",
    "scipy.optimize._optimize.OptimizeResult",
    "show_options"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Additional options accepted by the solvers."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "show_options",
        "ref": "scipy.optimize._optimize.show_options"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "linprog(c, A_ub=None, b_ub=None, A_eq=None, b_eq=None, bounds=None, method='interior-point', callback=None, options=None, x0=None)"
  }
}