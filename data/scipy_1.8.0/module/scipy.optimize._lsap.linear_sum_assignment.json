{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The linear sum assignment problem  is also known as minimum weight matching in bipartite graphs. A problem instance is described by a matrix C, where each C[i,j] is the cost of matching vertex i of the first partite set (a \"worker\") and vertex j of the second set (a \"job\"). The goal is to find a complete assignment of workers to jobs of minimal cost."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Formally, let X be a boolean matrix where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "X[i,j] = 1"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " iff row i is assigned to column j. Then the optimal assignment has cost"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "\\min \\sum_i \\sum_j C_ { i,j} X_ { i,j} "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "where, in the case where the matrix X is square, each row is assigned to exactly one column, and each column to exactly one row."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This function can also solve a generalization of the classic assignment problem where the cost matrix is rectangular. If it has more rows than columns, then not every row needs to be assigned to a column, and vice versa."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This implementation is a modified Jonker-Volgenant algorithm with no initialization, described in ref. ."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "0.17.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The cost matrix of the bipartite graph."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "cost_matrix",
            "type_": "array"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Calculates a maximum weight matching if true."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "maximize",
            "type_": "bool (default: False)"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "An array of row indices and one of corresponding column indices giving the optimal assignment. The cost of the assignment can be computed as "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "cost_matrix[row_ind, col_ind].sum()"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". The row indices will be sorted; in the case of a square cost matrix they will be equal to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "numpy.arange(cost_matrix.shape[0])"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "row_ind, col_ind",
            "type_": "array"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Solve the linear sum assignment problem."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.optimize.linear_sum_assignment"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "cost",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "optimize",
              "scipy.optimize",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "linear_sum_assignment",
              "scipy.optimize._lsap.linear_sum_assignment",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "row_ind",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "col_ind",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "linear_sum_assignment",
              "scipy.optimize._lsap.linear_sum_assignment",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "cost",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "col_ind",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([1, 0, 2])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "cost",
              "numpy.ndarray",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "row_ind",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "col_ind",
              "numpy.ndarray",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "sum",
              "numpy._ArrayOrScalarCommon.sum",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "5"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/optimize/_lsap.py",
  "item_line": 15,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "refs": [
    "numpy",
    "numpy._ArrayOrScalarCommon.sum",
    "numpy.array",
    "numpy.ndarray",
    "scipy",
    "scipy.optimize",
    "scipy.optimize._lsap.linear_sum_assignment",
    "scipy.sparse.csgraph._matching.min_weight_full_bipartite_matching"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "for sparse inputs"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": null,
        "name": "scipy.sparse.csgraph.min_weight_full_bipartite_matching",
        "ref": "scipy.sparse.csgraph._matching.min_weight_full_bipartite_matching"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "linear_sum_assignment(cost_matrix, maximize=False)"
  }
}