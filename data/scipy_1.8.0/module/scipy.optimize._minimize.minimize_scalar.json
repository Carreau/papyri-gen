{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This section describes the available solvers that can be selected by the 'method' parameter. The default method is "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "Brent"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Brent <optimize.minimize_scalar-brent>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " uses Brent's algorithm to find a local minimum.  The algorithm uses inverse parabolic interpolation when possible to speed up convergence of the golden section method."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Golden <optimize.minimize_scalar-golden>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " uses the golden section search technique. It uses analog of the bisection method to decrease the bracketed interval. It is usually preferable to use the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": {
                    "value": "Brent"
                  }
                },
                "type": "Emph"
              },
              {
                "data": {
                  "value": " method."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Method "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Bounded <optimize.minimize_scalar-bounded>"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " can perform bounded minimization. It uses the Brent method to find a local minimum in the interval x1 < xopt < x2."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "content": {
                    "value": "Custom minimizers"
                  }
                },
                "type": "Strong"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "It may be useful to pass a custom minimization method, for example when using some library frontend to minimize_scalar. You can simply pass a callable as the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "method"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " parameter."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The callable is called as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "method(fun, args, **kwargs, **options)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "kwargs"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " corresponds to any other parameters passed to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.optimize._minimize.minimize",
                    "version": "1.8.0"
                  },
                  "value": "minimize"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " (such as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "bracket",
                    "version": null
                  },
                  "value": "bracket"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "tol",
                    "version": null
                  },
                  "value": "tol"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", etc.), except the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "options",
                    "version": null
                  },
                  "value": "options"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " dict, which has its contents also passed as "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "method",
                    "version": null
                  },
                  "value": "method"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " parameters pair by pair.  The method shall return an "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.optimize._optimize.OptimizeResult",
                    "version": "1.8.0"
                  },
                  "value": "OptimizeResult"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " object."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The provided "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "method",
                    "version": null
                  },
                  "value": "method"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " callable must be able to accept (and possibly ignore) arbitrary parameters; the set of parameters accepted by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.optimize._minimize.minimize",
                    "version": "1.8.0"
                  },
                  "value": "minimize"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " may expand in future versions and then these parameters will be passed to the method. You can find an example in the scipy.optimize tutorial."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "0.11.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Objective function. Scalar function, must return a scalar."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "fun",
            "type_": "callable"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "For methods 'brent' and 'golden', "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "bracket",
                          "version": null
                        },
                        "value": "bracket"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " defines the bracketing interval and can either have three items "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(a, b, c)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " so that "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a < b < c"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fun(b) < fun(a), fun(c)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " or two items "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "c"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " which are assumed to be a starting interval for a downhill bracket search (see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "bracket",
                          "version": null
                        },
                        "value": "bracket"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "); it doesn't always mean that the obtained solution will satisfy "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "a <= x <= c"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "bracket",
            "type_": "sequence, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "For method 'bounded', "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "bounds",
                          "version": null
                        },
                        "value": "bounds"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is mandatory and must have two items corresponding to the optimization bounds."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "bounds",
            "type_": "sequence, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Extra arguments passed to the objective function."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "args",
            "type_": "tuple, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Type of solver.  Should be one of:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": [
                    "- :ref:`Brent <optimize.minimize_scalar-brent>`",
                    "- :ref:`Bounded <optimize.minimize_scalar-bounded>`",
                    "- :ref:`Golden <optimize.minimize_scalar-golden>`",
                    "- custom - a callable object (added in version 0.14.0), see below"
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "See the 'Notes' section for details of each solver."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "method",
            "type_": "str or callable, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Tolerance for termination. For detailed control, use solver-specific options."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "tol",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A dictionary of solver options."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": [
                    "maxiter : int",
                    "    Maximum number of iterations to perform.",
                    "disp : bool",
                    "    Set to True to print convergence messages."
                  ]
                },
                "type": "BlockQuote"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "show_options()"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " for solver-specific options."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "options",
            "type_": "dict, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The optimization result represented as a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "OptimizeResult"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " object. Important attributes are: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " the solution array, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "success"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " a Boolean flag indicating if the optimizer exited successfully and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "message"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " which describes the cause of the termination. See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.optimize._optimize.OptimizeResult",
                          "version": "1.8.0"
                        },
                        "value": "OptimizeResult"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " for a description of other attributes."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "res",
            "type_": "OptimizeResult"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Minimization of scalar function of one variable."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.optimize.minimize_scalar"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Consider the problem of minimizing the following function."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "f",
              "__main__.f",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "2",
              "",
              "mi"
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Using the "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": {
                  "value": "Brent"
                }
              },
              "type": "Emph"
            },
            {
              "data": {
                "value": " method, we find the local minimum as:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "optimize",
              "scipy.optimize",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimize_scalar",
              "scipy.optimize._minimize.minimize_scalar",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "res",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimize_scalar",
              "scipy.optimize._minimize.minimize_scalar",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "f",
              "__main__.f",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "res",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ]
          ],
          "out": "1.28077640403"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Using the "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": {
                  "value": "Bounded"
                }
              },
              "type": "Emph"
            },
            {
              "data": {
                "value": " method, we find a local minimum with specified bounds as:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "res",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "minimize_scalar",
              "scipy.optimize._minimize.minimize_scalar",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "f",
              "__main__.f",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "bounds",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "method",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "bounded",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "res",
              "scipy.optimize._optimize.OptimizeResult",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "x",
              null,
              ""
            ]
          ],
          "out": "-2.0000002026"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/optimize/_minimize.py",
  "item_line": 720,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "refs": [
    "__main__.f",
    "minimize",
    "scipy",
    "scipy.optimize",
    "scipy.optimize._minimize.minimize_scalar",
    "scipy.optimize._optimize.OptimizeResult",
    "show_options"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Interface to minimization algorithms for scalar multivariate functions"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "minimize",
        "ref": "scipy.optimize._minimize.minimize"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Additional options accepted by the solvers"
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "show_options",
        "ref": "scipy.optimize._optimize.show_options"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "minimize_scalar(fun, bracket=None, bounds=None, args=(), method='brent', tol=None, options=None)"
  }
}