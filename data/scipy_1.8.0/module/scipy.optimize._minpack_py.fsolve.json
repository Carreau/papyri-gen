{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Return the roots of the (non-linear) equations defined by "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "func(x) = 0"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " given a starting estimate."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": [
                    "fsolve"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a wrapper around MINPACK's hybrd and hybrj algorithms."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A function that takes at least one (possibly vector) argument, and returns a value of the same length."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "func",
            "type_": "callable ``f(x, *args)``"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The starting estimate for the roots of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "func(x) = 0"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x0",
            "type_": "ndarray"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Any extra arguments to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "func",
                          "version": null
                        },
                        "value": "func"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "args",
            "type_": "tuple, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A function to compute the Jacobian of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "func",
                          "version": null
                        },
                        "value": "func"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " with derivatives across the rows. By default, the Jacobian will be estimated."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "fprime",
            "type_": "callable ``f(x, *args)``, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True, return optional outputs."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "full_output",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Specify whether the Jacobian function computes derivatives down the columns (faster, because there is no transpose operation)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "col_deriv",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The calculation will terminate if the relative error between two consecutive iterates is at most "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "xtol",
                          "version": null
                        },
                        "value": "xtol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "xtol",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The maximum number of calls to the function. If zero, then "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "100*(N+1)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is the maximum where N is the number of elements in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "x0",
                          "version": null
                        },
                        "value": "x0"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "maxfev",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If set to a two-sequence containing the number of sub- and super-diagonals within the band of the Jacobi matrix, the Jacobi matrix is considered banded (only for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fprime=None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ")."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "band",
            "type_": "tuple, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A suitable step length for the forward-difference approximation of the Jacobian (for "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "fprime=None"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "). If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "epsfcn",
                          "version": null
                        },
                        "value": "epsfcn"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is less than the machine precision, it is assumed that the relative errors in the functions are of the order of the machine precision."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "epsfcn",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A parameter determining the initial step bound ("
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "factor * || diag * x||"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "). Should be in the interval "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(0.1, 100)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "factor",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "N positive entries that serve as a scale factors for the variables."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "diag",
            "type_": "sequence, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The solution (or the result of the last iteration for an unsuccessful call)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x",
            "type_": "ndarray"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A dictionary of optional outputs with the keys:"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "number of function calls"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": [
                                "nfev"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "number of Jacobian calls"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": [
                                "njev"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "function evaluated at the output"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": [
                                "fvec"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "the orthogonal matrix, q, produced by the QR     factorization of the final approximate Jacobian     matrix, stored column wise"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": [
                                "fjac"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "upper triangular matrix produced by QR factorization     of the same matrix"
                                },
                                "type": "Words"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": [
                                "r"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "dd": [
                        {
                          "data": {
                            "inline": [
                              {
                                "data": {
                                  "value": "the vector "
                                },
                                "type": "Words"
                              },
                              {
                                "data": {
                                  "value": [
                                    "(transpose(q) * fvec)"
                                  ]
                                },
                                "type": "Verbatim"
                              }
                            ],
                            "inner": []
                          },
                          "type": "Paragraph"
                        }
                      ],
                      "dt": {
                        "inline": [
                          {
                            "data": {
                              "value": [
                                "qtf"
                              ]
                            },
                            "type": "Verbatim"
                          }
                        ],
                        "inner": []
                      }
                    }
                  ]
                },
                "type": "DefList"
              }
            ],
            "param": "infodict",
            "type_": "dict"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "An integer flag.  Set to 1 if a solution was found, otherwise refer to "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "mesg",
                          "version": null
                        },
                        "value": "mesg"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " for more information."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "ier",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If no solution is found, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "mesg",
                          "version": null
                        },
                        "value": "mesg"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " details the cause of failure."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "mesg",
            "type_": "str"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Find the roots of a function."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.optimize.fsolve"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Find a solution to the system of equations: "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "x0*cos(x1) = 4,  x1*x0 - x1 = 5"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": "."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "optimize",
              "scipy.optimize",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "fsolve",
              "scipy.optimize._minpack_py.fsolve",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "func",
              "__main__.func",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "cos",
              "numpy.ufunc",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "            ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "root",
              "builtins.tuple",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "fsolve",
              "scipy.optimize._minpack_py.fsolve",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func",
              "__main__.func",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "root",
              "builtins.tuple",
              ""
            ]
          ],
          "out": "array([6.50409711, 0.90841421])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "isclose",
              "numpy.isclose",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "func",
              "__main__.func",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "root",
              "builtins.tuple",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0.0",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.0",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# func(root) should be almost 0.0.",
              "",
              "c1"
            ]
          ],
          "out": "array([ True,  True])"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/optimize/_minpack_py.py",
  "item_line": 46,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "refs": [
    "__main__.func",
    "builtins.tuple",
    "numpy",
    "numpy.isclose",
    "numpy.ufunc",
    "root",
    "scipy",
    "scipy.optimize",
    "scipy.optimize._minpack_py.fsolve"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "Interface to root finding algorithms for multivariate functions. See the "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "method=='hybr'"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " in particular."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "root",
        "ref": "scipy.optimize._root.root"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "fsolve(func, x0, args=(), fprime=None, full_output=0, col_deriv=0, xtol=1.49012e-08, maxfev=0, band=None, epsfcn=None, factor=100, diag=None)"
  }
}