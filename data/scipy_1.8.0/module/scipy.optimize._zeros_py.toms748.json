{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Implements the Algorithm 748 method of Alefeld, Potro and Shi to find a zero of the function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "f",
                    "version": null
                  },
                  "value": "f"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " on the interval "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "[a , b]"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": ", where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "f(a)"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "f(b)"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " must have opposite signs."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "It uses a mixture of inverse cubic interpolation and \"Newton-quadratic\" steps. [APS1995]."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "f",
                    "version": null
                  },
                  "value": "f"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " must be continuous. Algorithm 748 with "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k=2"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is asymptotically the most efficient algorithm known for finding roots of a four times continuously differentiable function. In contrast with Brent's algorithm, which may only decrease the length of the enclosing bracket on the last step, Algorithm 748 decreases it each iteration with the same asymptotic efficiency as it finds the root."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "For easy statement of efficiency indices, assume that "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "f",
                    "version": null
                  },
                  "value": "f"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " has 4 continuouous deriviatives. For "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k=1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the convergence order is at least 2.7, and with about asymptotically 2 function evaluations per iteration, the efficiency index is approximately 1.65. For "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k=2"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the order is about 4.6 with asymptotically 3 function evaluations per iteration, and the efficiency index 1.66. For higher values of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "k",
                    "version": null
                  },
                  "value": "k"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", the efficiency index approaches the kth root of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "(3k-2)"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", hence "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k=1"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " or "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "k=2"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are usually appropriate."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Python function returning a scalar. The function "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "f"
                        ]
                      },
                      "type": "Math"
                    },
                    {
                      "data": {
                        "value": " must be continuous, and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "f(a)"
                        ]
                      },
                      "type": "Math"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "f(b)"
                        ]
                      },
                      "type": "Math"
                    },
                    {
                      "data": {
                        "value": " have opposite signs."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "f",
            "type_": "function"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "lower boundary of the search interval"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "a",
            "type_": "scalar,"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "upper boundary of the search interval"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "b",
            "type_": "scalar,"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "containing extra arguments for the function "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "f",
                          "version": null
                        },
                        "value": "f"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ". "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "f",
                          "version": null
                        },
                        "value": "f"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is called by "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "f(x, *args)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "args",
            "type_": "tuple, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The number of Newton quadratic steps to perform each iteration. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "k>=1"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "k",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The computed root "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x0"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " will satisfy "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "np.allclose(x, x0,\natol=xtol, rtol=rtol)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", where "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is the exact root. The parameter must be nonnegative."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "xtol",
            "type_": "scalar, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The computed root "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x0"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " will satisfy "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "np.allclose(x, x0,\natol=xtol, rtol=rtol)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", where "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is the exact root."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "rtol",
            "type_": "scalar, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If convergence is not achieved in "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "maxiter",
                          "version": null
                        },
                        "value": "maxiter"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " iterations, an error is raised. Must be >= 0."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "maxiter",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "full_output",
                          "version": null
                        },
                        "value": "full_output"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is False, the root is returned. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "full_output",
                          "version": null
                        },
                        "value": "full_output"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is True, the return value is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(x, r)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", where "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "x"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " is the root, and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "r",
                          "version": null
                        },
                        "value": "r"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is a "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.optimize._zeros_py.RootResults",
                          "version": "1.8.0"
                        },
                        "value": "RootResults"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " object."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "full_output",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True, raise RuntimeError if the algorithm didn't converge. Otherwise, the convergence status is recorded in the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.optimize._zeros_py.RootResults",
                          "version": "1.8.0"
                        },
                        "value": "RootResults"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " return object."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "disp",
            "type_": "bool, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Approximate Zero of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "f",
                          "version": null
                        },
                        "value": "f"
                      },
                      "type": "Link"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x0",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Object containing information about the convergence. In particular, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "r.converged"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is True if the routine converged."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "r",
            "type_": "`RootResults` (present if ``full_output = True``)"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Find a zero using TOMS Algorithm 748 method."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.optimize.toms748"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "def",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "f",
              "__main__.f",
              "nf"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "    ",
              "",
              ""
            ],
            [
              "return",
              null,
              "k"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              null,
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# only one real root at x = 1",
              "",
              "c1"
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "optimize",
              "scipy.optimize",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "root",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "results",
              "scipy.optimize._zeros_py.RootResults",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "optimize",
              "scipy.optimize",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "toms748",
              "scipy.optimize._zeros_py.toms748",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "f",
              "__main__.f",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "2",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "full_output",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "True",
              null,
              "kc"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "root",
              "builtins.int",
              ""
            ]
          ],
          "out": "1.0"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "results",
              "scipy.optimize._zeros_py.RootResults",
              ""
            ]
          ],
          "out": "      converged: True\n           flag: 'converged'\n function_calls: 11\n     iterations: 5\n           root: 1.0"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/optimize/_zeros_py.py",
  "item_line": 1248,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "refs": [
    "__main__.f",
    "bisect",
    "brenth",
    "brentq",
    "builtins.int",
    "fsolve",
    "newton",
    "ridder",
    "scipy",
    "scipy.optimize",
    "scipy.optimize._zeros_py.RootResults",
    "scipy.optimize._zeros_py.toms748"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "brentq",
        "ref": "scipy.optimize._zeros_py.brentq"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "brenth",
        "ref": "scipy.optimize._zeros_py.brenth"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "ridder",
        "ref": "scipy.optimize._zeros_py.ridder"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "bisect",
        "ref": "scipy.optimize._zeros_py.bisect"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "newton",
        "ref": "scipy.optimize._zeros_py.newton"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "inline": [
            {
              "data": {
                "value": "find zeroes in N dimensions."
              },
              "type": "Words"
            }
          ],
          "inner": []
        }
      ],
      "name": {
        "exists": true,
        "name": "fsolve",
        "ref": "scipy.optimize._minpack_py.fsolve"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "toms748(f, a, b, args=(), k=1, xtol=2e-12, rtol=8.881784197001252e-16, maxiter=100, full_output=False, disp=True)"
  }
}