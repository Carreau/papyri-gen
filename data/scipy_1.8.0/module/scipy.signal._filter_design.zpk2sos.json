{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The algorithm used to convert ZPK to SOS format is designed to minimize errors due to numerical precision issues. The pairing algorithm attempts to minimize the peak gain of each biquadratic section. This is done by pairing poles with the nearest zeros, starting with the poles closest to the unit circle for discrete-time systems, and poles closest to the imaginary axis for continuous-time systems."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": [
                    "pairing='minimal'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " outputs may not be suitable for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.signal._signaltools.sosfilt",
                    "version": "1.8.0"
                  },
                  "value": "sosfilt"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "analog=True"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " outputs will never be suitable for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.signal._signaltools.sosfilt",
                    "version": "1.8.0"
                  },
                  "value": "sosfilt"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": "."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": {
                    "value": "Algorithms"
                  }
                },
                "type": "Emph"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The steps in the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pairing='nearest'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pairing='keep_odd'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pairing='minimal'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " algorithms are mostly shared. The "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'nearest'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " algorithm attempts to minimize the peak gain, while "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'keep_odd'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " minimizes peak gain under the constraint that odd-order systems should retain one section as first order. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'minimal'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is similar to "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "'keep_odd'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", but no additional poles or zeros are introduced"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The algorithm steps are as follows:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "As a pre-processing step for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pairing='nearest'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pairing='keep_odd'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", add poles or zeros to the origin as necessary to obtain the same number of poles and zeros for pairing.  If "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "pairing == 'nearest'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and there are an odd number of poles, add an additional pole and a zero at the origin."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The following steps are then iterated over until no more poles or zeros remain:"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Take the (next remaining) pole (complex or real) closest to the    unit circle (or imaginary axis, for "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "analog=True"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ") to    begin a new filter section."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "If the pole is real and there are no other remaining real poles ,    add the closest real zero to the section and leave it as a first    order section. Note that after this step we are guaranteed to be    left with an even number of real poles, complex poles, real zeros,    and complex zeros for subsequent pairing iterations."
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "value": [
                  {
                    "data": {
                      "inline": [
                        {
                          "data": {
                            "value": "Else:"
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": [
                        "1. If the pole is complex and the zero is the only remaining real",
                        "   zero*, then pair the pole with the *next* closest zero",
                        "   (guaranteed to be complex). This is necessary to ensure that",
                        "   there will be a real zero remaining to eventually create a",
                        "   first-order section (thus keeping the odd order).",
                        "",
                        "2. Else pair the pole with the closest remaining zero (complex or",
                        "   real).",
                        "",
                        "3. Proceed to complete the second-order section by adding another",
                        "   pole and zero to the current pole and zero in the section:",
                        "",
                        "    1. If the current pole and zero are both complex, add their",
                        "       conjugates.",
                        "",
                        "    2. Else if the pole is complex and the zero is real, add the",
                        "       conjugate pole and the next closest real zero.",
                        "",
                        "    3. Else if the pole is real and the zero is complex, add the",
                        "       conjugate zero and the real pole closest to those zeros.",
                        "",
                        "    4. Else (we must have a real pole and real zero) add the next",
                        "       real pole closest to the unit circle, and then add the real",
                        "       zero closest to that pole."
                      ]
                    },
                    "type": "BlockQuote"
                  }
                ]
              }
            ]
          },
          "type": "EnumeratedList"
        },
        {
          "data": {
            "placeholder": "footnote",
            "value": ".. [#] This conditional can only be met for specific odd-order inputs\n       with the ``pairing = 'keep_odd'`` or ``'minimal'`` methods."
          },
          "type": "Unimplemented"
        },
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "0.16.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Zeros of the transfer function."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "z",
            "type_": "array_like"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Poles of the transfer function."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "p",
            "type_": "array_like"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "System gain."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "k",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The method to use to combine pairs of poles and zeros into sections. If analog is False and pairing is None, pairing is set to 'nearest'; if analog is True, pairing must be 'minimal', and is set to that if it is None."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "pairing",
            "type_": "{None, 'nearest', 'keep_odd', 'minimal'}, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If True, system is analog, otherwise discrete."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "1.8.0 "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "versionadded",
                  "title": "TODO"
                },
                "type": "Admonition"
              }
            ],
            "param": "analog",
            "type_": "bool, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Array of second-order filter coefficients, with shape "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(n_sections, 6)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". See "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.signal._signaltools.sosfilt",
                          "version": "1.8.0"
                        },
                        "value": "sosfilt"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " for the SOS filter format specification."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "sos",
            "type_": "ndarray"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Return second-order sections from zeros, poles, and gain of a system"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal.zpk2sos"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Design a 6th order low-pass elliptic digital filter for a system with a sampling rate of 8000 Hz that has a pass-band corner frequency of 1000 Hz. The ripple in the pass-band should not exceed 0.087 dB, and the attenuation in the stop-band should be at least 90 dB."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "In the following call to "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "scipy",
                  "path": "scipy.signal._filter_design.ellip",
                  "version": "1.8.0"
                },
                "value": "ellip"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": ", we could use "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "output='sos'"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ", but for this example, we'll use "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "output='zpk'"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ", and then convert to SOS format with "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "scipy",
                  "path": "scipy.signal._filter_design.zpk2sos",
                  "version": "1.8.0"
                },
                "value": "zpk2sos"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": ":"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "signal",
              "scipy.signal",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "z",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "p",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "k",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "signal",
              "scipy.signal",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "ellip",
              "scipy.signal._filter_design.ellip",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "6",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.087",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "90",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1000",
              "",
              "mi"
            ],
            [
              "/",
              "",
              "o"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              "8000",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "output",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "zpk",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "Now convert to SOS format."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "sos",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "signal",
              "scipy.signal",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "zpk2sos",
              "scipy.signal._filter_design.zpk2sos",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "z",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "p",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "k",
              "numpy.floating",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The coefficients of the numerators of the sections:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "sos",
              "numpy.ndarray",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": "array([[ 0.0014154 ,  0.00248707,  0.0014154 ],\n       [ 1.        ,  0.72965193,  1.        ],\n       [ 1.        ,  0.17594966,  1.        ]])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The symmetry in the coefficients occurs because all the zeros are on the unit circle."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The coefficients of the denominators of the sections:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "sos",
              "numpy.ndarray",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "3",
              "",
              "mi"
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ]
          ],
          "out": "array([[ 1.        , -1.32543251,  0.46989499],\n       [ 1.        , -1.26117915,  0.6262586 ],\n       [ 1.        , -1.25707217,  0.86199667]])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The next example shows the effect of the "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "pairing",
                  "version": null
                },
                "value": "pairing"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " option.  We have a system with three poles and three zeros, so the SOS array will have shape (2, 6). The means there is, in effect, an extra pole and an extra zero at the origin in the SOS representation."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "z1",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              "j",
              "builtins.complex",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              "0.5",
              "",
              "mf"
            ],
            [
              "j",
              "builtins.complex",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "p1",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0.75",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.8",
              "",
              "mf"
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              "0.1",
              "",
              "mf"
            ],
            [
              "j",
              "builtins.complex",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.8",
              "",
              "mf"
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "0.1",
              "",
              "mf"
            ],
            [
              "j",
              "builtins.complex",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "With "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "pairing='nearest'"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": " (the default), we obtain"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "signal",
              "scipy.signal",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "zpk2sos",
              "scipy.signal._filter_design.zpk2sos",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "z1",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "p1",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([[ 1.  ,  1.  ,  0.5 ,  1.  , -0.75,  0.  ],\n       [ 1.  ,  1.  ,  0.  ,  1.  , -1.6 ,  0.65]])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The first section has the zeros {-0.5-0.05j, -0.5+0.5j} and the poles {0, 0.75}, and the second section has the zeros {-1, 0} and poles {0.8+0.1j, 0.8-0.1j}. Note that the extra pole and zero at the origin have been assigned to different sections."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "With "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "pairing='keep_odd'"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ", we obtain:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "signal",
              "scipy.signal",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "zpk2sos",
              "scipy.signal._filter_design.zpk2sos",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "z1",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "p1",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pairing",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "keep_odd",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([[ 1.  ,  1.  ,  0.  ,  1.  , -0.75,  0.  ],\n       [ 1.  ,  1.  ,  0.5 ,  1.  , -1.6 ,  0.65]])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The extra pole and zero at the origin are in the same section. The first section is, in effect, a first-order section."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "With "
              },
              "type": "Words"
            },
            {
              "data": {
                "value": [
                  "pairing='minimal'"
                ]
              },
              "type": "Verbatim"
            },
            {
              "data": {
                "value": ", the first-order section doesn't have the extra pole and zero at the origin:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "signal",
              "scipy.signal",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "zpk2sos",
              "scipy.signal._filter_design.zpk2sos",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "z1",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "p1",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "pairing",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "minimal",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([[ 0.  ,  1.  ,  1.  ,  0.  ,  1.  , -0.75],\n       [ 1.  ,  1.  ,  0.5 ,  1.  , -1.6 ,  0.65]])"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/signal/_filter_design.py",
  "item_line": 1289,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.complex",
    "builtins.int",
    "numpy",
    "numpy.array",
    "numpy.floating",
    "numpy.ndarray",
    "scipy",
    "scipy.signal",
    "scipy.signal._filter_design.ellip",
    "scipy.signal._filter_design.zpk2sos",
    "sosfilt"
  ],
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "exists": true,
        "name": "sosfilt",
        "ref": "scipy.signal._signaltools.sosfilt"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "zpk2sos(z, p, k, pairing=None, *, analog=False)"
  }
}