{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Solves "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "A @ x[i] = w[i] * x[i]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the standard eigenvalue problem for w[i] eigenvalues with corresponding eigenvectors x[i]."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If M is specified, solves "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "A @ x[i] = w[i] * M @ x[i]"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", the generalized eigenvalue problem for w[i] eigenvalues with corresponding eigenvectors x[i]."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Note that there is no specialized routine for the case when A is a complex Hermitian matrix. In this case, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "eigsh()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will call "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "eigs()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and return the real parts of the eigenvalues thus obtained."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This function is a wrapper to the ARPACK  SSEUPD and DSEUPD functions which use the Implicitly Restarted Lanczos Method to find the eigenvalues and eigenvectors ."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "the operation "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "M @ x"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for the generalized eigenvalue problem"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": [
                        "A @ x = w * M @ x."
                      ]
                    },
                    "type": "BlockQuote"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "M must represent a real symmetric matrix if A is real, and must represent a complex Hermitian matrix if A is complex. For best results, the data type of M should be the same as that of A. Additionally:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": [
                        "If sigma is None, M is symmetric positive definite.",
                        "",
                        "If sigma is specified, M is symmetric positive semi-definite.",
                        "",
                        "In buckling mode, M is symmetric indefinite."
                      ]
                    },
                    "type": "BlockQuote"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If sigma is None, eigsh requires an operator to compute the solution of the linear equation "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "M @ x = b"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". This is done internally via a (sparse) LU decomposition for an explicit matrix M, or via an iterative solver for a general linear operator.  Alternatively, the user can supply the matrix or operator Minv, which gives "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "x = Minv @ b = M^-1 @ b"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "M",
                "type_": "An N x N matrix, array, sparse matrix, or linear operator representing"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Find eigenvalues near sigma using shift-invert mode.  This requires an operator to compute the solution of the linear system "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "[A - sigma * M] x = b"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", where M is the identity matrix if unspecified.  This is computed internally via a (sparse) LU decomposition for explicit matrices A & M, or via an iterative solver if either A or M is a general linear operator. Alternatively, the user can supply the matrix or operator OPinv, which gives "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "x = OPinv @ b = [A - sigma * M]^-1 @ b"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Note that when sigma is specified, the keyword 'which' refers to the shifted eigenvalues "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "w'[i]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " where:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": [
                        "if mode == 'normal', ``w'[i] = 1 / (w[i] - sigma)``.",
                        "",
                        "if mode == 'cayley', ``w'[i] = (w[i] + sigma) / (w[i] - sigma)``.",
                        "",
                        "if mode == 'buckling', ``w'[i] = w[i] / (w[i] - sigma)``."
                      ]
                    },
                    "type": "BlockQuote"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "(see further discussion in 'mode' below)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "sigma",
                "type_": "real"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Starting vector for iteration. Default: random"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "v0",
                "type_": "ndarray, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The number of Lanczos vectors generated ncv must be greater than k and smaller than n; it is recommended that "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "ncv > 2*k"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Default: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "min(n, max(2*k + 1, 20))"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "ncv",
                "type_": "int, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If A is a complex Hermitian matrix, 'BE' is invalid. Which "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "k",
                              "version": null
                            },
                            "value": "k"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " eigenvectors and eigenvalues to find:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "which",
                "type_": "str ['LM' | 'SM' | 'LA' | 'SA' | 'BE']"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Maximum number of Arnoldi update iterations allowed. Default: "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "n*10"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "maxiter",
                "type_": "int, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Relative accuracy for eigenvalues (stopping criterion). The default value of 0 implies machine precision."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "tol",
                "type_": "float"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "See notes in M, above."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "Minv",
                "type_": "N x N matrix, array, sparse matrix, or LinearOperator"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "See notes in sigma, above."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "OPinv",
                "type_": "N x N matrix, array, sparse matrix, or LinearOperator"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Return eigenvectors (True) in addition to eigenvalues. This value determines the order in which eigenvalues are sorted. The sort order is also dependent on the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "which"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " variable."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": [
                        "For which = 'LM' or 'SA':",
                        "    If `return_eigenvectors` is True, eigenvalues are sorted by",
                        "    algebraic value.",
                        "",
                        "    If `return_eigenvectors` is False, eigenvalues are sorted by",
                        "    absolute value.",
                        "",
                        "For which = 'BE' or 'LA':",
                        "    eigenvalues are always sorted by algebraic value.",
                        "",
                        "For which = 'SM':",
                        "    If `return_eigenvectors` is True, eigenvalues are sorted by",
                        "    algebraic value.",
                        "",
                        "    If `return_eigenvectors` is False, eigenvalues are sorted by",
                        "    decreasing absolute value."
                      ]
                    },
                    "type": "BlockQuote"
                  }
                ],
                "param": "return_eigenvectors",
                "type_": "bool"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Specify strategy to use for shift-invert mode.  This argument applies only for real-valued A and sigma != None.  For shift-invert mode, ARPACK internally solves the eigenvalue problem "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "OP @ x'[i] = w'[i] * B @ x'[i]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and transforms the resulting Ritz vectors x'[i] and Ritz values w'[i] into the desired eigenvectors and eigenvalues of the problem "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "A @ x[i] = w[i] * M @ x[i]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". The modes are as follows:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "value": [
                        "'normal' :",
                        "    OP = [A - sigma * M]^-1 @ M,",
                        "    B = M,",
                        "    w'[i] = 1 / (w[i] - sigma)",
                        "",
                        "'buckling' :",
                        "    OP = [A - sigma * M]^-1 @ A,",
                        "    B = A,",
                        "    w'[i] = w[i] / (w[i] - sigma)",
                        "",
                        "'cayley' :",
                        "    OP = [A - sigma * M]^-1 @ [A + sigma * M],",
                        "    B = M,",
                        "    w'[i] = (w[i] + sigma) / (w[i] - sigma)"
                      ]
                    },
                    "type": "BlockQuote"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The choice of mode will affect which eigenvalues are selected by the keyword 'which', and can also impact the stability of convergence (see [2] for a discussion)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "mode",
                "type_": "string ['normal' | 'buckling' | 'cayley']"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A square operator representing the operation "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "A @ x"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", where "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "A"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is real symmetric or complex Hermitian. For buckling mode (see below) "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "A"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " must additionally be positive-definite."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "A",
                "type_": "ndarray, sparse matrix or LinearOperator"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The number of eigenvalues and eigenvectors desired. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "k",
                              "version": null
                            },
                            "value": "k"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " must be smaller than N. It is not possible to compute all eigenvectors of a matrix."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "k",
                "type_": "int, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "When the requested convergence is not obtained."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The currently converged eigenvalues and eigenvectors can be found as "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "eigenvalues"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "eigenvectors"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " attributes of the exception object."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "",
                "type_": "ArpackNoConvergence"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Array of k eigenvalues."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "w",
                "type_": "array"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "An array representing the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "k",
                              "version": null
                            },
                            "value": "k"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " eigenvectors.  The column "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "v[:, i]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is the eigenvector corresponding to the eigenvalue "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "w[i]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "v",
                "type_": "array"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Find k eigenvalues and eigenvectors of the real symmetric square matrix or complex Hermitian matrix A."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.optimize._differentiable_functions.sps.linalg.eigsh"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            {
              "link": {
                "data": "from",
                "type": "str"
              },
              "type": "kn"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy",
                    "version": "1.8.0"
                  },
                  "value": "scipy"
                },
                "type": "Link"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.sparse",
                    "version": "1.8.0"
                  },
                  "value": "sparse"
                },
                "type": "Link"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.sparse.linalg",
                    "version": "1.8.0"
                  },
                  "value": "linalg"
                },
                "type": "Link"
              },
              "type": "nn"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "import",
                "type": "str"
              },
              "type": "kn"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.sparse.linalg._eigen.arpack.arpack.eigsh",
                    "version": "1.8.0"
                  },
                  "value": "eigsh"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "identity",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy",
                    "version": "*"
                  },
                  "value": "np"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "np",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.eye",
                    "version": "*"
                  },
                  "value": "eye"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "eye",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "13",
                "type": "str"
              },
              "type": "mi"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "eigenvalues",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "eigenvectors",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "scipy",
                    "path": "scipy.sparse.linalg._eigen.arpack.arpack.eigsh",
                    "version": "1.8.0"
                  },
                  "value": "eigsh"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "(",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "identity"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "identity",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ",",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": " ",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "k",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "=",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": "6",
                "type": "str"
              },
              "type": "mi"
            },
            {
              "link": {
                "data": ")",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": "\n",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "eigenvalues"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "eigenvalues",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "array([1., 1., 1., 1., 1., 1.])"
        },
        "type": "Code2"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "numpy",
                    "path": "numpy.ndarray",
                    "version": "*"
                  },
                  "value": "eigenvectors"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "eigenvectors",
                "type": "str"
              },
              "type": ""
            },
            {
              "link": {
                "data": ".",
                "type": "str"
              },
              "type": "o"
            },
            {
              "link": {
                "data": {
                  "exists": true,
                  "kind": "module",
                  "reference": {
                    "kind": "module",
                    "module": "builtins",
                    "path": "builtins.tuple",
                    "version": "*"
                  },
                  "value": "shape"
                },
                "type": "Link"
              },
              "type": ""
            },
            {
              "link": {
                "data": "shape",
                "type": "str"
              },
              "type": ""
            }
          ],
          "out": "(13, 6)"
        },
        "type": "Code2"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/sparse/linalg/_eigen/arpack/arpack.py",
  "item_line": 1350,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Raises",
    "See Also",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.tuple",
    "eigs",
    "numpy",
    "numpy.eye",
    "numpy.ndarray",
    "scipy",
    "scipy.sparse",
    "scipy.sparse.linalg",
    "scipy.sparse.linalg._eigen.arpack.arpack.eigsh",
    "svds"
  ],
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "eigenvalues and eigenvectors for a general (nonsymmetric) matrix A"
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "name": "eigs",
        "ref": "scipy.sparse.linalg._eigen.arpack.arpack.eigs"
      },
      "type": null
    },
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "singular value decomposition for a matrix A"
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "exists": true,
        "name": "svds",
        "ref": "scipy.sparse.linalg._eigen._svds.svds"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "eigsh(A, k=6, M=None, sigma=None, which='LM', v0=None, ncv=None, maxiter=None, tol=0, return_eigenvectors=True, Minv=None, OPinv=None, mode='normal')"
  }
}