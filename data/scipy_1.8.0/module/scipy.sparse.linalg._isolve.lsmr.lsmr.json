{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "lsmr solves the system of linear equations "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "Ax = b"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". If the system is inconsistent, it solves the least-squares problem "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "min ||b - Ax||_2"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "A"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a rectangular matrix of dimension m-by-n, where all cases are allowed: m = n, m > n, or m < n. "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "b"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is a vector of length m. The matrix A may be dense or sparse (usually sparse)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "inline": [
                  {
                    "data": {
                      "value": "0.11.0 "
                    },
                    "type": "Words"
                  }
                ],
                "inner": []
              }
            ],
            "kind": "versionadded",
            "title": "TODO"
          },
          "type": "Admonition"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Matrix A in the linear system. Alternatively, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "A"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " can be a linear operator which can produce "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "Ax"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "A^H x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " using, e.g., "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "scipy.sparse.linalg.LinearOperator"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "A",
            "type_": "{sparse matrix, ndarray, LinearOperator}"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Vector "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "b"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " in the linear system."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "b",
            "type_": "array_like, shape (m,)"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Damping factor for regularized least-squares. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.sparse.linalg._isolve.lsmr.lsmr",
                          "version": "1.8.0"
                        },
                        "value": "lsmr"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " solves the regularized least-squares problem::   "
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": "min ||(b) - (  A   )x||\n    ||(0)   (damp*I) ||_2"
                },
                "type": "BlockVerbatim"
              },
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "where damp is a scalar.  If damp is None or 0, the system is solved without regularization. Default is 0."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "damp",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Stopping tolerances. "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.sparse.linalg._isolve.lsmr.lsmr",
                          "version": "1.8.0"
                        },
                        "value": "lsmr"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " continues iterations until a certain backward error estimate is smaller than some quantity depending on atol and btol.  Let "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "r = b - Ax"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " be the residual vector for the current approximate solution "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "Ax = b"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " seems to be consistent, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.sparse.linalg._isolve.lsmr.lsmr",
                          "version": "1.8.0"
                        },
                        "value": "lsmr"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " terminates when "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "norm(r) <= atol * norm(A) * norm(x) + btol * norm(b)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Otherwise, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.sparse.linalg._isolve.lsmr.lsmr",
                          "version": "1.8.0"
                        },
                        "value": "lsmr"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " terminates when "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "norm(A^H r) <=\natol * norm(A) * norm(r)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ".  If both tolerances are 1.0e-6 (default), the final "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "norm(r)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " should be accurate to about 6 digits. (The final "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " will usually have fewer correct digits, depending on "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "cond(A)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and the size of LAMBDA.)  If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "atol",
                          "version": null
                        },
                        "value": "atol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "btol",
                          "version": null
                        },
                        "value": "btol"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is None, a default value of 1.0e-6 will be used. Ideally, they should be estimates of the relative error in the entries of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "A"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "b"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " respectively.  For example, if the entries of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "A"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " have 7 correct digits, set "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "atol = 1e-7"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". This prevents the algorithm from doing unnecessary work beyond the uncertainty of the input data."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "atol, btol",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.sparse.linalg._isolve.lsmr.lsmr",
                          "version": "1.8.0"
                        },
                        "value": "lsmr"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " terminates if an estimate of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "cond(A)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " exceeds "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "conlim",
                          "version": null
                        },
                        "value": "conlim"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ".  For compatible systems "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "Ax = b"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", conlim could be as large as 1.0e+12 (say).  For least-squares problems, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "conlim",
                          "version": null
                        },
                        "value": "conlim"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " should be less than 1.0e+8. If "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "conlim",
                          "version": null
                        },
                        "value": "conlim"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " is None, the default value is 1e+8.  Maximum precision can be obtained by setting "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "atol = btol = conlim = 0"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", but the number of iterations may then be excessive. Default is 1e8."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "conlim",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "exists": true,
                        "kind": "module",
                        "reference": {
                          "kind": "module",
                          "module": "scipy",
                          "path": "scipy.sparse.linalg._isolve.lsmr.lsmr",
                          "version": "1.8.0"
                        },
                        "value": "lsmr"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " terminates if the number of iterations reaches "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "maxiter",
                          "version": null
                        },
                        "value": "maxiter"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ".  The default is "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "maxiter = min(m, n)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ".  For ill-conditioned systems, a larger value of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "maxiter",
                          "version": null
                        },
                        "value": "maxiter"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " may be needed. Default is False."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "maxiter",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Print iterations logs if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "show=True"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ". Default is False."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "show",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Initial guess of "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "x"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": ", if None zeros are used. Default is None."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "children": [
                    {
                      "inline": [
                        {
                          "data": {
                            "value": "1.0.0 "
                          },
                          "type": "Words"
                        }
                      ],
                      "inner": []
                    }
                  ],
                  "kind": "versionadded",
                  "title": "TODO"
                },
                "type": "Admonition"
              }
            ],
            "param": "x0",
            "type_": "array_like, shape (n,), optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Least-square solution returned."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "x",
            "type_": "ndarray of float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "istop gives the reason for stopping::    "
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              },
              {
                "data": {
                  "value": "istop   = 0 means x=0 is a solution.  If x0 was given, then x=x0 is a\n            solution.\n        = 1 means x is an approximate solution to A@x = B,\n            according to atol and btol.\n        = 2 means x approximately solves the least-squares problem\n            according to atol.\n        = 3 means COND(A) seems to be greater than CONLIM.\n        = 4 is the same as 1 with atol = btol = eps (machine\n            precision)\n        = 5 is the same as 2 with atol = eps.\n        = 6 is the same as 3 with CONLIM = 1/eps.\n        = 7 means ITN reached maxiter before the other stopping\n            conditions were satisfied."
                },
                "type": "BlockVerbatim"
              }
            ],
            "param": "istop",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Number of iterations used."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "itn",
            "type_": "int"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": [
                          "norm(b-Ax)"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "normr",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": [
                          "norm(A^H (b - Ax))"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "normar",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": [
                          "norm(A)"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "norma",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Condition number of A."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "conda",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": [
                          "norm(x)"
                        ]
                      },
                      "type": "Verbatim"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "normx",
            "type_": "float"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Iterative solver for least-squares problems."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "scipy.signal._filter_design.optimize._lsq.dogbox.lsmr"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "sparse",
              "scipy.sparse",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "csc_matrix",
              "scipy.sparse._csc.csc_matrix",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "sparse",
              "scipy.sparse",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "linalg",
              "scipy.sparse.linalg",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lsmr",
              "scipy.sparse.linalg._isolve.lsmr.lsmr",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "A",
              "scipy.sparse._csc.csc_matrix",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "csc_matrix",
              "scipy.sparse._csc.csc_matrix",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1.",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1.",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "float",
              "builtins.float",
              "nb"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The first example has the trivial solution "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "[0, 0]"
              },
              "type": "Directive"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "b",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "0.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "float",
              "builtins.float",
              "nb"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "istop",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "itn",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "normr",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lsmr",
              "scipy.sparse.linalg._isolve.lsmr.lsmr",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "A",
              "scipy.sparse._csc.csc_matrix",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "istop",
              "builtins.int",
              ""
            ]
          ],
          "out": "0"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "x",
              "builtins.int",
              ""
            ]
          ],
          "out": "array([0., 0.])"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "The stopping code "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "istop=0"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " returned indicates that a vector of zeros was found as a solution. The returned solution "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "x",
                  "version": null
                },
                "value": "x"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " indeed contains "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "[0., 0.]"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ". The next example has a non-trivial solution:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "b",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1.",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "float",
              "builtins.float",
              "nb"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "istop",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "itn",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "normr",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lsmr",
              "scipy.sparse.linalg._isolve.lsmr.lsmr",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "A",
              "scipy.sparse._csc.csc_matrix",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "istop",
              "builtins.int",
              ""
            ]
          ],
          "out": "1"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "x",
              "builtins.int",
              ""
            ]
          ],
          "out": "array([ 1., -1.])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "itn",
              "builtins.int",
              ""
            ]
          ],
          "out": "1"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "normr",
              "builtins.float",
              ""
            ]
          ],
          "out": "4.440892098500627e-16"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "value": "As indicated by "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "istop=1"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ", "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "module",
                "reference": {
                  "kind": "module",
                  "module": "scipy",
                  "path": "scipy.sparse.linalg._isolve.lsmr.lsmr",
                  "version": "1.8.0"
                },
                "value": "lsmr"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " found a solution obeying the tolerance limits. The given solution "
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "[1., -1.]"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": " obviously solves the equation. The remaining return values include information about the number of iterations ("
              },
              "type": "Words"
            },
            {
              "data": {
                "domain": null,
                "role": null,
                "value": "itn=1"
              },
              "type": "Directive"
            },
            {
              "data": {
                "value": ") and the remaining difference of left and right side of the solved equation. The final example demonstrates the behavior in the case where there is no solution for the equation:"
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "b",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1.",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.01",
              "",
              "mf"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "1.",
              "",
              "mf"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "dtype",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "float",
              "builtins.float",
              "nb"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "x",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "istop",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "itn",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "normr",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "lsmr",
              "scipy.sparse.linalg._isolve.lsmr.lsmr",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "A",
              "scipy.sparse._csc.csc_matrix",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "b",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              ":",
              "",
              ""
            ],
            [
              "4",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "istop",
              "builtins.int",
              ""
            ]
          ],
          "out": "2"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "x",
              "builtins.int",
              ""
            ]
          ],
          "out": "array([ 1.00333333, -0.99666667])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "A",
              "scipy.sparse._csc.csc_matrix",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "dot",
              "scipy.sparse._base.spmatrix.dot",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "x",
              "builtins.int",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "-",
              "",
              "o"
            ],
            [
              "b",
              "numpy.ndarray",
              ""
            ]
          ],
          "out": "array([ 0.00333333, -0.00333333,  0.00333333])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "execed",
          "entries": [
            [
              "normr",
              "builtins.float",
              ""
            ]
          ],
          "out": "0.005773502691896255"
        },
        "type": "Code"
      },
      {
        "data": {
          "inline": [
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "istop",
                  "version": null
                },
                "value": "istop"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " indicates that the system is inconsistent and thus "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "x",
                  "version": null
                },
                "value": "x"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " is rather an approximate solution to the corresponding least-squares problem. "
              },
              "type": "Words"
            },
            {
              "data": {
                "exists": true,
                "kind": "local",
                "reference": {
                  "kind": "local",
                  "module": null,
                  "path": "normr",
                  "version": null
                },
                "value": "normr"
              },
              "type": "Link"
            },
            {
              "data": {
                "value": " contains the minimal distance that was found."
              },
              "type": "Words"
            }
          ],
          "inner": []
        },
        "type": "Paragraph"
      }
    ],
    "title": null
  },
  "item_file": "/scipy/sparse/linalg/_isolve/lsmr.py",
  "item_line": 29,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.float",
    "builtins.int",
    "numpy",
    "numpy.array",
    "numpy.ndarray",
    "scipy",
    "scipy.sparse",
    "scipy.sparse._base.spmatrix.dot",
    "scipy.sparse._csc.csc_matrix",
    "scipy.sparse.linalg",
    "scipy.sparse.linalg._isolve.lsmr.lsmr"
  ],
  "see_also": [],
  "signature": {
    "value": "lsmr(A, b, damp=0.0, atol=1e-06, btol=1e-06, conlim=100000000.0, maxiter=None, show=False, x0=None)"
  }
}