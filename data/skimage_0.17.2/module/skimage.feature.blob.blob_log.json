{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Blobs are found using the Laplacian of Gaussian (LoG) method . For each blob found, the method returns its coordinates and the standard deviation of the Gaussian kernel that detected the blob."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The radius of each blob is approximately "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\sqrt{2}\\sigma"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " for a 2-D image and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\sqrt{3}\\sigma"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " for a 3-D image."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Input grayscale image, blobs are assumed to be light on dark background (white on black)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "image",
            "type_": "2D or 3D ndarray"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "the minimum standard deviation for Gaussian kernel. Keep this low to detect smaller blobs. The standard deviations of the Gaussian filter are given for each axis as a sequence, or as a single number, in which case it is equal for all axes."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "min_sigma",
            "type_": "scalar or sequence of scalars, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The maximum standard deviation for Gaussian kernel. Keep this high to detect larger blobs. The standard deviations of the Gaussian filter are given for each axis as a sequence, or as a single number, in which case it is equal for all axes."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "max_sigma",
            "type_": "scalar or sequence of scalars, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The number of intermediate values of standard deviations to consider between "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "min_sigma",
                          "version": null
                        },
                        "value": "min_sigma"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "max_sigma",
                          "version": null
                        },
                        "value": "max_sigma"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "num_sigma",
            "type_": "int, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The absolute lower bound for scale space maxima. Local maxima smaller than thresh are ignored. Reduce this to detect blobs with less intensities."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "threshold",
            "type_": "float, optional."
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A value between 0 and 1. If the area of two blobs overlaps by a fraction greater than "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "threshold",
                          "version": null
                        },
                        "value": "threshold"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", the smaller blob is eliminated."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "overlap",
            "type_": "float, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If set intermediate values of standard deviations are interpolated using a logarithmic scale to the base "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "10"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ". If not, linear interpolation is used."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "log_scale",
            "type_": "bool, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "If tuple of ints, the length of the tuple must match the input array's dimensionality.  Each element of the tuple will exclude peaks from within "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "exclude_border",
                          "version": null
                        },
                        "value": "exclude_border"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "-pixels of the border of the image along that dimension. If nonzero int, "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "exclude_border",
                          "version": null
                        },
                        "value": "exclude_border"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " excludes peaks from within "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "exclude_border",
                          "version": null
                        },
                        "value": "exclude_border"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "-pixels of the border of the image. If zero or False, peaks are identified regardless of their distance from the border."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "exclude_border",
            "type_": "tuple of ints, int, or False, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "A 2d array with each row representing 2 coordinate values for a 2D image, and 3 coordinate values for a 3D image, plus the sigma(s) used. When a single sigma is passed, outputs are: "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(r, c, sigma)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(p, r, c, sigma)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " where "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(r, c)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "(p, r, c)"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " are coordinates of the blob and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "sigma"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " is the standard deviation of the Gaussian kernel which detected the blob. When an anisotropic gaussian is used (sigmas per dimension), the detected sigma is returned for each dimension."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "A",
            "type_": "(n, image.ndim + sigma) ndarray"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Finds blobs in the given grayscale image."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "skimage.feature.blob_log"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "skimage",
              "skimage",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "data",
              "skimage.data",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "feature",
              "skimage.feature",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "exposure",
              "skimage.exposure",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "img",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "data",
              "skimage.data",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "coins",
              "skimage.data.coins",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "img",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "exposure",
              "skimage.exposure",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "equalize_hist",
              "skimage.exposure.exposure.equalize_hist",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "img",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "  ",
              "",
              ""
            ],
            [
              "# improves detection",
              "",
              "c1"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "feature",
              "skimage.feature",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "blob_log",
              "skimage.feature.blob.blob_log",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "img",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "threshold",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              ".3",
              "",
              "mf"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([[124.        , 336.        ,  11.88888889],\n       [198.        , 155.        ,  11.88888889],\n       [194.        , 213.        ,  17.33333333],\n       [121.        , 272.        ,  17.33333333],\n       [263.        , 244.        ,  17.33333333],\n       [194.        , 276.        ,  17.33333333],\n       [266.        , 115.        ,  11.88888889],\n       [128.        , 154.        ,  11.88888889],\n       [260.        , 174.        ,  17.33333333],\n       [198.        , 103.        ,  11.88888889],\n       [126.        , 208.        ,  11.88888889],\n       [127.        , 102.        ,  11.88888889],\n       [263.        , 302.        ,  17.33333333],\n       [197.        ,  44.        ,  11.88888889],\n       [185.        , 344.        ,  17.33333333],\n       [126.        ,  46.        ,  11.88888889],\n       [113.        , 323.        ,   1.        ]])"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/skimage/feature/blob.py",
  "item_line": 376,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "References",
    "Examples",
    "Notes"
  ],
  "references": null,
  "refs": [
    "numpy.ndarray",
    "skimage",
    "skimage.data",
    "skimage.data.coins",
    "skimage.exposure",
    "skimage.exposure.exposure.equalize_hist",
    "skimage.feature",
    "skimage.feature.blob.blob_log"
  ],
  "see_also": [],
  "signature": {
    "value": "blob_log(image, min_sigma=1, max_sigma=50, num_sigma=10, threshold=0.2, overlap=0.5, log_scale=False, *, exclude_border=False)"
  }
}