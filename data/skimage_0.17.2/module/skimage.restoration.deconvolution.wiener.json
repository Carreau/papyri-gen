{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Return the deconvolution with a Wiener-Hunt approach (i.e. with Fourier diagonalisation)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This function applies the Wiener filter to a noisy and degraded image by an impulse response (or PSF). If the data model is"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "y = Hx + n "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "n"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " is noise, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "H"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " the PSF and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "x"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " the unknown original image, the Wiener filter is"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "value": "\\hat x = F^\\dagger ( |\\Lambda_H|^2 + \\lambda |\\Lambda_D|^2) \\Lambda_H^\\dagger F y "
          },
          "type": "BlockMath"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "where "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "F"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "F^\\dagger"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " are the Fourier and inverse Fourier transforms respectively, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\Lambda_H"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " the transfer function (or the Fourier transform of the PSF, see [Hunt] below) and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\Lambda_D"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " the filter to penalize the restored image frequencies (Laplacian by default, that is penalization of high frequency). The parameter "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "\\lambda"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": " tunes the balance between the data (that tends to increase high frequency, even those coming from noise), and the regularization."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "These methods are then specific to a prior model. Consequently, the application or the true image nature must corresponds to the prior model. By default, the prior model (Laplacian) introduce image smoothness or pixel correlation. It can also be interpreted as high-frequency penalization to compensate the instability of the solution with respect to the data (sometimes called noise amplification or \"explosive\" solution)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Finally, the use of Fourier space implies a circulant property of "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "H"
                  ]
                },
                "type": "Math"
              },
              {
                "data": {
                  "value": ", see [Hunt]."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Input degraded image"
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "image",
            "type_": "(M, N) ndarray"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "Point Spread Function. This is assumed to be the impulse response (input image space) if the data-type is real, or the transfer function (Fourier space) if the data-type is complex. There is no constraints on the shape of the impulse response. The transfer function must be of shape "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(M, N)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "is_real is True"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ", "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "(M, N // 2 + 1)"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": " otherwise (see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "domain": null,
                        "role": null,
                        "value": "np.fft.rfftn"
                      },
                      "type": "Directive"
                    },
                    {
                      "data": {
                        "value": ")."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "psf",
            "type_": "ndarray"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The regularisation parameter value that tunes the balance between the data adequacy that improve frequency restoration and the prior adequacy that reduce frequency restoration (to avoid noise artifacts)."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "balance",
            "type_": "float"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The regularisation operator. The Laplacian by default. It can be an impulse response or a transfer function, as for the psf. Shape constraint is the same as for the "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "psf",
                          "version": null
                        },
                        "value": "psf"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": " parameter."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "reg",
            "type_": "ndarray, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "True by default. Specify if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "psf"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "reg"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " are provided with hermitian hypothesis, that is only half of the frequency plane is provided (due to the redundancy of Fourier transform of real signal). It's apply only if "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "psf"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " and/or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "reg"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " are provided as transfer function.  For the hermitian property see "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "uft"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": " module or "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "value": [
                          "np.fft.rfftn"
                        ]
                      },
                      "type": "Verbatim"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "is_real",
            "type_": "boolean, optional"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "True by default. If True, pixel values of the result above 1 or under -1 are thresholded for skimage pipeline compatibility."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "clip",
            "type_": "boolean, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The deconvolved image."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "im_deconv",
            "type_": "(M, N) ndarray"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Wiener-Hunt deconvolution"
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "skimage.restoration.wiener"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "skimage",
              "skimage",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "color",
              "skimage.color",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "data",
              "skimage.data",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "restoration",
              "skimage.restoration",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "img",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "color",
              "skimage.color",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "rgb2gray",
              "skimage.color.colorconv.rgb2gray",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "data",
              "skimage.data",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "astronaut",
              "skimage.data.astronaut",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "scipy",
              "scipy",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "signal",
              "scipy.signal",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "convolve2d",
              "scipy.signal._signaltools.convolve2d",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "psf",
              "builtins.int",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "ones",
              "numpy.ones",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "/",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "25",
              "",
              "mi"
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "img",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "convolve2d",
              "scipy.signal._signaltools.convolve2d",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "img",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "psf",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              "same",
              null,
              "s1"
            ],
            [
              "'",
              "",
              "s1"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "img",
              "builtins.float",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "+",
              "",
              "o"
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "0.1",
              "",
              "mf"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "img",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "std",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "*",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "random",
              "numpy.random",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "standard_normal",
              "builtins.RandomState.standard_normal",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "img",
              null,
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "shape",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "deconvolved_img",
              null,
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "restoration",
              "skimage.restoration",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "wiener",
              "skimage.restoration.deconvolution.wiener",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "img",
              "builtins.float",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "psf",
              "builtins.int",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1100",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": ""
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/skimage/restoration/deconvolution.py",
  "item_line": 13,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "Notes",
    "References"
  ],
  "references": null,
  "refs": [
    "builtins.RandomState.standard_normal",
    "builtins.float",
    "builtins.int",
    "numpy",
    "numpy.ones",
    "numpy.random",
    "scipy",
    "scipy.signal",
    "scipy.signal._signaltools.convolve2d",
    "skimage",
    "skimage.color",
    "skimage.color.colorconv.rgb2gray",
    "skimage.data",
    "skimage.data.astronaut",
    "skimage.restoration",
    "skimage.restoration.deconvolution.wiener"
  ],
  "see_also": [],
  "signature": {
    "value": "wiener(image, psf, balance, reg=None, is_real=True, clip=True)"
  }
}