{
  "aliases": [
    "skimage.segmentation.chan_vese"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Active contour model by evolving a level set. Can be used to segment objects without clearly defined boundaries."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The Chan-Vese Algorithm is designed to segment objects without clearly defined boundaries. This algorithm is based on level sets that are evolved iteratively to minimize an energy, which is defined by weighted values corresponding to the sum of differences intensity from the average value outside the segmented region, the sum of differences from the average value inside the segmented region, and a term which is dependent on the length of the boundary of the segmented region."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This algorithm was first proposed by Tony Chan and Luminita Vese, in a publication entitled \"An Active Contour Model Without Edges\" ."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "This implementation of the algorithm is somewhat simplified in the sense that the area factor 'nu' described in the original paper is not implemented, and is only suitable for grayscale images."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Typical values for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "lambda1"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "domain": null,
                  "role": null,
                  "value": "lambda2"
                },
                "type": "Directive"
              },
              {
                "data": {
                  "value": " are 1. If the 'background' is very different from the segmented object in terms of distribution (for example, a uniform black image with figures of varying intensity), then these values should be different from each other."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Typical values for mu are between 0 and 1, though higher values can be used when dealing with shapes with very ill-defined contours."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "The 'energy' which this algorithm tries to minimize is defined as the sum of the differences from the average within the region squared and weighed by the 'lambda' factors to which is added the length of the contour multiplied by the 'mu' factor."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Supports 2D grayscale images only, and does not implement the area term described in the original article."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Grayscale image to be segmented."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "image",
                "type_": "(M, N) ndarray"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "'edge length' weight parameter. Higher "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "mu"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " values will produce a 'round' edge, while values closer to zero will detect smaller objects."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "mu",
                "type_": "float, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "'difference from average' weight parameter for the output region with value 'True'. If it is lower than "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "lambda2"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", this region will have a larger range of values than the other."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "lambda1",
                "type_": "float, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "'difference from average' weight parameter for the output region with value 'False'. If it is lower than "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "lambda1"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", this region will have a larger range of values than the other."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "lambda2",
                "type_": "float, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Level set variation tolerance between iterations. If the L2 norm difference between the level sets of successive iterations normalized by the area of the image is below this value, the algorithm will assume that the solution was reached."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "tol",
                "type_": "float, positive, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Maximum number of iterations allowed before the algorithm interrupts itself."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "max_iter",
                "type_": "uint, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A multiplication factor applied at calculations for each step, serves to accelerate the algorithm. While higher values may speed up the algorithm, they may also lead to convergence problems."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "dt",
                "type_": "float, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Defines the starting level set used by the algorithm. If a string is inputted, a level set that matches the image size will automatically be generated. Alternatively, it is possible to define a custom level set, which should be an array of float values, with the same shape as 'image'. Accepted string values are as follows."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "the starting level set is defined as     sin(x/5*pi)*sin(y/5*pi), where x and y are pixel     coordinates. This level set has fast convergence, but may     fail to detect implicit edges."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "data": {
                                  "value": "'checkerboard'"
                                },
                                "type": "Words"
                              }
                            ]
                          }
                        },
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "the starting level set is defined as the opposite     of the distance from the center of the image minus half of     the minimum value between image width and image height.     This is somewhat slower, but is more likely to properly     detect implicit edges."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "data": {
                                  "value": "'disk'"
                                },
                                "type": "Words"
                              }
                            ]
                          }
                        },
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "the starting level set is defined as the     opposite of the distance from the center of the image     minus a quarter of the minimum value between image width     and image height."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "data": {
                                  "value": "'small disk'"
                                },
                                "type": "Words"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "type": "DefList"
                  }
                ],
                "param": "init_level_set",
                "type_": "str or (M, N) ndarray, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If set to True, the return value will be a tuple containing the three return values (see below). If set to False which is the default value, only the 'segmentation' array will be returned."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "extended_output",
                "type_": "bool, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Segmentation produced by the algorithm."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "segmentation",
                "type_": "(M, N) ndarray, bool"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Final level set computed by the algorithm."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "phi",
                "type_": "(M, N) ndarray of floats"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Shows the evolution of the 'energy' for each step of the algorithm. This should allow to check whether the algorithm converged."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "energies",
                "type_": "list of floats"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Chan-Vese segmentation algorithm."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "title": null
  },
  "item_file": "/skimage/segmentation/_chan_vese.py",
  "item_line": 170,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "value": "chan_vese(image, mu=0.25, lambda1=1.0, lambda2=1.0, tol=0.001, max_iter=500, dt=0.5, init_level_set='checkerboard', extended_output=False)"
  }
}