{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "This function also returns the forward map (mapping the original labels to the reduced labels) and the inverse map (mapping the reduced labels back to the original ones)."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The label 0 is assumed to denote the background and is never remapped."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "The forward map can be extremely big for some inputs, since its length is given by the maximum of the label field. However, in most situations, "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "label_field.max()"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is much smaller than "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "label_field.size"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ", and in these cases the forward map is guaranteed to be smaller than either the input or output images."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "An array of labels, which must be non-negative integers."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "label_field",
            "type_": "numpy array of int, arbitrary shape"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The return labels will start at "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "offset",
                          "version": null
                        },
                        "value": "offset"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", which should be strictly positive."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "offset",
            "type_": "int, optional"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The input label field with labels mapped to {offset, ..., number_of_labels + offset - 1}. The data type will be the same as "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "label_field",
                          "version": null
                        },
                        "value": "label_field"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": ", except when offset + number_of_labels causes overflow of the current data type."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "relabeled",
            "type_": "numpy array of int, same shape as `label_field`"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The map from the original label space to the returned label space. Can be used to re-apply the same mapping. See examples for usage. The output data type will be the same as "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "relabeled",
                          "version": null
                        },
                        "value": "relabeled"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "forward_map",
            "type_": "ArrayMap"
          },
          "type": "Param"
        },
        {
          "data": {
            "desc": [
              {
                "data": {
                  "inline": [
                    {
                      "data": {
                        "value": "The map from the new label space to the original space. This can be used to reconstruct the original label field from the relabeled one. The output data type will be the same as "
                      },
                      "type": "Words"
                    },
                    {
                      "data": {
                        "exists": true,
                        "kind": "local",
                        "reference": {
                          "kind": "local",
                          "module": null,
                          "path": "label_field",
                          "version": null
                        },
                        "value": "label_field"
                      },
                      "type": "Link"
                    },
                    {
                      "data": {
                        "value": "."
                      },
                      "type": "Words"
                    }
                  ],
                  "inner": []
                },
                "type": "Paragraph"
              }
            ],
            "param": "inverse_map",
            "type_": "ArrayMap"
          },
          "type": "Param"
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "inline": [
              {
                "data": {
                  "value": "Relabel arbitrary labels to {"
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "offset",
                    "version": null
                  },
                  "value": "offset"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": ", ... "
                },
                "type": "Words"
              },
              {
                "data": {
                  "exists": true,
                  "kind": "local",
                  "reference": {
                    "kind": "local",
                    "module": null,
                    "path": "offset",
                    "version": null
                  },
                  "value": "offset"
                },
                "type": "Link"
              },
              {
                "data": {
                  "value": " + number_of_labels}."
                },
                "type": "Words"
              }
            ],
            "inner": []
          },
          "type": "Paragraph"
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "aliases": [
    "skimage.segmentation.relabel_sequential"
  ],
  "arbitrary": [],
  "example_section_data": {
    "children": [
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "from",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "skimage",
              "skimage",
              "nn"
            ],
            [
              ".",
              "",
              "nn"
            ],
            [
              "segmentation",
              "skimage.segmentation",
              "nn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "import",
              null,
              "kn"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "relabel_sequential",
              "skimage.segmentation._join.relabel_sequential",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "label_field",
              "numpy.ndarray",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "1",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "8",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "99",
              "",
              "mi"
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "42",
              "",
              "mi"
            ],
            [
              "]",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "relab",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "fw",
              "skimage.util._map_array.ArrayMap",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "inv",
              "skimage.util._map_array.ArrayMap",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "relabel_sequential",
              "skimage.segmentation._join.relabel_sequential",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "label_field",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "relab",
              null,
              ""
            ]
          ],
          "out": "array([1, 1, 2, 2, 3, 5, 4])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "print",
              "builtins.print",
              "nb"
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "fw",
              "skimage.util._map_array.ArrayMap",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "ArrayMap:\n  1 \u2192 1\n  5 \u2192 2\n  8 \u2192 3\n  42 \u2192 4\n  99 \u2192 5"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "fw",
              "skimage.util._map_array.ArrayMap",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([0, 1, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "np",
              "numpy",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "array",
              "numpy.array",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "inv",
              "skimage.util._map_array.ArrayMap",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "array([ 0,  1,  5,  8, 42, 99])"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "(",
              "",
              ""
            ],
            [
              "fw",
              "skimage.util._map_array.ArrayMap",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "label_field",
              "numpy.ndarray",
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "relab",
              null,
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "all",
              null,
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "True"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "(",
              "",
              ""
            ],
            [
              "inv",
              "skimage.util._map_array.ArrayMap",
              ""
            ],
            [
              "[",
              "",
              ""
            ],
            [
              "relab",
              null,
              ""
            ],
            [
              "]",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "==",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "label_field",
              "numpy.ndarray",
              ""
            ],
            [
              ")",
              "",
              ""
            ],
            [
              ".",
              "",
              "o"
            ],
            [
              "all",
              "numpy._ArrayOrScalarCommon.all",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              ")",
              "",
              ""
            ]
          ],
          "out": "True"
        },
        "type": "Code"
      },
      {
        "data": {
          "ce_status": "compiled",
          "entries": [
            [
              "relab",
              null,
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "fw",
              "skimage.util._map_array.ArrayMap",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "inv",
              "skimage.util._map_array.ArrayMap",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "relabel_sequential",
              "skimage.segmentation._join.relabel_sequential",
              ""
            ],
            [
              "(",
              "",
              ""
            ],
            [
              "label_field",
              "numpy.ndarray",
              ""
            ],
            [
              ",",
              "",
              ""
            ],
            [
              " ",
              "",
              ""
            ],
            [
              "offset",
              null,
              ""
            ],
            [
              "=",
              "",
              "o"
            ],
            [
              "5",
              "",
              "mi"
            ],
            [
              ")",
              "",
              ""
            ],
            [
              "\n",
              "",
              ""
            ],
            [
              "relab",
              null,
              ""
            ]
          ],
          "out": "array([5, 5, 6, 6, 7, 9, 8])"
        },
        "type": "Code"
      }
    ],
    "title": null
  },
  "item_file": "/skimage/segmentation/_join.py",
  "item_line": 47,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "Examples"
  ],
  "references": null,
  "refs": [
    "builtins.print",
    "numpy",
    "numpy._ArrayOrScalarCommon.all",
    "numpy.array",
    "numpy.ndarray",
    "skimage",
    "skimage.segmentation",
    "skimage.segmentation._join.relabel_sequential",
    "skimage.util._map_array.ArrayMap"
  ],
  "see_also": [],
  "signature": {
    "value": "relabel_sequential(label_field, offset=1)"
  }
}