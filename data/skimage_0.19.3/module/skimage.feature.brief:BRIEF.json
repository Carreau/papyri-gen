{
  "aliases": [
    "skimage.feature.BRIEF"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "2D ndarray of binary descriptors of size "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "descriptor_size",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "descriptor_size"
                    },
                    {
                      "type": "text",
                      "value": " for Q keypoints after filtering out border keypoints with value at an index "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(i, j)"
                    },
                    {
                      "type": "text",
                      "value": " either being "
                    },
                    {
                      "type": "inlineCode",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": " representing the outcome of the intensity comparison for i-th keypoint on j-th decision pixel-pair. It is "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Q == np.sum(mask)"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "descriptors",
              "type": "Param",
              "type_": "(Q, `descriptor_size`) array of dtype bool"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Mask indicating whether a keypoint has been filtered out ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": ") or is described in the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "descriptors",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "descriptors"
                    },
                    {
                      "type": "text",
                      "value": " array ("
                    },
                    {
                      "type": "inlineCode",
                      "value": "True"
                    },
                    {
                      "type": "text",
                      "value": ")."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mask",
              "type": "Param",
              "type_": "(N, ) array of dtype bool"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "BRIEF (Binary Robust Independent Elementary Features) is an efficient feature point descriptor. It is highly discriminative even when using relatively few bits and is computed using simple intensity difference tests."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For each keypoint, intensity comparisons are carried out for a specifically distributed number N of pixel-pairs resulting in a binary descriptor of length N. For binary descriptors the Hamming distance can be used for feature matching, which leads to lower computational cost in comparison to the L2 norm."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Size of BRIEF descriptor for each keypoint. Sizes 128, 256 and 512 recommended by the authors. Default is 256."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "descriptor_size",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Length of the two dimensional square patch sampling region around the keypoints. Default is 49."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "patch_size",
              "type": "Param",
              "type_": "int, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Probability distribution for sampling location of decision pixel-pairs around keypoints."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mode",
              "type": "Param",
              "type_": "{'normal', 'uniform'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sample_seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sample_seed"
                    },
                    {
                      "type": "text",
                      "value": " is None the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy",
                        "path": "numpy.random._generator:Generator",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.random.Generator"
                    },
                    {
                      "type": "text",
                      "value": " singleton is used. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sample_seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sample_seed"
                    },
                    {
                      "type": "text",
                      "value": " is an int, a new "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Generator"
                    },
                    {
                      "type": "text",
                      "value": " instance is used, seeded with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sample_seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sample_seed"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sample_seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sample_seed"
                    },
                    {
                      "type": "text",
                      "value": " is already a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Generator"
                    },
                    {
                      "type": "text",
                      "value": " instance then that instance is used."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Seed for the random sampling of the decision pixel-pairs. From a square window with length "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "patch_size",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "patch_size"
                    },
                    {
                      "type": "text",
                      "value": ", pixel pairs are sampled using the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "mode",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "mode"
                    },
                    {
                      "type": "text",
                      "value": " parameter to build the descriptors using intensity comparison. The value of "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "sample_seed",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "sample_seed"
                    },
                    {
                      "type": "text",
                      "value": " must be the same for the images to be matched while building the descriptors."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sample_seed",
              "type": "Param",
              "type_": "{None, int, `numpy.random.Generator`}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Standard deviation of the Gaussian low-pass filter applied to the image to alleviate noise sensitivity, which is strongly recommended to obtain discriminative and good descriptors."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sigma",
              "type": "Param",
              "type_": "float, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "BRIEF binary descriptor extractor."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from skimage.feature import (corner_harris, corner_peaks, BRIEF,\n                             match_descriptors)\nimport numpy as np\nsquare1 = np.zeros((8, 8), dtype=np.int32)\nsquare1[2:6, 2:6] = 1\nsquare1"
      },
      {
        "type": "code",
        "value": "square2 = np.zeros((9, 9), dtype=np.int32)\nsquare2[2:7, 2:7] = 1\nsquare2"
      },
      {
        "type": "code",
        "value": "keypoints1 = corner_peaks(corner_harris(square1), min_distance=1)\nkeypoints2 = corner_peaks(corner_harris(square2), min_distance=1)\nextractor = BRIEF(patch_size=5)\nextractor.extract(square1, keypoints1)\ndescriptors1 = extractor.descriptors\nextractor.extract(square2, keypoints2)\ndescriptors2 = extractor.descriptors\nmatches = match_descriptors(descriptors1, descriptors2)\nmatches"
      },
      {
        "type": "code",
        "value": "keypoints1[matches[:, 0]]"
      },
      {
        "type": "code",
        "value": "keypoints2[matches[:, 1]]"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/skimage/feature/brief.py",
  "item_line": 10,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Attributes",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": null
  },
  "type": "DocBlob"
}