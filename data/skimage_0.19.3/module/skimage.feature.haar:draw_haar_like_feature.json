{
  "aliases": [
    "skimage.feature.draw_haar_like_feature"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The region of an integral image for which the features need to be computed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "image",
              "type": "Param",
              "type_": "(M, N) ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Row-coordinate of top left corner of the detection window."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "r",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Column-coordinate of top left corner of the detection window."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "c",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Width of the detection window."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "width",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Height of the detection window."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "height",
              "type": "Param",
              "type_": "int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The array of coordinates to be extracted. This is useful when you want to recompute only a subset of features. In this case "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "skimage",
                        "path": "skimage.feature.haar:_validate_feature_type",
                        "type": "RefInfo",
                        "version": "0.19.3"
                      },
                      "type": "Link",
                      "value": "feature_type"
                    },
                    {
                      "type": "text",
                      "value": " needs to be an array containing the type of each feature, as returned by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "haar_like_feature_coord"
                    },
                    {
                      "type": "text",
                      "value": ". By default, all coordinates are computed."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "feature_coord",
              "type": "Param",
              "type_": "ndarray of list of tuples or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Floats specifying the color for the positive block. Corresponding values define (R, G, B) values. Default value is red (1, 0, 0)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "color_positive_block",
              "type": "Param",
              "type_": "tuple of 3 floats"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Floats specifying the color for the negative block Corresponding values define (R, G, B) values. Default value is blue (0, 1, 0)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "color_negative_block",
              "type": "Param",
              "type_": "tuple of 3 floats"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value in the range [0, 1] that specifies opacity of visualization. 1 - fully transparent, 0 - opaque."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "alpha",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The maximum number of features to be returned. By default, all features are returned."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "max_n_features",
              "type": "Param",
              "type_": "int, default=None"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "random_state",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "random_state"
                    },
                    {
                      "type": "text",
                      "value": " is None the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "numpy",
                        "path": "numpy.random._generator:Generator",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "numpy.random.Generator"
                    },
                    {
                      "type": "text",
                      "value": " singleton is used. If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "random_state",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "random_state"
                    },
                    {
                      "type": "text",
                      "value": " is an int, a new "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Generator"
                    },
                    {
                      "type": "text",
                      "value": " instance is used, seeded with "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "random_state",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "random_state"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "random_state",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "random_state"
                    },
                    {
                      "type": "text",
                      "value": " is already a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "Generator"
                    },
                    {
                      "type": "text",
                      "value": " instance then that instance is used."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The random state is used when generating a set of features smaller than the total number of available features."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "random_state",
              "type": "Param",
              "type_": "{None, int, `numpy.random.Generator`}, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "An image in which the different features will be added."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "features",
              "type": "Param",
              "type_": "(M, N), ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Visualization of Haar-like features."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom skimage.feature import haar_like_feature_coord\nfrom skimage.feature import draw_haar_like_feature\nfeature_coord, _ = haar_like_feature_coord(2, 2, 'type-4')\nimage = draw_haar_like_feature(np.zeros((2, 2)),\n                               0, 0, 2, 2,\n                               feature_coord,\n                               max_n_features=1)\nimage"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/skimage/feature/haar.py",
  "item_line": 221,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(image, r, c, width, height, feature_coord, color_positive_block=(1.0, 0.0, 0.0), color_negative_block=(0.0, 1.0, 0.0), alpha=0.5, max_n_features=None, random_state=None)"
  },
  "type": "DocBlob"
}