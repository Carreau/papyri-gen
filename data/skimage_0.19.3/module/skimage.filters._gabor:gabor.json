{
  "aliases": [
    "skimage.filters.gabor"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The real and imaginary parts of the Gabor filter kernel are applied to the image and the response is returned as a pair of arrays."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Gabor filter is a linear filter with a Gaussian kernel which is modulated by a sinusoidal plane wave. Frequency and orientation representations of the Gabor filter are similar to those of the human visual system. Gabor filter banks are commonly used in computer vision and image processing. They are especially suitable for edge detection and texture classification."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Input image."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "image",
              "type": "Param",
              "type_": "2-D array"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Spatial frequency of the harmonic function. Specified in pixels."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "frequency",
              "type": "Param",
              "type_": "float"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Orientation in radians. If 0, the harmonic is in the x-direction."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "theta",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The bandwidth captured by the filter. For fixed bandwidth, "
                    },
                    {
                      "type": "inlineCode",
                      "value": "sigma_x"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "sigma_y"
                    },
                    {
                      "type": "text",
                      "value": " will decrease with increasing frequency. This value is ignored if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "sigma_x"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "sigma_y"
                    },
                    {
                      "type": "text",
                      "value": " are set by the user."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "bandwidth",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Standard deviation in x- and y-directions. These directions apply to the kernel "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "before"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " rotation. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "theta = pi/2"
                    },
                    {
                      "type": "text",
                      "value": ", then the kernel is rotated 90 degrees so that "
                    },
                    {
                      "type": "inlineCode",
                      "value": "sigma_x"
                    },
                    {
                      "type": "text",
                      "value": " controls the "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "vertical"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " direction."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sigma_x, sigma_y",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The linear size of the kernel is n_stds (3 by default) standard deviations."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "n_stds",
              "type": "Param",
              "type_": "scalar, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Phase offset of harmonic function in radians."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "offset",
              "type": "Param",
              "type_": "float, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Mode used to convolve image with a kernel, passed to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "ndi.convolve"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mode",
              "type": "Param",
              "type_": "{'constant', 'nearest', 'reflect', 'mirror', 'wrap'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Value to fill past edges of input if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "mode"
                    },
                    {
                      "type": "text",
                      "value": " of convolution is 'constant'. The parameter is passed to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "ndi.convolve"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "cval",
              "type": "Param",
              "type_": "scalar, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Filtered images using the real and imaginary parts of the Gabor filter kernel. Images are of the same dimensions as the input one."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "real, imag",
              "type": "Param",
              "type_": "arrays"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Return real and imaginary responses to Gabor filter."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "from skimage.filters import gabor\nfrom skimage import data, io\nfrom matplotlib import pyplot as plt  # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "image = data.coins()\n# detecting edges in a coin image\nfilt_real, filt_imag = gabor(image, frequency=0.6)\nplt.figure()            # doctest: +SKIP\nio.imshow(filt_real)    # doctest: +SKIP\nio.show()               # doctest: +SKIP"
      },
      {
        "type": "code",
        "value": "# less sensitivity to finer details with the lower frequency kernel\nfilt_real, filt_imag = gabor(image, frequency=0.1)\nplt.figure()            # doctest: +SKIP\nio.imshow(filt_real)    # doctest: +SKIP\nio.show()               # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/skimage/filters/_gabor.py",
  "item_line": 112,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(image, frequency, theta=0, bandwidth=1, sigma_x=None, sigma_y=None, n_stds=3, offset=0, mode='reflect', cval=0)"
  },
  "type": "DocBlob"
}