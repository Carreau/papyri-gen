{
  "aliases": [
    "skimage.graph.MCP"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Equivalent to the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "offsets",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "offsets"
                    },
                    {
                      "type": "text",
                      "value": " provided to the constructor, or if none were so provided, the offsets created for the requested n-d neighborhood. These are useful for interpreting the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "api",
                        "module": "traceback",
                        "path": "traceback",
                        "type": "RefInfo",
                        "version": "*"
                      },
                      "type": "Link",
                      "value": "traceback"
                    },
                    {
                      "type": "text",
                      "value": " array returned by the find_costs() method."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "offsets",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Given an n-d costs array, this class can be used to find the minimum-cost path through that array from any set of points to any other set of points. Basic usage is to initialize the class and call find_costs() with a one or more starting indices (and an optional list of end indices). After that, call traceback() one or more times to find the path from any given end-position to the closest starting index. New paths through the same costs array can be found by calling find_costs() repeatedly."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The cost of a path is calculated simply as the sum of the values of the "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "costs",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "costs"
            },
            {
              "type": "text",
              "value": " array at each point on the path. The class MCP_Geometric, on the other hand, accounts for the fact that diagonal vs. axial moves are of different lengths, and weights the path cost accordingly."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Array elements with infinite or negative costs will simply be ignored, as will paths whose cumulative cost overflows to infinite."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "costs",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A list of offset tuples: each offset specifies a valid move from a given n-d position. If not provided, offsets corresponding to a singly- or fully-connected n-d neighborhood will be constructed with make_offsets(), using the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "fully_connected",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "fully_connected"
                    },
                    {
                      "type": "text",
                      "value": " parameter value."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "offsets",
              "type": "Param",
              "type_": "iterable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If no "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "offsets",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "offsets"
                    },
                    {
                      "type": "text",
                      "value": " are provided, this determines the connectivity of the generated neighborhood. If true, the path may go along diagonals between elements of the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "costs",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "costs"
                    },
                    {
                      "type": "text",
                      "value": " array; otherwise only axial moves are permitted."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fully_connected",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "For each dimension, specifies the distance between two cells/voxels. If not given or None, the distance is assumed unit."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "sampling",
              "type": "Param",
              "type_": "tuple, optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "A class for finding the minimum cost path through a given n-d costs array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/skimage/graph/_mcp.cpython-39-darwin.so",
  "item_line": null,
  "item_type": "<class 'type'>",
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Attributes"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "MCP(costs, offsets=None, fully_connected=True, sampling=None)"
  },
  "type": "DocBlob"
}