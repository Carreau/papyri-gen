{
  "aliases": [
    "skimage.util.view_as_windows"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Windows are overlapping views of the input array, with adjacent windows shifted by a single row or column (or an index of a higher dimension)."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "One should be very careful with rolling views when it comes to memory usage.  Indeed, although a 'view' has the same memory footprint as its base array, the actual array that emerges when this 'view' is used in a computation is generally a (much) larger array than the original, especially for 2-dimensional arrays and above."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "For example, let us consider a 3 dimensional array of size (100, 100, 100) of "
            },
            {
              "type": "inlineCode",
              "value": "float64"
            },
            {
              "type": "text",
              "value": ". This array takes about 8*100**3 Bytes for storage which is just 8 MB. If one decides to build a rolling view on this array with a window of (3, 3, 3) the hypothetical size of the rolling view (if one was to reshape the view for example) would be 8*(100-3+1)**3*3**3 which is about 203 MB! The scaling becomes even worse as the dimension of the input array becomes larger."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "N-d input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arr_in",
              "type": "Param",
              "type_": "ndarray"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Defines the shape of the elementary n-dimensional orthotope (better know as hyperrectangle ) of the rolling window view. If an integer is given, the shape will be a hypercube of sidelength given by its value."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "window_shape",
              "type": "Param",
              "type_": "integer or tuple of length arr_in.ndim"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Indicates step size at which extraction shall be performed. If integer is given, then the step is uniform in all dimensions."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "step",
              "type": "Param",
              "type_": "integer or tuple of length arr_in.ndim"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "(rolling) window view of the input array."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "arr_out",
              "type": "Param",
              "type_": "ndarray"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Rolling window view of the input n-dimensional array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "import numpy as np\nfrom skimage.util.shape import view_as_windows\nA = np.arange(4*4).reshape(4,4)\nA"
      },
      {
        "type": "code",
        "value": "window_shape = (2, 2)\nB = view_as_windows(A, window_shape)\nB[0, 0]"
      },
      {
        "type": "code",
        "value": "B[0, 1]"
      },
      {
        "type": "code",
        "value": "A = np.arange(10)\nA"
      },
      {
        "type": "code",
        "value": "window_shape = (3,)\nB = view_as_windows(A, window_shape)\nB.shape"
      },
      {
        "type": "code",
        "value": "B"
      },
      {
        "type": "code",
        "value": "A = np.arange(5*4).reshape(5, 4)\nA"
      },
      {
        "type": "code",
        "value": "window_shape = (4, 3)\nB = view_as_windows(A, window_shape)\nB.shape"
      },
      {
        "type": "code",
        "value": "B  # doctest: +NORMALIZE_WHITESPACE"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/skimage/util/shape.py",
  "item_line": 97,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "References",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(arr_in, window_shape, step=1)"
  },
  "type": "DocBlob"
}