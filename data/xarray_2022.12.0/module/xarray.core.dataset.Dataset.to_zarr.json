{
  "aliases": [
    "xarray.Dataset.to_zarr"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Zarr chunks are determined in the following way:"
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        },
        {
          "data": {
            "children": [
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "From the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "chunks"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " attribute in each variable's "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "encoding"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "   (can be set via "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "module",
                            "reference": {
                              "kind": "module",
                              "module": "xarray",
                              "path": "xarray.core.dataset.Dataset.chunk",
                              "version": "2022.12.0"
                            },
                            "value": "Dataset.chunk"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": ")."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If the variable is a Dask array, from the dask chunks"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If neither Dask chunks nor encoding chunks are present, chunks will   be determined automatically by Zarr"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              },
              {
                "children": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If both Dask chunks and encoding chunks are present, encoding chunks   will be used, provided that there is a many-to-one relationship between   encoding chunks and dask chunks (i.e. Dask chunks are bigger than and   evenly divide encoding chunks); otherwise raise a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "ValueError"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ".   This restriction ensures that no synchronization / locks are required   when writing. To disable this restriction, use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "safe_chunks=False"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ]
              }
            ]
          },
          "type": "BulletList"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If chunks are found in the encoding argument or attribute     corresponding to any DataArray, those chunks are used.     If a DataArray is a dask array, it is written with those chunks.     If not other chunks are found, Zarr uses its own heuristics to     choose automatic chunk sizes."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "Zarr chunking behavior:"
                      },
                      "type": "Words"
                    }
                  ]
                }
              },
              {
                "dd": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The encoding attribute (if exists) of the DataArray(s) will be     used. Override any existing encodings by providing the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "encoding"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " kwarg."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "dt": {
                  "children": [
                    {
                      "data": {
                        "value": "encoding:"
                      },
                      "type": "Words"
                    }
                  ]
                }
              }
            ]
          },
          "type": "DefList"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Store or path to directory in local or remote file system."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "store",
                "type_": "MutableMapping, str or path-like, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Store or path to directory in local or remote file system only for Zarr array chunks. Requires zarr-python v2.4.0 or later."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "chunk_store",
                "type_": "MutableMapping, str or path-like, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Persistence mode: \"w\" means create (overwrite if exists); \"w-\" means create (fail if exists); \"a\" means override existing variables (create if does not exist); \"r+\" means modify existing array "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": {
                              "value": "values"
                            }
                          },
                          "type": "Emph"
                        },
                        {
                          "data": {
                            "value": " only (raise an error if any metadata or shapes would change). The default mode is \"a\" if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "append_dim"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is set. Otherwise, it is \"r+\" if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "region"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is set and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "w-"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " otherwise."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "mode",
                "type_": "{\"w\", \"w-\", \"a\", \"r+\", None}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Zarr array synchronizer."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "synchronizer",
                "type_": "object, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Group path. (a.k.a. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "path"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " in zarr terminology.)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "group",
                "type_": "str, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Nested dictionary with variable names as keys and dictionaries of variable specific encodings as values, e.g., "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "{\"my_variable\": {\"dtype\": \"int16\", \"scale_factor\": 0.1,}, ...}"
                            ]
                          },
                          "type": "Verbatim"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "encoding",
                "type_": "dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True write array data immediately, otherwise return a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dask.delayed.Delayed"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " object that can be computed to write array data later. Metadata is always updated eagerly."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "compute",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, apply zarr's "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "consolidate_metadata"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " function to the store after writing metadata and read existing stores with consolidated metadata; if False, do not. The default ("
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "consolidated=None"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ") means write consolidated metadata and attempt to read consolidated metadata for existing stores (falling back to non-consolidated)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "When the experimental "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "zarr_version=3"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "consolidated"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " must be either be "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "None"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "False"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "consolidated",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If set, the dimension along which the data will be appended. All other dimensions on overridden variables must remain the same size."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "append_dim",
                "type_": "hashable, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Optional mapping from dimension names to integer slices along dataset dimensions to indicate the region of existing zarr array(s) in which to write this dataset's data. For example, "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "{'x': slice(0, 1000), 'y': slice(10000, 11000)}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " would indicate that values should be written to the region "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "0:1000"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " along "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "x"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "10000:11000"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " along "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "y"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Two restrictions apply to the use of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "region"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ":"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "If "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "region"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " is set, _all_ variables in a dataset must have at   least one dimension in common with the region. Other variables   should be written in a separate call to "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "to_zarr()"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": "."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "Dimensions cannot be included in both "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "region"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " and   "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "append_dim"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " at the same time. To create empty arrays to fill   in with "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "region"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ", use a separate call to "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "to_zarr()"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " with   "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "compute=False"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ". See \"Appending to existing Zarr stores\" in   the reference documentation for full details."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ],
                "param": "region",
                "type_": "dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, only allow writes to when there is a many-to-one relationship between Zarr chunks (specified in encoding) and Dask chunks. Set False to override this restriction; however, data may become corrupted if Zarr arrays are written in parallel. This option may be useful in combination with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "compute=False"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " to initialize a Zarr from an existing Dataset with arbitrary chunk structure."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "safe_chunks",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Any additional parameters for the storage backend (ignored for local paths)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "storage_options",
                "type_": "dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The desired zarr spec version to target (currently 2 or 3). The default of None will attempt to determine the zarr version from "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "store"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " when possible, otherwise defaulting to 2."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "zarr_version",
                "type_": "int or None, optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [],
                "param": "",
                "type_": "* ``dask.delayed.Delayed`` if compute is False"
              },
              {
                "desc": [],
                "param": "",
                "type_": "* ZarrStore otherwise"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Write dataset contents to a zarr group."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/xarray/core/dataset.py",
  "item_line": 1958,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "References",
    "Notes",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [
        {
          "children": [
            {
              "data": {
                "value": "The I/O user guide, with more details and examples."
              },
              "type": "Words"
            }
          ]
        }
      ],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "io.zarr",
          "version": "current-version"
        },
        "value": "io.zarr"
      },
      "type": "ref"
    }
  ],
  "signature": {
    "value": "to_zarr(self, store: 'MutableMapping | str | PathLike[str] | None' = None, chunk_store: 'MutableMapping | str | PathLike | None' = None, mode: \"Literal['w', 'w-', 'a', 'r+', None]\" = None, synchronizer=None, group: 'str | None' = None, encoding: 'Mapping | None' = None, compute: 'bool' = True, consolidated: 'bool | None' = None, append_dim: 'Hashable | None' = None, region: 'Mapping[str, slice] | None' = None, safe_chunks: 'bool' = True, storage_options: 'dict[str, str] | None' = None, zarr_version: 'int | None' = None) -> 'ZarrStore | Delayed'"
  }
}