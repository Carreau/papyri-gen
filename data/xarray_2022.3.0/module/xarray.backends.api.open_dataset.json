{
  "aliases": [
    "xarray.open_dataset"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "open_dataset"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " opens the file with read-only access. When you modify values of a Dataset, even one linked to files on disk, only the in-memory copy you are manipulating in xarray is modified: the original file on disk is never touched."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Strings and Path objects are interpreted as a path to a netCDF file or an OpenDAP URL and opened with python-netCDF4, unless the filename ends with .gz, in which case the file is gunzipped and opened with scipy.io.netcdf (only netCDF3 supported). Byte-strings or file-like objects are opened by scipy.io.netcdf (netCDF3) or h5py (netCDF4/HDF)."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "filename_or_obj",
                "type_": "str, Path, file-like or DataStore"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Engine to use when reading files. If not provided, the default engine is chosen based on available dependencies, with a preference for \"netcdf4\". A custom backend class (a subclass of "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "BackendEntrypoint"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ") can also be used."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "engine",
                "type_": "{\"netcdf4\", \"scipy\", \"pydap\", \"h5netcdf\", \"pynio\", \"cfgrib\",         \"pseudonetcdf\", \"zarr\"} or subclass of xarray.backends.BackendEntrypoint, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If chunks is provided, it is used to load the new dataset into dask arrays. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "chunks=-1"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " loads the dataset with dask using a single chunk for all arrays. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "chunks={}"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " loads the dataset with dask using engine preferred chunks if exposed by the backend, otherwise with a single chunk for all arrays. "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "chunks='auto'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " will use dask "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "auto"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " chunking taking into account the engine preferred chunks. See dask chunking for more details."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "chunks",
                "type_": "int or dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, cache data loaded from the underlying datastore in memory as NumPy arrays when accessed to avoid reading from the underlying data- store multiple times. Defaults to True unless you specify the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "anchor": null,
                            "exists": true,
                            "kind": "local",
                            "reference": {
                              "kind": "local",
                              "module": null,
                              "path": "chunks",
                              "version": null
                            },
                            "value": "chunks"
                          },
                          "type": "Link"
                        },
                        {
                          "data": {
                            "value": " argument to use dask, in which case it defaults to False. Does not change the behavior of coordinates corresponding to dimensions, which always load their data from disk into a "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "pandas.Index"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "cache",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Whether to decode these variables, assuming they were saved according to CF conventions."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "decode_cf",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, replace array values equal to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "_FillValue"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " with NA and scale values according to the formula "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "original_values * scale_factor +\nadd_offset"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", where "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "_FillValue"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": ", "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "scale_factor"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " and "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "add_offset"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " are taken from variable attributes (if they exist).  If the "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "_FillValue"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "missing_value"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": " attribute contains multiple values a warning will be issued and all array values matching one of the multiple values will be replaced by NA. mask_and_scale defaults to True except for the pseudonetcdf backend. This keyword may not be supported by all the backends."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "mask_and_scale",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, decode times encoded in the standard NetCDF datetime format into datetime objects. Otherwise, leave them encoded as numbers. This keyword may not be supported by all the backends."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "decode_times",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, decode variables and coordinates with time units in {\"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\", \"microseconds\"} into timedelta objects. If False, leave them encoded as numbers. If None (default), assume the same value of decode_time. This keyword may not be supported by all the backends."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "decode_timedelta",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Only relevant if encoded dates come from a standard calendar (e.g. \"gregorian\", \"proleptic_gregorian\", \"standard\", or not specified).  If None (default), attempt to decode times to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.datetime64[ns]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " objects; if this is not possible, decode times to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "cftime.datetime"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " objects. If True, always decode times to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "cftime.datetime"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " objects, regardless of whether or not they can be represented using "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.datetime64[ns]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " objects.  If False, always decode times to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "np.datetime64[ns]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " objects; if this is not possible raise an error. This keyword may not be supported by all the backends."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "use_cftime: bool, optional",
                "type_": ""
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, concatenate along the last dimension of character arrays to form string arrays. Dimensions will only be concatenated over (and removed) if they have no corresponding variable and if they are only used as the last dimension of character arrays. This keyword may not be supported by all the backends."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "concat_characters",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Controls which variables are set as coordinate variables:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "\"coordinates\" or True: Set variables referred to in the   "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "'coordinates'"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " attribute of the datasets or individual variables   as coordinate variables."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "\"all\": Set variables referred to in  "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "'grid_mapping'"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": ", "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "value": [
                                        "'bounds'"
                                      ]
                                    },
                                    "type": "Verbatim"
                                  },
                                  {
                                    "data": {
                                      "value": " and   other attributes as coordinate variables."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ],
                "param": "decode_coords",
                "type_": "bool or {\"coordinates\", \"all\"}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "A variable or list of variables to exclude from being parsed from the dataset. This may be useful to drop variables with problems or inconsistent values."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "drop_variables: str or iterable, optional",
                "type_": ""
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Additional keyword arguments passed on to the engine open function, equivalent to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "domain": null,
                            "role": null,
                            "value": "**kwargs"
                          },
                          "type": "Directive"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "backend_kwargs: dict",
                "type_": ""
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Additional keyword arguments passed on to the engine open function. For example:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "'group': path to the netCDF4 group in the given file to open given as   a str,supported by \"netcdf4\", \"h5netcdf\", \"zarr\"."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "'lock': resource lock to use when reading data from disk. Only   relevant when using dask or another form of parallelism. By default,   appropriate locks are chosen to safely read and write files with the   currently active dask scheduler. Supported by \"netcdf4\", \"h5netcdf\",   \"scipy\", \"pynio\", \"pseudonetcdf\", \"cfgrib\"."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "See engine open function for kwargs accepted by each specific engine."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "**kwargs: dict",
                "type_": ""
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "The newly created dataset."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "dataset",
                "type_": "Dataset"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Open and decode a dataset from a file or file-like object."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/xarray/backends/api.py",
  "item_line": 335,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "xarray",
          "path": "xarray.backends.api.open_mfdataset",
          "version": "2022.3.0"
        },
        "value": "open_mfdataset"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "open_dataset(filename_or_obj, *args, engine=None, chunks=None, cache=None, decode_cf=None, mask_and_scale=None, decode_times=None, decode_timedelta=None, use_cftime=None, concat_characters=None, decode_coords=None, drop_variables=None, backend_kwargs=None, **kwargs)"
  }
}