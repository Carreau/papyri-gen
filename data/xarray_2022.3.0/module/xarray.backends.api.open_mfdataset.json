{
  "aliases": [
    "xarray.open_mfdataset"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "If combine='by_coords' then the function "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "combine_by_coords"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is used to combine the datasets into one before returning the result, and if combine='nested' then "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "combine_nested"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " is used. The filepaths must be structured according to which combining function is used, the details of which are given in the documentation for "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "combine_by_coords"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " and "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "combine_nested"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": ". By default "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "combine='by_coords'"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " will be used. Requires dask to be installed. See documentation for details on dask . Global attributes from the "
                },
                "type": "Words"
              },
              {
                "data": {
                  "value": [
                    "attrs_file"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " are used for the combined dataset."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Notes": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": [
                    "open_mfdataset"
                  ]
                },
                "type": "Verbatim"
              },
              {
                "data": {
                  "value": " opens files with read-only access. When you modify values of a Dataset, even one linked to files on disk, only the in-memory copy you are manipulating in xarray is modified: the original file on disk is never touched."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Either a string glob in the form "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "\"path/to/my/files/*.nc\""
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or an explicit list of files to open. Paths can be given as strings or as pathlib Paths. If concatenation along more than one dimension is desired, then "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "paths"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " must be a nested list-of-lists (see "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "combine_nested"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " for details). (A string glob will be expanded to a 1-dimensional list.)"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "paths",
                "type_": "str or sequence"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Dictionary with keys given by dimension names and values given by chunk sizes. In general, these should divide the dimensions of each dataset. If int, chunk each dimension by "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "chunks"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". By default, chunks will be chosen to load entire input files into memory at once. This has a major impact on performance: please see the full documentation for more details ."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "chunks",
                "type_": "int or dict, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Dimensions to concatenate files along.  You only need to provide this argument if "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "combine='nested'"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ", and if any of the dimensions along which you want to concatenate is not a dimension in the original datasets, e.g., if you want to stack a collection of 2D arrays along a third dimension. Set "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "concat_dim=[..., None, ...]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " explicitly to disable concatenation along a particular dimension. Default is None, which for a 1D list of filepaths is equivalent to opening the files separately and then merging them with "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xarray.merge"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "concat_dim",
                "type_": "str, or list of str, DataArray, Index or None, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Whether "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xarray.combine_by_coords"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " or "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xarray.combine_nested"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": " is used to combine all the data. Default is to use "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xarray.combine_by_coords"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "combine",
                "type_": "{\"by_coords\", \"nested\"}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "String indicating how to compare variables of the same name for potential conflicts when merging:"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "children": [
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "\"broadcast_equals\": all values must be equal when variables are    broadcast against each other to ensure common dimensions."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              },
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "\"equals\": all values and dimensions must be the same."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              },
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "\"identical\": all values, dimensions and attributes must be the    same."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              },
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "\"no_conflicts\": only values which are not null in both datasets    must be equal. The returned dataset then contains the combination    of all non-null values."
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              },
                              {
                                "children": [
                                  {
                                    "data": {
                                      "children": [
                                        {
                                          "data": {
                                            "value": "\"override\": skip comparing and pick variable from first dataset"
                                          },
                                          "type": "Words"
                                        }
                                      ]
                                    },
                                    "type": "Paragraph"
                                  }
                                ]
                              }
                            ]
                          },
                          "type": "BulletList"
                        }
                      ]
                    },
                    "type": "BlockQuote"
                  }
                ],
                "param": "compat",
                "type_": "{\"identical\", \"equals\", \"broadcast_equals\",               \"no_conflicts\", \"override\"}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If provided, call this function on each dataset prior to concatenation. You can find the file-name from which each dataset was loaded in "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "ds.encoding[\"source\"]"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "preprocess",
                "type_": "callable, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Engine to use when reading files. If not provided, the default engine is chosen based on available dependencies, with a preference for \"netcdf4\"."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "engine",
                "type_": "{\"netcdf4\", \"scipy\", \"pydap\", \"h5netcdf\", \"pynio\", \"cfgrib\", \"zarr\"},         optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "children": [
                                      {
                                        "data": {
                                          "children": [
                                            {
                                              "data": {
                                                "value": "\"minimal\": Only data variables in which the dimension already     appears are included."
                                              },
                                              "type": "Words"
                                            }
                                          ]
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  },
                                  {
                                    "children": [
                                      {
                                        "data": {
                                          "children": [
                                            {
                                              "data": {
                                                "value": "\"different\": Data variables which are not equal (ignoring     attributes) across all datasets are also concatenated (as well as     all for which dimension already appears). Beware: this option may     load the data payload of data variables into memory if they are not     already loaded."
                                              },
                                              "type": "Words"
                                            }
                                          ]
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  },
                                  {
                                    "children": [
                                      {
                                        "data": {
                                          "children": [
                                            {
                                              "data": {
                                                "value": "\"all\": All data variables will be concatenated."
                                              },
                                              "type": "Words"
                                            }
                                          ]
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  },
                                  {
                                    "children": [
                                      {
                                        "data": {
                                          "children": [
                                            {
                                              "data": {
                                                "value": "list of str: The listed data variables will be concatenated, in     addition to the \"minimal\" data variables."
                                              },
                                              "type": "Words"
                                            }
                                          ]
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "type": "BulletList"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "data": {
                                  "value": "These data variables will be concatenated together:"
                                },
                                "type": "Words"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "type": "DefList"
                  }
                ],
                "param": "data_vars",
                "type_": "{\"minimal\", \"different\", \"all\"} or list of str, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "dd": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "children": [
                                      {
                                        "data": {
                                          "children": [
                                            {
                                              "data": {
                                                "value": "\"minimal\": Only coordinates in which the dimension already appears    are included."
                                              },
                                              "type": "Words"
                                            }
                                          ]
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  },
                                  {
                                    "children": [
                                      {
                                        "data": {
                                          "children": [
                                            {
                                              "data": {
                                                "value": "\"different\": Coordinates which are not equal (ignoring attributes)    across all datasets are also concatenated (as well as all for which    dimension already appears). Beware: this option may load the data    payload of coordinate variables into memory if they are not already    loaded."
                                              },
                                              "type": "Words"
                                            }
                                          ]
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  },
                                  {
                                    "children": [
                                      {
                                        "data": {
                                          "children": [
                                            {
                                              "data": {
                                                "value": "\"all\": All coordinate variables will be concatenated, except    those corresponding to other dimensions."
                                              },
                                              "type": "Words"
                                            }
                                          ]
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  },
                                  {
                                    "children": [
                                      {
                                        "data": {
                                          "children": [
                                            {
                                              "data": {
                                                "value": "list of str: The listed coordinate variables will be concatenated,    in addition the \"minimal\" coordinates."
                                              },
                                              "type": "Words"
                                            }
                                          ]
                                        },
                                        "type": "Paragraph"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "type": "BulletList"
                            }
                          ],
                          "dt": {
                            "children": [
                              {
                                "data": {
                                  "value": "These coordinate variables will be concatenated together:"
                                },
                                "type": "Words"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "type": "DefList"
                  }
                ],
                "param": "coords",
                "type_": "{\"minimal\", \"different\", \"all\"} or list of str, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "If True, the open and preprocess steps of this function will be performed in parallel using "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "dask.delayed"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": ". Default is False."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "parallel",
                "type_": "bool, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "String indicating how to combine differing indexes (excluding concat_dim) in objects"
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  },
                  {
                    "data": {
                      "children": [
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "\"outer\": use the union of object indexes"
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "\"inner\": use the intersection of object indexes"
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "\"left\": use indexes from the first object with each dimension"
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "\"right\": use indexes from the last object with each dimension"
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "\"exact\": instead of aligning, raise "
                                    },
                                    "type": "Words"
                                  },
                                  {
                                    "data": {
                                      "domain": null,
                                      "role": null,
                                      "value": "ValueError"
                                    },
                                    "type": "Directive"
                                  },
                                  {
                                    "data": {
                                      "value": " when indexes to be   aligned are not equal"
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        },
                        {
                          "children": [
                            {
                              "data": {
                                "children": [
                                  {
                                    "data": {
                                      "value": "\"override\": if indexes are of same size, rewrite indexes to be   those of the first object with that dimension. Indexes for the same   dimension must have the same size in all objects."
                                    },
                                    "type": "Words"
                                  }
                                ]
                              },
                              "type": "Paragraph"
                            }
                          ]
                        }
                      ]
                    },
                    "type": "BulletList"
                  }
                ],
                "param": "join",
                "type_": "{\"outer\", \"inner\", \"left\", \"right\", \"exact, \"override\"}, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Path of the file used to read global attributes from. By default global attributes are read from the first file provided, with wildcard matches sorted by filename."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "attrs_file",
                "type_": "str or path-like, optional"
              },
              {
                "desc": [
                  {
                    "data": {
                      "children": [
                        {
                          "data": {
                            "value": "Additional arguments passed on to "
                          },
                          "type": "Words"
                        },
                        {
                          "data": {
                            "value": [
                              "xarray.open_dataset"
                            ]
                          },
                          "type": "Verbatim"
                        },
                        {
                          "data": {
                            "value": "."
                          },
                          "type": "Words"
                        }
                      ]
                    },
                    "type": "Paragraph"
                  }
                ],
                "param": "**kwargs",
                "type_": "optional"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Returns": {
      "children": [
        {
          "data": {
            "children": [
              {
                "desc": [],
                "param": "",
                "type_": "xarray.Dataset"
              }
            ]
          },
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Summary": {
      "children": [
        {
          "data": {
            "children": [
              {
                "data": {
                  "value": "Open multiple files as a single dataset."
                },
                "type": "Words"
              }
            ]
          },
          "type": "Paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null
  },
  "item_file": "/xarray/backends/api.py",
  "item_line": 692,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "See Also",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "xarray",
          "path": "xarray.core.combine.combine_by_coords",
          "version": "2022.3.0"
        },
        "value": "combine_by_coords"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "xarray",
          "path": "xarray.core.combine.combine_nested",
          "version": "2022.3.0"
        },
        "value": "combine_nested"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "xarray",
          "path": "xarray.backends.api.open_dataset",
          "version": "2022.3.0"
        },
        "value": "open_dataset"
      },
      "type": null
    }
  ],
  "signature": {
    "value": "open_mfdataset(paths, chunks=None, concat_dim=None, compat='no_conflicts', preprocess=None, engine=None, data_vars='all', coords='different', combine='by_coords', parallel=False, join='outer', attrs_file=None, combine_attrs='override', **kwargs)"
  }
}