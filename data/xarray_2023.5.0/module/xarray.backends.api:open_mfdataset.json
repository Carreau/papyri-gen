{
  "aliases": [
    "xarray.open_mfdataset"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If combine='by_coords' then the function "
            },
            {
              "type": "inlineCode",
              "value": "combine_by_coords"
            },
            {
              "type": "text",
              "value": " is used to combine the datasets into one before returning the result, and if combine='nested' then "
            },
            {
              "type": "inlineCode",
              "value": "combine_nested"
            },
            {
              "type": "text",
              "value": " is used. The filepaths must be structured according to which combining function is used, the details of which are given in the documentation for "
            },
            {
              "type": "inlineCode",
              "value": "combine_by_coords"
            },
            {
              "type": "text",
              "value": " and "
            },
            {
              "type": "inlineCode",
              "value": "combine_nested"
            },
            {
              "type": "text",
              "value": ". By default "
            },
            {
              "type": "inlineCode",
              "value": "combine='by_coords'"
            },
            {
              "type": "text",
              "value": " will be used. Requires dask to be installed. See documentation for details on dask . Global attributes from the "
            },
            {
              "type": "inlineCode",
              "value": "attrs_file"
            },
            {
              "type": "text",
              "value": " are used for the combined dataset."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "inlineCode",
              "value": "open_mfdataset"
            },
            {
              "type": "text",
              "value": " opens files with read-only access. When you modify values of a Dataset, even one linked to files on disk, only the in-memory copy you are manipulating in xarray is modified: the original file on disk is never touched."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Either a string glob in the form "
                    },
                    {
                      "type": "inlineCode",
                      "value": "\"path/to/my/files/*.nc\""
                    },
                    {
                      "type": "text",
                      "value": " or an explicit list of files to open. Paths can be given as strings or as pathlib Paths. If concatenation along more than one dimension is desired, then "
                    },
                    {
                      "type": "inlineCode",
                      "value": "paths"
                    },
                    {
                      "type": "text",
                      "value": " must be a nested list-of-lists (see "
                    },
                    {
                      "type": "inlineCode",
                      "value": "combine_nested"
                    },
                    {
                      "type": "text",
                      "value": " for details). (A string glob will be expanded to a 1-dimensional list.)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "paths",
              "type": "Param",
              "type_": "str or nested sequence of paths"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dictionary with keys given by dimension names and values given by chunk sizes. In general, these should divide the dimensions of each dataset. If int, chunk each dimension by "
                    },
                    {
                      "type": "inlineCode",
                      "value": "chunks"
                    },
                    {
                      "type": "text",
                      "value": ". By default, chunks will be chosen to load entire input files into memory at once. This has a major impact on performance: please see the full documentation for more details ."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "chunks",
              "type": "Param",
              "type_": "int, dict, 'auto' or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Dimensions to concatenate files along.  You only need to provide this argument if "
                    },
                    {
                      "type": "inlineCode",
                      "value": "combine='nested'"
                    },
                    {
                      "type": "text",
                      "value": ", and if any of the dimensions along which you want to concatenate is not a dimension in the original datasets, e.g., if you want to stack a collection of 2D arrays along a third dimension. Set "
                    },
                    {
                      "type": "inlineCode",
                      "value": "concat_dim=[..., None, ...]"
                    },
                    {
                      "type": "text",
                      "value": " explicitly to disable concatenation along a particular dimension. Default is None, which for a 1D list of filepaths is equivalent to opening the files separately and then merging them with "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xarray.merge"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "concat_dim",
              "type": "Param",
              "type_": "str, DataArray, Index or a Sequence of these or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xarray.combine_by_coords"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xarray.combine_nested"
                    },
                    {
                      "type": "text",
                      "value": " is used to combine all the data. Default is to use "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xarray.combine_by_coords"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "combine",
              "type": "Param",
              "type_": "{\"by_coords\", \"nested\"}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "String indicating how to compare variables of the same name for potential conflicts when merging:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "\"broadcast_equals\": all values must be equal when variables are    broadcast against each other to ensure common dimensions."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "\"equals\": all values and dimensions must be the same."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "\"identical\": all values, dimensions and attributes must be the    same."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "\"no_conflicts\": only values which are not null in both datasets    must be equal. The returned dataset then contains the combination    of all non-null values."
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        },
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "type": "text",
                                  "value": "\"override\": skip comparing and pick variable from first dataset"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "spread": false,
                          "type": "listItem"
                        }
                      ],
                      "ordered": false,
                      "spread": false,
                      "start": 1,
                      "type": "list"
                    }
                  ],
                  "type": "blockquote"
                }
              ],
              "param": "compat",
              "type": "Param",
              "type_": "{\"identical\", \"equals\", \"broadcast_equals\",               \"no_conflicts\", \"override\"}, default: \"no_conflicts\""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If provided, call this function on each dataset prior to concatenation. You can find the file-name from which each dataset was loaded in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "ds.encoding[\"source\"]"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "preprocess",
              "type": "Param",
              "type_": "callable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Engine to use when reading files. If not provided, the default engine is chosen based on available dependencies, with a preference for \"netcdf4\"."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "engine",
              "type": "Param",
              "type_": "{\"netcdf4\", \"scipy\", \"pydap\", \"h5netcdf\", \"pynio\",         \"pseudonetcdf\", \"zarr\", None}, installed backend         or subclass of xarray.backends.BackendEntrypoint, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "\"minimal\": Only data variables in which the dimension already     appears are included."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "\"different\": Data variables which are not equal (ignoring     attributes) across all datasets are also concatenated (as well as     all for which dimension already appears). Beware: this option may     load the data payload of data variables into memory if they are not     already loaded."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "\"all\": All data variables will be concatenated."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "list of str: The listed data variables will be concatenated, in     addition to the \"minimal\" data variables."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            }
                          ],
                          "ordered": false,
                          "spread": false,
                          "start": 1,
                          "type": "list"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "These data variables will be concatenated together:"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "data_vars",
              "type": "Param",
              "type_": "{\"minimal\", \"different\", \"all\"} or list of str, default: \"all\""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "dd": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "\"minimal\": Only coordinates in which the dimension already appears    are included."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "\"different\": Coordinates which are not equal (ignoring attributes)    across all datasets are also concatenated (as well as all for which    dimension already appears). Beware: this option may load the data    payload of coordinate variables into memory if they are not already    loaded."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "\"all\": All coordinate variables will be concatenated, except    those corresponding to other dimensions."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "list of str: The listed coordinate variables will be concatenated,    in addition the \"minimal\" coordinates."
                                    }
                                  ],
                                  "type": "paragraph"
                                }
                              ],
                              "spread": false,
                              "type": "listItem"
                            }
                          ],
                          "ordered": false,
                          "spread": false,
                          "start": 1,
                          "type": "list"
                        }
                      ],
                      "dt": {
                        "children": [
                          {
                            "type": "text",
                            "value": "These coordinate variables will be concatenated together:"
                          }
                        ],
                        "type": "paragraph"
                      },
                      "type": "DefListItem"
                    }
                  ],
                  "type": "DefList"
                }
              ],
              "param": "coords",
              "type": "Param",
              "type_": "{\"minimal\", \"different\", \"all\"} or list of str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, the open and preprocess steps of this function will be performed in parallel using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dask.delayed"
                    },
                    {
                      "type": "text",
                      "value": ". Default is False."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "parallel",
              "type": "Param",
              "type_": "bool, default: False"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "String indicating how to combine differing indexes (excluding concat_dim) in objects"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "\"outer\": use the union of object indexes"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "\"inner\": use the intersection of object indexes"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "\"left\": use indexes from the first object with each dimension"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "\"right\": use indexes from the last object with each dimension"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "\"exact\": instead of aligning, raise "
                            },
                            {
                              "domain": null,
                              "role": null,
                              "type": "Directive",
                              "value": "ValueError"
                            },
                            {
                              "type": "text",
                              "value": " when indexes to be   aligned are not equal"
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "\"override\": if indexes are of same size, rewrite indexes to be   those of the first object with that dimension. Indexes for the same   dimension must have the same size in all objects."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                }
              ],
              "param": "join",
              "type": "Param",
              "type_": "{\"outer\", \"inner\", \"left\", \"right\", \"exact\", \"override\"}, default: \"outer\""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Path of the file used to read global attributes from. By default global attributes are read from the first file provided, with wildcard matches sorted by filename."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "attrs_file",
              "type": "Param",
              "type_": "str or path-like, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A callable or a string indicating how to combine attrs of the objects being merged:"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "\"drop\": empty attrs on returned Dataset."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "\"identical\": all attrs must be the same on every object."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "\"no_conflicts\": attrs from all objects are combined, any that have   the same name must also have the same value."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "\"drop_conflicts\": attrs from all objects are combined, any that have   the same name but different values are dropped."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "type": "text",
                              "value": "\"override\": skip comparing and copy attrs from the first dataset to   the result."
                            }
                          ],
                          "type": "paragraph"
                        }
                      ],
                      "spread": false,
                      "type": "listItem"
                    }
                  ],
                  "ordered": false,
                  "spread": false,
                  "start": 1,
                  "type": "list"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If a callable, it must expect a sequence of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "attrs"
                    },
                    {
                      "type": "text",
                      "value": " dicts and a context object as its only parameters."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "combine_attrs",
              "type": "Param",
              "type_": "{\"drop\", \"identical\", \"no_conflicts\", \"drop_conflicts\",                      \"override\"} or callable, default: \"override\""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Additional arguments passed on to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "xarray.open_dataset"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": "optional"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "",
              "type": "Param",
              "type_": "xarray.Dataset"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Open multiple files as a single dataset."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "A user might want to pass additional arguments into ``preprocess`` when\napplying some operation to many individual files that are being opened. One route\nto do this is through the use of ``functools.partial``."
      },
      {
        "type": "code",
        "value": "from functools import partial\ndef _preprocess(x, lon_bnds, lat_bnds):\n    return x.sel(lon=slice(*lon_bnds), lat=slice(*lat_bnds))"
      },
      {
        "type": "code",
        "value": ">>> lon_bnds, lat_bnds = (-110, -105), (40, 45)\n>>> partial_func = partial(_preprocess, lon_bnds=lon_bnds, lat_bnds=lat_bnds)\n>>> ds = xr.open_mfdataset(\n>>>     \"file_*.nc\", concat_dim=\"time\", preprocess=partial_func\n>>> )  # doctest: +SKIP"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/xarray/backends/api.py",
  "item_line": 783,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "See Also",
    "Examples",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "xarray",
          "path": "xarray.core.combine:combine_by_coords",
          "type": "RefInfo",
          "version": "2023.5.0"
        },
        "type": "Link",
        "value": "combine_by_coords"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "xarray",
          "path": "xarray.core.combine:combine_nested",
          "type": "RefInfo",
          "version": "2023.5.0"
        },
        "type": "Link",
        "value": "combine_nested"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "open_dataset",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "open_dataset"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(paths: 'str | NestedSequence[str | os.PathLike]', chunks: 'T_Chunks | None' = None, concat_dim: 'str | DataArray | Index | Sequence[str] | Sequence[DataArray] | Sequence[Index] | None' = None, compat: 'CompatOptions' = 'no_conflicts', preprocess: 'Callable[[Dataset], Dataset] | None' = None, engine: 'T_Engine | None' = None, data_vars: \"Literal['all', 'minimal', 'different'] | list[str]\" = 'all', coords='different', combine: \"Literal['by_coords', 'nested']\" = 'by_coords', parallel: 'bool' = False, join: 'JoinOptions' = 'outer', attrs_file: 'str | os.PathLike | None' = None, combine_attrs: 'CombineAttrsOptions' = 'override', **kwargs) -> 'Dataset'"
  },
  "type": "DocBlob"
}