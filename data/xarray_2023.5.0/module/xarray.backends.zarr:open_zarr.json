{
  "aliases": [
    "xarray.open_zarr"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "The "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "store",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "store"
            },
            {
              "type": "text",
              "value": " object should be a valid store for a Zarr group. "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "store",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "store"
            },
            {
              "type": "text",
              "value": " variables must contain dimension metadata encoded in the "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "_ARRAY_DIMENSIONS"
            },
            {
              "type": "text",
              "value": " attribute or must have NCZarr format."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A MutableMapping where a Zarr Group has been stored or a path to a directory in file system where a Zarr DirectoryStore has been stored."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "store",
              "type": "Param",
              "type_": "MutableMapping or str"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array synchronizer provided to zarr"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "synchronizer",
              "type": "Param",
              "type_": "object, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Group path. (a.k.a. "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "path"
                    },
                    {
                      "type": "text",
                      "value": " in zarr terminology.)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "group",
              "type": "Param",
              "type_": "str, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Chunk sizes along each dimension, e.g., "
                    },
                    {
                      "type": "inlineCode",
                      "value": "5"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "{'x': 5, 'y': 5}"
                    },
                    {
                      "type": "text",
                      "value": ". If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "chunks='auto'"
                    },
                    {
                      "type": "text",
                      "value": ", dask chunks are created based on the variable's zarr chunks. If "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "chunks=None"
                    },
                    {
                      "type": "text",
                      "value": ", zarr array data will lazily convert to numpy arrays upon access. This accepts all the chunk specifications as Dask does."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "chunks",
              "type": "Param",
              "type_": "int or dict or tuple or {None, 'auto'}, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to drop the zarr chunks encoded for each variable when a dataset is loaded with specified chunk sizes (default: False)"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "overwrite_encoded_chunks",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to decode these variables, assuming they were saved according to CF conventions."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "decode_cf",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, replace array values equal to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "_FillValue"
                    },
                    {
                      "type": "text",
                      "value": " with NA and scale values according to the formula "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "original_values * scale_factor +\nadd_offset"
                    },
                    {
                      "type": "text",
                      "value": ", where "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "_FillValue"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "scale_factor"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "add_offset"
                    },
                    {
                      "type": "text",
                      "value": " are taken from variable attributes (if they exist).  If the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "_FillValue"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "missing_value"
                    },
                    {
                      "type": "text",
                      "value": " attribute contains multiple values a warning will be issued and all array values matching one of the multiple values will be replaced by NA."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "mask_and_scale",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, decode times encoded in the standard NetCDF datetime format into datetime objects. Otherwise, leave them encoded as numbers."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "decode_times",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, concatenate along the last dimension of character arrays to form string arrays. Dimensions will only be concatenated over (and removed) if they have no corresponding variable and if they are only used as the last dimension of character arrays."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "concat_characters",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, decode the 'coordinates' attribute to identify coordinates in the resulting dataset."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "decode_coords",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A variable or list of variables to exclude from being parsed from the dataset. This may be useful to drop variables with problems or inconsistent values."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "drop_variables",
              "type": "Param",
              "type_": "str or iterable, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Whether to open the store using zarr's consolidated metadata capability. Only works for stores that have already been consolidated. By default ("
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "consolidate=None"
                    },
                    {
                      "type": "text",
                      "value": "), attempts to read consolidated metadata, falling back to read non-consolidated metadata if that fails."
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "When the experimental "
                    },
                    {
                      "type": "inlineCode",
                      "value": "zarr_version=3"
                    },
                    {
                      "type": "text",
                      "value": ", "
                    },
                    {
                      "type": "inlineCode",
                      "value": "consolidated"
                    },
                    {
                      "type": "text",
                      "value": " must be either be "
                    },
                    {
                      "type": "inlineCode",
                      "value": "None"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "type": "inlineCode",
                      "value": "False"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "consolidated",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A separate Zarr store only for chunk data."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "chunk_store",
              "type": "Param",
              "type_": "MutableMapping, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Any additional parameters for the storage backend (ignored for local paths)."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "storage_options",
              "type": "Param",
              "type_": "dict, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, decode variables and coordinates with time units in {'days', 'hours', 'minutes', 'seconds', 'milliseconds', 'microseconds'} into timedelta objects. If False, leave them encoded as numbers. If None (default), assume the same value of decode_time."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "decode_timedelta",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Only relevant if encoded dates come from a standard calendar (e.g. \"gregorian\", \"proleptic_gregorian\", \"standard\", or not specified).  If None (default), attempt to decode times to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.datetime64[ns]"
                    },
                    {
                      "type": "text",
                      "value": " objects; if this is not possible, decode times to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "cftime.datetime"
                    },
                    {
                      "type": "text",
                      "value": " objects. If True, always decode times to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "cftime.datetime"
                    },
                    {
                      "type": "text",
                      "value": " objects, regardless of whether or not they can be represented using "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.datetime64[ns]"
                    },
                    {
                      "type": "text",
                      "value": " objects.  If False, always decode times to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "np.datetime64[ns]"
                    },
                    {
                      "type": "text",
                      "value": " objects; if this is not possible raise an error."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "use_cftime",
              "type": "Param",
              "type_": "bool, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The desired zarr spec version to target (currently 2 or 3). The default of None will attempt to determine the zarr version from "
                    },
                    {
                      "type": "inlineCode",
                      "value": "store"
                    },
                    {
                      "type": "text",
                      "value": " when possible, otherwise defaulting to 2."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "zarr_version",
              "type": "Param",
              "type_": "int or None, optional"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Which chunked array type to coerce this datasets' arrays to. Defaults to 'dask' if installed, else whatever is registered via the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "ChunkManagerEnetryPoint"
                    },
                    {
                      "type": "text",
                      "value": " system. Experimental API that should not be relied upon."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "chunked_array_type: str, optional",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Additional keyword arguments passed on to the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "xarray",
                        "path": "xarray.core.parallelcompat:ChunkManagerEntrypoint.from_array",
                        "type": "RefInfo",
                        "version": "2023.5.0"
                      },
                      "type": "Link",
                      "value": "ChunkManagerEntrypoint.from_array"
                    },
                    {
                      "type": "text",
                      "value": " method used to create chunked arrays, via whichever chunk manager is specified through the "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "module",
                      "reference": {
                        "kind": "module",
                        "module": "xarray",
                        "path": "xarray.core.parallelcompat:get_chunked_array_type",
                        "type": "RefInfo",
                        "version": "2023.5.0"
                      },
                      "type": "Link",
                      "value": "chunked_array_type"
                    },
                    {
                      "type": "text",
                      "value": " kwarg. Defaults to {'manager': 'dask'}, meaning additional kwargs will be passed eventually to "
                    },
                    {
                      "type": "inlineCode",
                      "value": "dask.array.from_array"
                    },
                    {
                      "type": "text",
                      "value": ". Experimental API that should not be relied upon."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "from_array_kwargs: dict, optional",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The newly created dataset."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dataset",
              "type": "Param",
              "type_": "Dataset"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Load and decode a dataset from a Zarr store."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/xarray/backends/zarr.py",
  "item_line": 702,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "See Also",
    "References"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "open_dataset",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "open_dataset"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "module",
          "module": "xarray",
          "path": "xarray.backends.api:open_mfdataset",
          "type": "RefInfo",
          "version": "2023.5.0"
        },
        "type": "Link",
        "value": "open_mfdataset"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(store, group=None, synchronizer=None, chunks='auto', decode_cf=True, mask_and_scale=True, decode_times=True, concat_characters=True, decode_coords=True, drop_variables=None, consolidated=None, overwrite_encoded_chunks=False, chunk_store=None, storage_options=None, decode_timedelta=None, use_cftime=None, zarr_version=None, chunked_array_type: 'str | None' = None, from_array_kwargs: 'dict[str, Any] | None' = None, **kwargs)"
  },
  "type": "DocBlob"
}