{
  "aliases": [
    "xarray.core.accessor_str.StringAccessor.count"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This function is used to count the number of times a particular regex pattern is repeated in each of the string elements of the "
            },
            {
              "type": "inlineCode",
              "value": "~xarray.DataArray"
            },
            {
              "type": "text",
              "value": "."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "The pattern "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "pat",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "pat"
            },
            {
              "type": "text",
              "value": " can either be a single "
            },
            {
              "type": "inlineCode",
              "value": "str"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "re:Pattern",
                "path": "re:Pattern",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "re.Pattern"
            },
            {
              "type": "text",
              "value": " or array-like of "
            },
            {
              "type": "inlineCode",
              "value": "str"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "module",
              "reference": {
                "kind": "api",
                "module": "re:Pattern",
                "path": "re:Pattern",
                "type": "RefInfo",
                "version": "*"
              },
              "type": "Link",
              "value": "re.Pattern"
            },
            {
              "type": "text",
              "value": ". If array-like, it is broadcast against the array and applied elementwise."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A string containing a regular expression or a compiled regular expression object. If array-like, it is broadcast."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "pat",
              "type": "Param",
              "type_": "str or re.Pattern or array-like of str or re.Pattern"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Flags to pass through to the re module, e.g. "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "re.IGNORECASE"
                    },
                    {
                      "type": "text",
                      "value": ". see "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "compilation-flags"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://docs.python.org/3/howto/regex.html#compilation-flags"
                    },
                    {
                      "type": "text",
                      "value": ". "
                    },
                    {
                      "type": "inlineCode",
                      "value": "0"
                    },
                    {
                      "type": "text",
                      "value": " means no flags. Flags can be combined with the bitwise or operator "
                    },
                    {
                      "type": "inlineCode",
                      "value": "|"
                    },
                    {
                      "type": "text",
                      "value": ". Cannot be set if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "pat",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "pat"
                    },
                    {
                      "type": "text",
                      "value": " is a compiled regex."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "flags",
              "type": "Param",
              "type_": "int, default: 0"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, case sensitive. Cannot be set if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "pat",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "pat"
                    },
                    {
                      "type": "text",
                      "value": " is a compiled regex. Equivalent to setting the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "re.IGNORECASE"
                    },
                    {
                      "type": "text",
                      "value": " flag."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "case",
              "type": "Param",
              "type_": "bool, default: True"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "counts",
              "type": "Param",
              "type_": "array of int"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Count occurrences of pattern in each string of the array."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "da = xr.DataArray([\"jjklmn\", \"opjjqrs\", \"t-JJ99vwx\"], dims=\"x\")\nda"
      },
      {
        "type": "text",
        "value": "Using a string:\n>>> da.str.count(\"jj\")\n<xarray.DataArray (x: 3)>\narray([1, 1, 0])\nDimensions without coordinates: x"
      },
      {
        "type": "text",
        "value": "Enable case-insensitive matching by setting case to false:\n>>> counts = da.str.count(\"jj\", case=False)\n>>> counts\n<xarray.DataArray (x: 3)>\narray([1, 1, 1])\nDimensions without coordinates: x"
      },
      {
        "type": "text",
        "value": "Using regex:\n>>> pat = \"JJ[0-9]{2}[a-z]{3}\"\n>>> counts = da.str.count(pat)\n>>> counts\n<xarray.DataArray (x: 3)>\narray([0, 0, 1])\nDimensions without coordinates: x"
      },
      {
        "type": "text",
        "value": "Using an array of strings (the pattern will be broadcast against the array):"
      },
      {
        "type": "code",
        "value": "pat = xr.DataArray([\"jj\", \"JJ\"], dims=\"y\")\ncounts = da.str.count(pat)\ncounts"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/xarray/core/accessor_str.py",
  "item_line": 1076,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, pat: 'str | bytes | Pattern | Any', flags: 'int' = 0, case: 'bool | None' = None) -> 'T_DataArray'"
  },
  "type": "DocBlob"
}