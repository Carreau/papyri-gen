{
  "aliases": [
    "xarray.core.accessor_str.StringAccessor.extract"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "For each string in the DataArray, extract groups from the first match of regular expression pat."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "pat",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "pat"
            },
            {
              "type": "text",
              "value": " is array-like, it is broadcast against the array and applied elementwise."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "A string containing a regular expression or a compiled regular expression object. If array-like, it is broadcast."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "pat",
              "type": "Param",
              "type_": "str or re.Pattern or array-like of str or re.Pattern"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Name of the new dimension to store the captured strings in. If None, the pattern must have only one capture group and the resulting DataArray will have the same size as the original."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "dim",
              "type": "Param",
              "type_": "hashable or None"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If True, case sensitive. Cannot be set if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "pat",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "pat"
                    },
                    {
                      "type": "text",
                      "value": " is a compiled regex. Equivalent to setting the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "re.IGNORECASE"
                    },
                    {
                      "type": "text",
                      "value": " flag."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "case",
              "type": "Param",
              "type_": "bool, default: True"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Flags to pass through to the re module, e.g. "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "re.IGNORECASE"
                    },
                    {
                      "type": "text",
                      "value": ". see "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "compilation-flags"
                        }
                      ],
                      "title": "",
                      "type": "link",
                      "url": "https://docs.python.org/3/howto/regex.html#compilation-flags"
                    },
                    {
                      "type": "text",
                      "value": ". "
                    },
                    {
                      "type": "inlineCode",
                      "value": "0"
                    },
                    {
                      "type": "text",
                      "value": " means no flags. Flags can be combined with the bitwise or operator "
                    },
                    {
                      "type": "inlineCode",
                      "value": "|"
                    },
                    {
                      "type": "text",
                      "value": ". Cannot be set if "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "pat",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "pat"
                    },
                    {
                      "type": "text",
                      "value": " is a compiled regex."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "flags",
              "type": "Param",
              "type_": "int, default: 0"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "pat",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "pat"
                    },
                    {
                      "type": "text",
                      "value": " has no capture groups."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "dim",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "dim"
                    },
                    {
                      "type": "text",
                      "value": " is None and there is more than one capture group."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "case",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "case"
                    },
                    {
                      "type": "text",
                      "value": " is set when "
                    },
                    {
                      "anchor": null,
                      "exists": true,
                      "kind": "local",
                      "reference": {
                        "kind": "local",
                        "module": null,
                        "path": "pat",
                        "type": "RefInfo",
                        "version": null
                      },
                      "type": "Link",
                      "value": "pat"
                    },
                    {
                      "type": "text",
                      "value": " is a compiled regular expression."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "ValueError"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The given dimension is already present in the DataArray."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "",
              "type": "Param",
              "type_": "KeyError"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "extracted",
              "type": "Param",
              "type_": "same type as values or object array"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Extract the first match of capture groups in the regex pat as a new dimension in a DataArray."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Create a string array"
      },
      {
        "type": "code",
        "value": "value = xr.DataArray(\n    [\n        [\n            \"a_Xy_0\",\n            \"ab_xY_10-bab_Xy_110-baab_Xy_1100\",\n            \"abc_Xy_01-cbc_Xy_2210\",\n        ],\n        [\n            \"abcd_Xy_-dcd_Xy_33210-dccd_Xy_332210\",\n            \"\",\n            \"abcdef_Xy_101-fef_Xy_5543210\",\n        ],\n    ],\n    dims=[\"X\", \"Y\"],\n)"
      },
      {
        "type": "text",
        "value": "Extract matches"
      },
      {
        "type": "code",
        "value": "value.str.extract(r\"(\\w+)_Xy_(\\d*)\", dim=\"match\")"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/xarray/core/accessor_str.py",
  "item_line": 1952,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "DataArray.str.extractall",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "DataArray.str.extractall"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "DataArray.str.findall",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "DataArray.str.findall"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "re.compile",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "re.compile"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "re.search",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "re.search"
      },
      "type": null
    },
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "pandas.Series.str.extract",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "pandas.Series.str.extract"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, pat: 'str | bytes | Pattern | Any', dim: 'Hashable', case: 'bool | None' = None, flags: 'int' = 0) -> 'T_DataArray'"
  },
  "type": "DocBlob"
}