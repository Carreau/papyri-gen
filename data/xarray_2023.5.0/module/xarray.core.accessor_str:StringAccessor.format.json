{
  "aliases": [
    "xarray.core.accessor_str.StringAccessor.format"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This is equivalent to calling "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "str.format"
            },
            {
              "type": "text",
              "value": " on every element of the DataArray. The replacement values can either be a string-like scalar or array-like of string-like values. If array-like, the values will be broadcast and applied elementwiseto the input DataArray."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "note "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Array-like values provided as "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "*args"
                },
                {
                  "type": "text",
                  "value": " will have their dimensions added even if those arguments are not used in any string formatting."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        },
        {
          "children": [
            {
              "children": [
                {
                  "type": "text",
                  "value": "warning "
                }
              ],
              "type": "admonitionTitle"
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "Array-like arguments are only applied elementwise for "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "*args"
                },
                {
                  "type": "text",
                  "value": ". For "
                },
                {
                  "domain": null,
                  "role": null,
                  "type": "Directive",
                  "value": "**kwargs"
                },
                {
                  "type": "text",
                  "value": ", values are used as-is."
                }
              ],
              "type": "paragraph"
            }
          ],
          "kind": "note",
          "type": "admonition"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Values for positional formatting. If array-like, the values are broadcast and applied elementwise. The dimensions will be placed at the end of the output array dimensions in the order they are provided."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "*args",
              "type": "Param",
              "type_": "str or bytes or array-like of str or bytes"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Values for keyword-based formatting. These are "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "not"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "type": "text",
                      "value": " broadcast or applied elementwise."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": "str or bytes or array-like of str or bytes"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [],
              "param": "formatted",
              "type": "Param",
              "type_": "same type as values"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Perform python string formatting on each element of the DataArray."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Create an array to format."
      },
      {
        "type": "code",
        "value": "values = xr.DataArray(\n    [\"{} is {adj0}\", \"{} and {} are {adj1}\"],\n    dims=[\"X\"],\n)"
      },
      {
        "type": "text",
        "value": "Set the values to fill."
      },
      {
        "type": "code",
        "value": "noun0 = xr.DataArray(\n    [\"spam\", \"egg\"],\n    dims=[\"Y\"],\n)\nnoun1 = xr.DataArray(\n    [\"lancelot\", \"arthur\"],\n    dims=[\"ZZ\"],\n)\nadj0 = \"unexpected\"\nadj1 = \"like a duck\""
      },
      {
        "type": "text",
        "value": "Insert the values into the array"
      },
      {
        "type": "code",
        "value": "values.str.format(noun0, noun1, adj0=adj0, adj1=adj1)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/xarray/core/accessor_str.py",
  "item_line": 584,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "str.format",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "str.format"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, *args: 'Any', **kwargs: 'Any') -> 'T_DataArray'"
  },
  "type": "DocBlob"
}