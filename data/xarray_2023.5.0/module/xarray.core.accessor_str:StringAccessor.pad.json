{
  "aliases": [
    "xarray.core.accessor_str.StringAccessor.pad"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "If "
            },
            {
              "anchor": null,
              "exists": true,
              "kind": "local",
              "reference": {
                "kind": "local",
                "module": null,
                "path": "width",
                "type": "RefInfo",
                "version": null
              },
              "type": "Link",
              "value": "width"
            },
            {
              "type": "text",
              "value": " or 'fillchar` is array-like, they are broadcast against the array and applied elementwise."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Minimum width of resulting string; additional characters will be filled with character defined in "
                    },
                    {
                      "type": "inlineCode",
                      "value": "fillchar"
                    },
                    {
                      "type": "text",
                      "value": ". If array-like, it is broadcast."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "width",
              "type": "Param",
              "type_": "int or array-like of int"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Side from which to fill resulting string."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "side",
              "type": "Param",
              "type_": "{\"left\", \"right\", \"both\"}, default: \"left\""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Additional character for filling, default is a space. If array-like, it is broadcast."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fillchar",
              "type": "Param",
              "type_": "str or array-like of str, default: \" \""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Array with a minimum number of char in each element."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "filled",
              "type": "Param",
              "type_": "same type as values"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Pad strings in the array up to width."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "text",
        "value": "Pad strings in the array with a single string on the left side."
      },
      {
        "type": "text",
        "value": "Define the string in the array."
      },
      {
        "type": "code",
        "value": "da = xr.DataArray([\"PAR184\", \"TKO65\", \"NBO9139\", \"NZ39\"], dims=\"x\")\nda"
      },
      {
        "type": "text",
        "value": "Pad the strings"
      },
      {
        "type": "code",
        "value": "filled = da.str.pad(8, side=\"left\", fillchar=\"0\")\nfilled"
      },
      {
        "type": "text",
        "value": "Pad strings on the right side"
      },
      {
        "type": "code",
        "value": "filled = da.str.pad(8, side=\"right\", fillchar=\"0\")\nfilled"
      },
      {
        "type": "text",
        "value": "Pad strings on both sides"
      },
      {
        "type": "code",
        "value": "filled = da.str.pad(8, side=\"both\", fillchar=\"0\")\nfilled"
      },
      {
        "type": "text",
        "value": "Using an array-like width"
      },
      {
        "type": "code",
        "value": "width = xr.DataArray([8, 10], dims=\"y\")\nfilled = da.str.pad(width, side=\"left\", fillchar=\"0\")\nfilled"
      },
      {
        "type": "text",
        "value": "Using an array-like value for fillchar"
      },
      {
        "type": "code",
        "value": "fillchar = xr.DataArray([\"0\", \"-\"], dims=\"y\")\nfilled = da.str.pad(8, side=\"left\", fillchar=fillchar)\nfilled"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/xarray/core/accessor_str.py",
  "item_line": 1226,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Examples"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, width: 'int | Any', side: 'str' = 'left', fillchar: 'str | bytes | Any' = ' ') -> 'T_DataArray'"
  },
  "type": "DocBlob"
}