{
  "aliases": [
    "xarray.core.alignment.DataWithCoords.pipe"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "This method replicates the pandas method of the same name."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Use "
            },
            {
              "type": "inlineCode",
              "value": ".pipe"
            },
            {
              "type": "text",
              "value": " when chaining together functions that expect xarray or pandas objects, e.g., instead of writing"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "f(g(h(ds), arg1=a), arg2=b, arg3=c)"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "You can write"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "(ds.pipe(h).pipe(g, arg1=a).pipe(f, arg2=b, arg3=c))"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "If you have a function that takes the data as (say) the second argument, pass a tuple indicating which keyword expects the data. For example, suppose "
            },
            {
              "type": "inlineCode",
              "value": "f"
            },
            {
              "type": "text",
              "value": " takes its data as "
            },
            {
              "type": "inlineCode",
              "value": "arg2"
            },
            {
              "type": "text",
              "value": ":"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "(ds.pipe(h).pipe(g, arg1=a).pipe((f, \"arg2\"), arg1=a, arg3=c))"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "function to apply to this xarray object (Dataset/DataArray). "
                    },
                    {
                      "type": "inlineCode",
                      "value": "args"
                    },
                    {
                      "type": "text",
                      "value": ", and "
                    },
                    {
                      "type": "inlineCode",
                      "value": "kwargs"
                    },
                    {
                      "type": "text",
                      "value": " are passed into "
                    },
                    {
                      "type": "inlineCode",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": ". Alternatively a "
                    },
                    {
                      "type": "inlineCode",
                      "value": "(callable, data_keyword)"
                    },
                    {
                      "type": "text",
                      "value": " tuple where "
                    },
                    {
                      "type": "inlineCode",
                      "value": "data_keyword"
                    },
                    {
                      "type": "text",
                      "value": " is a string indicating the keyword of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "callable"
                    },
                    {
                      "type": "text",
                      "value": " that expects the xarray object."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "func",
              "type": "Param",
              "type_": "callable"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "positional arguments passed into "
                    },
                    {
                      "type": "inlineCode",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "*args",
              "type": "Param",
              "type_": ""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "a dictionary of keyword arguments passed into "
                    },
                    {
                      "type": "inlineCode",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "the return type of "
                    },
                    {
                      "type": "inlineCode",
                      "value": "func"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "object",
              "type": "Param",
              "type_": "Any"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Apply "
            },
            {
              "type": "inlineCode",
              "value": "func(self, *args, **kwargs)"
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [
      {
        "type": "code",
        "value": "x = xr.Dataset(\n    {\n        \"temperature_c\": (\n            (\"lat\", \"lon\"),\n            20 * np.random.rand(4).reshape(2, 2),\n        ),\n        \"precipitation\": ((\"lat\", \"lon\"), np.random.rand(4).reshape(2, 2)),\n    },\n    coords={\"lat\": [10, 20], \"lon\": [150, 160]},\n)\nx"
      },
      {
        "type": "code",
        "value": "def adder(data, arg):\n    return data + arg"
      },
      {
        "type": "code",
        "value": "def div(data, arg):\n    return data / arg"
      },
      {
        "type": "code",
        "value": "def sub_mult(data, sub_arg, mult_arg):\n    return (data * mult_arg) - sub_arg"
      },
      {
        "type": "code",
        "value": "x.pipe(adder, 2)"
      },
      {
        "type": "code",
        "value": "x.pipe(adder, arg=2)"
      },
      {
        "type": "code",
        "value": "(\n    x.pipe(adder, arg=2)\n    .pipe(div, arg=2)\n    .pipe(sub_mult, sub_arg=2, mult_arg=2)\n)"
      }
    ],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/xarray/core/common.py",
  "item_line": 645,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes",
    "Examples",
    "See Also"
  ],
  "references": null,
  "see_also": [
    {
      "descriptions": [],
      "name": {
        "anchor": null,
        "exists": true,
        "kind": "module",
        "reference": {
          "kind": "to-resolve",
          "module": "current-module",
          "path": "pandas.DataFrame.pipe",
          "type": "RefInfo",
          "version": "current-version"
        },
        "type": "Link",
        "value": "pandas.DataFrame.pipe"
      },
      "type": null
    }
  ],
  "signature": {
    "type": "Signature",
    "value": "(self, func: 'Callable[..., T] | tuple[Callable[..., T], str]', *args: 'Any', **kwargs: 'Any') -> 'T'"
  },
  "type": "DocBlob"
}