{
  "aliases": [
    "xarray.plot.utils.legend_elements"
  ],
  "arbitrary": [],
  "content": {
    "Attributes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Extended Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Each legend handle is a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": ".Line2D"
            },
            {
              "type": "text",
              "value": " representing the Path that was drawn, and each label is a string what each Path represents."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "This is useful for obtaining a legend for a "
            },
            {
              "domain": null,
              "role": null,
              "type": "Directive",
              "value": "~.Axes.scatter"
            },
            {
              "type": "text",
              "value": " plot; e.g.      "
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "code",
          "value": "scatter = plt.scatter([1, 2, 3],  [4, 5, 6],  c=[7, 2, 3])\nplt.legend(*scatter.legend_elements())"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "creates three legend elements, one for each color with the numerical values passed to "
            },
            {
              "children": [
                {
                  "type": "text",
                  "value": "c"
                }
              ],
              "type": "emphasis"
            },
            {
              "type": "text",
              "value": " as the labels."
            }
          ],
          "type": "paragraph"
        },
        {
          "children": [
            {
              "type": "text",
              "value": "Also see the "
            },
            {
              "type": "inlineCode",
              "value": "automatedlegendcreation"
            },
            {
              "type": "text",
              "value": " example."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Methods": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Notes": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Other Parameters": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Parameters": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "If \"colors\", the legend handles will show the different colors of the collection. If \"sizes\", the legend will show the different sizes. To set both, use "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "kwargs"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " to directly edit the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Line2D"
                    },
                    {
                      "type": "text",
                      "value": " properties."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "prop",
              "type": "Param",
              "type_": "{\"colors\", \"sizes\"}, default: \"colors\""
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Target number of elements to create. If None, use all unique elements of the mappable array. If an integer, target to use "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "num"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " elements in the normed range. If "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "\"auto\""
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ", try to determine which option better suits the nature of the data. The number of created elements may slightly deviate from "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "num"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " due to a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.ticker.Locator"
                    },
                    {
                      "type": "text",
                      "value": " being used to find useful locations. If a list or array, use exactly those elements for the legend. Finally, a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.ticker.Locator"
                    },
                    {
                      "type": "text",
                      "value": " can be provided."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "num",
              "type": "Param",
              "type_": "int, None, \"auto\" (default), array-like, or `~.ticker.Locator`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The format or formatter to use for the labels. If a string must be a valid input for a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.StrMethodFormatter"
                    },
                    {
                      "type": "text",
                      "value": ". If None (the default), use a "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.ScalarFormatter"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "fmt",
              "type": "Param",
              "type_": "str, `~matplotlib.ticker.Formatter`, or None (default)"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Function to calculate the labels.  Often the size (or color) argument to "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": "~.Axes.scatter"
                    },
                    {
                      "type": "text",
                      "value": " will have been pre-processed by the user using a function "
                    },
                    {
                      "type": "inlineCode",
                      "value": "s = f(x)"
                    },
                    {
                      "type": "text",
                      "value": " to make the markers visible; e.g. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "size = np.log10(x)"
                    },
                    {
                      "type": "text",
                      "value": ".  Providing the inverse of this function here allows that pre-processing to be inverted, so that the legend labels have the correct values; e.g. "
                    },
                    {
                      "type": "inlineCode",
                      "value": "func = lambda\nx: 10**x"
                    },
                    {
                      "type": "text",
                      "value": "."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "func",
              "type": "Param",
              "type_": "function, default: ``lambda x: x``"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Allowed keyword arguments are "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "color"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "size"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": ". E.g. it may be useful to set the color of the markers if "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "prop=\"sizes\""
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is used; similarly to set the size of the markers if "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "prop=\"colors\""
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " is used. Any further parameters are passed onto the "
                    },
                    {
                      "domain": null,
                      "role": null,
                      "type": "Directive",
                      "value": ".Line2D"
                    },
                    {
                      "type": "text",
                      "value": " instance. This may be useful to e.g. specify a different "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "markeredgecolor"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " or "
                    },
                    {
                      "children": [
                        {
                          "type": "text",
                          "value": "alpha"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "type": "text",
                      "value": " for the legend handles."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "**kwargs",
              "type": "Param",
              "type_": ""
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Raises": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Receives": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Returns": {
      "children": [
        {
          "children": [
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "Visual representation of each element of the legend."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "handles",
              "type": "Param",
              "type_": "list of `.Line2D`"
            },
            {
              "desc": [
                {
                  "children": [
                    {
                      "type": "text",
                      "value": "The string labels for elements of the legend."
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "param": "labels",
              "type": "Param",
              "type_": "list of str"
            }
          ],
          "type": "Parameters"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Summary": {
      "children": [
        {
          "children": [
            {
              "type": "text",
              "value": "Create legend handles and labels for a PathCollection."
            }
          ],
          "type": "paragraph"
        }
      ],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warnings": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Warns": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    },
    "Yields": {
      "children": [],
      "level": 0,
      "target": null,
      "title": null,
      "type": "Section"
    }
  },
  "example_section_data": {
    "children": [],
    "level": 0,
    "target": null,
    "title": null,
    "type": "Section"
  },
  "item_file": "/xarray/plot/utils.py",
  "item_line": 972,
  "item_type": "<class 'function'>",
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "references": null,
  "see_also": [],
  "signature": {
    "type": "Signature",
    "value": "(self, prop='colors', num='auto', fmt=None, func=<function <lambda> at 0x11cfa7040>, **kwargs)"
  },
  "type": "DocBlob"
}